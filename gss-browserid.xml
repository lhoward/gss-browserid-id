<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2743 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">
<!ENTITY RFC3961 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3961.xml">
<!ENTITY RFC4402 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4402.xml">
<!ENTITY RFC4121 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml">
<!ENTITY RFC4178 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4178.xml">
<!ENTITY RFC4422 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml">
<!ENTITY RFC4757 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4757.xml">
<!ENTITY RFC5178 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5178.xml">
<!ENTITY RFC5280 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5801 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5801.xml">
<!ENTITY RFC5929 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml">
<!ENTITY RFC6680 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6680.xml">
<!ENTITY JWA PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml">
<!ENTITY JWS PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml">
<!ENTITY JWT PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-json-web-token.xml">
<!ENTITY NegoEx PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.zhu-negoex.xml">
<!ENTITY RFC4120 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
]>
<rfc docName="draft-howard-gss-browserid-02.txt" ipr="trust200902" category="exp" updates="">
  <front>
    <title abbrev="BrowserID SASL &amp; GSS-API">A SASL and GSS-API Mechanism for the BrowserID Authentication Protocol</title>
    <author initials="L." surname="Howard" fullname="Luke Howard">
      <organization abbrev="PADL">PADL Software</organization>
      <address>
        <postal>
          <street>PO Box 59</street>
          <city>Central Park</city>
          <region>VIC</region>
          <code>3145</code>
          <country>Australia</country>
        </postal>
        <email>lukeh@padl.com</email>
      </address>
    </author>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="April" year="2013"/>
    <area>
Security Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
This document defines protocols, procedures and conventions for a Generic Security Service Application Program Interface (GSS-API) security mechanism based on the BrowserID authentication mechanism. Through the GS2 family of mechanisms defined in RFC 5801, these protocols also define how Simple Authentication and Security Layer (SASL, RFC 4422) applications may use BrowserID.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="d1e825">
      <t><xref target="BrowserID"/> is a web-based three-party security protocol by which user agents can present to a Relying Party (RP) a signed assertion of e-mail address ownership. BrowserID was intended to be used for web authentication. We find BrowserID to be useful in general, therefore we define herein how to use it in many more applications.</t>
      <t>
The Simple Authentication and Security Layer (SASL) <xref target="RFC4422"/> is a framework for providing authentication and message protection services via pluggable mechanisms. Protocols that support it include IMAP, SMTP, and XMPP.</t>
      <t>
The Generic Security Service Application Program Interface (GSS-API) <xref target="RFC2743"/> provides a framework for authentication and message protection services through a common programming interface. This document conforms to the SASL and GSS-API bridge specified in <xref target="RFC5801"/>, so it defines both a SASL and GSS-API mechanism.</t>
      <t>
The BrowserID mechanism described in this document reuses the existing web-based BrowserID protocol, but profiles it for use in applications that support SASL or GSS-API, adding features such as key agreement, mutual authentication, and fast re-authentication.</t>
      <t>
The following diagram illustrates the interactions between the three parties in the GSS BrowserID protocol. Note that the terms client, initiator and user agent (UA) are used interchangeably in this document, as are server, acceptor and relying party (RP). </t>
      <t>
</t>
      <t>
        <figure anchor="magicparlabel-175" title="Interworking Architecture">
          <artwork> 
                    +------------+
                    | BrowserID  |
                    | identity   |
                    | provider   |
                    +------------+
                      //      \\
                     //        \\
                    //          \\
                   //            \\
   make signed    //              \\    fetch IdP public
   certificate   //                \\   key over HTTPS
   for user's   //                  \\  (RP may cache)
   public key  //                    \\
              //                      \\
             //                        \\
            //                          \\
           |/                            \|
    +-------------+                     +-------------+
    | SASL or GSS |    GSS BrowserID    | SASL or GSS |
    | client/UA   |&lt;-------------------&gt;| server/RP   |
    | (initiator) |                     | (acceptor)  |
    +-------------+                     +-------------+
 
 </artwork>
        </figure>
      </t>
      <section title="Discovery and Negotiation" anchor="d1e893">
        <t>
The means of discovering GSS-API peers and their supported mechanisms is out of this specification's scope. They may use SASL <xref target="RFC4422"/> or the Simple and Protected Negotiation mechanism (SPNEGO) <xref target="RFC4178"/>.</t>
        <t>
Discovery of a BrowserID identity provider (IdP) for a user is described in the BrowserID specification. A domain publishes a document containing their public key and URIs for authenticating and provisioning users, or pointer to an authority containing such a document.</t>
      </section>
      <section title="Authentication" anchor="d1e917">
        <t>
The GSS-API protocol involves a client, known as the initiator, sending an initial security context token of a chosen GSS-API security mechanism to a peer, known as the acceptor. The two peers subsequently exchange, synchronously, as many security context tokens as necessary to complete the authentication or fail. The specific number of context tokens exchanged varies by security mechanism: in the case of the BrowserID mechanism, it is typically two (i.e. a single round trip), however it can be more in some cases. Once authentication is complete, the initiator and acceptor share a security context which identifies the peers and can optionally be used for integrity or confidentiality protecting subsequent application messages.</t>
        <t>
The original BrowserID protocol, as defined outside this document, specifies a bearer token authentication protocol for web applications. The user agent generates a short-term key pair, the public key of which is signed by the user's IdP. (The user must have already authenticated to the IdP; how this is done is not specified by BrowserID, but forms-based authentication is common.) The IdP returns a certificate for the user which may be cached by the user's browser. When authenticating to a Relying Party (RP), the browser generates an identity assertion containing the RP domain and an expiration time. The user agent signs this and presents both the assertion and certificate to the RP. (The combination of an assertion and zero or more certificates is termed a “backed assertion”.) The RP fetches the public key for the IdP, validates the user's certificate (and those of any intermediate certifying parties) and then verifies the assertion.</t>
        <t>
The GSS BrowserID protocol extends this by having the RP always send back a response to the user agent, which at a minimum provides key confirmation (this is needed for some key agreement methods) and indicates the lifetime of the established security context. The key confirmation token is also required for mutual authentication, when the initiator application requests that feature.</t>
      </section>
      <section title="Message protection services" anchor="d1e933">
        <t>
GSS-API provides a number of a message protection services:</t>
        <t>
          <list style="hanging">
            <t hangText="GSS_Wrap()">
 integrity and optional confidentiality for a message</t>
            <t hangText="GSS_GetMIC()">
 integrity for a message sent separately</t>
            <t hangText="GSS_Pseudo_random()">
 shared key derivation (e.g., for keying external confidentiality+integrity layers)</t>
          </list>
        </t>
        <t>
These services may be used with security contexts that have a shared session key, to protect application-layer messages.</t>
      </section>
    </section>
    <section title="Requirements notation" anchor="d1e961">
      <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      <t>
The reader is assumed to be familiar with the terms used in the BrowserID specification.</t>
    </section>
    <section title="Naming" anchor="d1e979">
      <t>
The GSS-API provides a rich security principal naming model. At its most basic the query forms of names consist of a user-entered/displayable string and a “name-type”. Name-types are constants with names prefixed with “GSS_C_NT_” in the GSS-API. Names may also have attributes <xref target="RFC6680"/>.</t>
      <section title="GSS name types" anchor="d1e994">
        <section title="GSS_C_NT_BROWSERID_PRINCIPAL" anchor="sub_GSS_C_NT_BROWSERID_PRINCIPAL">
          <t>
This name may contain an e-mail address, or a service principal name identifying an acceptor. The encoding of service principal names is intended to be somewhat compatible with the Kerberos <xref target="RFC4120"/> security protocol (without the realm name).</t>
          <t>
The following ABNF defines the 'name' rule that names of this type must match.</t>
          <t>
            <cref>
Should we reference RFC2822 here? The Mozilla BrowserID docs sure don't.</cref>
          </t>
          <t>
</t>
          <t>
            <figure suppress-title="true" align="center">
              <artwork> char-normal = %x00-2E/%x30-3F/%x41-5B/%x5D-FF
 char-escaped = "\" %x2F / "\" %x40 / "\" %x5C
 name-char = char-normal / char-escaped
 name-string = 1*name-char
 user = name-string
 domain = name-string
 email = user "@" domain
 service-name = name-string
 service-host = name-string
 service-specific = name-string
 service-specifics = service-specific 0*("/" service-specifics)
 spn = service-name ["/" service-host [ "/" service-specifics]]
 name = email / spn</artwork>
            </figure>
          </t>
        </section>
        <section title="GSS_C_NT_USER_NAME" anchor="d1e1030">
          <t>
This name is implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL. A default domain may be appended when importing names of this type.</t>
        </section>
        <section title="GSS_C_NT_HOSTBASED_SERVICE" anchor="d1e1039">
          <t>
This name is transformed by replacing the “@” symbol with a “/”, and then implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.</t>
        </section>
        <section title="GSS_C_NT_DOMAINBASED_SERVICE" anchor="d1e1048">
          <t><xref target="RFC5178"/> domain-based service names are transformed into a GSS_C_NT_BROWSERID_PRINCIPAL as follows:</t>
          <t>
            <list style="symbols">
              <t>
the &lt;service&gt; name becomes the first component of the BrowserID principal name (service-name in ABNF)</t>
              <t>
the &lt;hostname&gt; becomes the second component (service-host)</t>
              <t>
the &lt;domain&gt; name becomes the third component (service-specific)</t>
            </list>
          </t>
        </section>
        <section title="GSS_C_NT_ANONYMOUS" anchor="d1e1074">
          <t>
If the initiator principal's leaf certificate does not contain a “principal” claim, then the initiator name has this name type.</t>
        </section>
      </section>
      <section title="Audience encoding" anchor="sub_Audience_encoding">
        <t>
A GSS-API service name is encoded into a BrowserID audience URL with the following syntax, where spn is defined above:</t>
        <t>
</t>
        <t>
          <figure suppress-title="true" align="center">
            <artwork> audience = "urn:x-gss:" spn</artwork>
          </figure>
        </t>
        <t>
          <cref>
Can we request assignment of a URN?</cref>
        </t>
      </section>
      <section title="Name canonicalization" anchor="d1e1103">
        <t>
The BrowserID GSS-API mechanism performs no name canonicalization. The mechanism's GSS_Canonicalize_name() returns an MN whose display form is the same as the query form. Of course, the principal named obtained from a CREDENTIAL HANDLE may be canonical in that the IdP might only issue credentials for canonical names, but credential acquisition is out of scope here.</t>
      </section>
      <section title="Exported name token format" anchor="d1e1112">
        <t>
The exported name token format for the BrowserID GSS-API mechanism is the same as the query form, plus the standard exported name token format header mandated by the GSS-API <xref target="RFC2743"/>.</t>
        <t>
          <cref>
Do we wish to say anything about the exported composite name token format? It should be an encoding of the initiator's leaf certificate.</cref>
        </t>
      </section>
      <section title="Naming extensions" anchor="d1e1131">
        <t>
The acceptor MAY surface attributes from the assertion and any certificates using GSS_Get_name_attribute() (see <xref target="RFC6680"/>). The URN prefix is "urn:&lt;TBD&gt;:params:gss:jwt". If a SAML assertion is present in the "saml" parameter of the leaf certificate, it may be surfaced using the URN prefix "urn:&lt;TBD&gt;:params:gss:federated-saml-attribute".</t>
        <t>
Attributes from the assertion MUST be marked as unauthenticated unless otherwise validated by the acceptor (e.g. the audience).</t>
        <t>
Attributes from certificates SHOULD be marked as authenticated.</t>
      </section>
    </section>
    <section title="Context tokens" anchor="d1e1152">
      <t>
All context tokens include a two-byte token identifier followed by a backed BrowserID assertion. This document defines the following token IDs:</t>
      <texttable>
        <ttcol align="center">
Section</ttcol>
        <ttcol align="center">
Token ID</ttcol>
        <ttcol align="center">
ASCII</ttcol>
        <ttcol align="center">
Description</ttcol>
        <c>
4.1.1</c>
        <c>
0x632C</c>
        <c>
c,</c>
        <c>
Initiator context token</c>
        <c>
4.1.2</c>
        <c>
0x432C</c>
        <c>
C,</c>
        <c>
Acceptor context token</c>
        <c>
</c>
        <c>
0x442C</c>
        <c>
D,</c>
        <c>
Context deletion token</c>
        <c>
4.2.4</c>
        <c>
0x6D2C</c>
        <c>
m,</c>
        <c>
Initiator metadata token</c>
        <c>
4.2.4</c>
        <c>
0x4D2C</c>
        <c>
M,</c>
        <c>
Acceptor metadata token</c>
      </texttable>
      <t>
The token ID has a human-readable ASCII encoding for the benefit of pure SASL implementations of this mechanism.</t>
      <section title="Base protocol" anchor="d1e1304">
        <section title="Initial context token" anchor="sub_Initial_context_token">
          <t>
The initial context token is framed per Section 1 of <xref target="RFC2743"/>:</t>
          <t>
</t>
          <t>
            <figure suppress-title="true" align="center">
              <artwork> GSS-API DEFINITIONS ::=         
     BEGIN
 
     MechType ::= OBJECT IDENTIFIER
     -- representing BrowserID mechanism
     GSSAPI-Token ::=
     [APPLICATION 0] IMPLICIT SEQUENCE {
         thisMech MechType,
         innerToken ANY DEFINED BY thisMech
             -- token ID and backed assertion
     }
     END</artwork>
            </figure>
          </t>
          <t>
Unlike many other GSS-API mechanisms such as Kerberos, this token framing is not used by subsequent context or <xref target="I-D.zhu-negoex"/> metadata tokens. As such, pure SASL implementations of this mechanism do not need to deal with DER encoding the mechanism object identifier.</t>
          <t>
GSS BrowserID is a family of mechanisms, where the last element in the OID arc indicates the <xref target="RFC4121"/> encryption type supported for message protection services. The OID prefix is 1.3.6.1.4.1.5322.24.1. The NULL encryption type is valid, in which case key confirmation and message protection services are not provided.</t>
          <t>
The innerToken consists of the initiator context token ID concatenated with a backed assertion for the audience corresponding to the target name passed into GSS_Init_sec_context(). In addition, the assertion MAY contain the additional claims, which are described later in this document:</t>
          <t>
            <list style="symbols">
              <t>
ECDH key agreement parameters (see  <xref target="sub_request_ecdh"/>)</t>
              <t>
Channel binding information (see  <xref target="sub_request_cbt"/>)</t>
              <t>
A nonce for binding the request to a response signed with a private key for mutual authentication (see  <xref target="sub_request_nonce"/>)</t>
              <t>
A ticket identifier for fast re-authentication using an established session key rather than a BrowserID certificate (see  <xref target="sub_request_tkt"/>)</t>
            </list>
          </t>
          <t>
The call to GSS_Init_sec_context() returns GSS_C_CONTINUE_NEEDED to indicate that a subsequent context token from the acceptor is expected.</t>
        </section>
        <section title="Acceptor context token" anchor="sub_Acceptor_context_token">
          <t>
Upon receiving a context token from the initiator, the acceptor validates that the token is well formed and contains a valid BrowserID mechanism OID and the initiator context token ID.</t>
          <t>
The acceptor then verifies the backed identity assertion per the BrowserID specification. This includes validating the expiry times, audience, certificate chain, and assertion signature. The acceptor then verifies the channel binding token, if present, and any other GSS-specific claims in the assertion. In case of failure, a response assertion containing GSS major and minor status codes SHOULD be returned.</t>
          <t>
If the <xref target="RFC3961"/> encryption type for the selected mechanism is not ENCTYPE_NULL, the acceptor generates a ECDH public key using the parameters received from the client (see  <xref target="sub_response_ecdh"/>), and from it derives the RP Response Key (RRK) (see  <xref target="sub_kd_RRK"/>). The acceptor then generates a response assertion containing its ECDH public key and context expiration time (note that the context expiration time is a purely informational quantity). The response assertion will be:</t>
          <t>
            <list style="symbols">
              <t>
signed in the acceptor's private key, if mutual authentication was requested, and the acceptor has a key (see <xref target="sub_Extensions_for_mutual"/>);</t>
              <t>
signed in the RRK, if the encryption type for the selected mechanism is not ENCTYPE_NULL;</t>
              <t>
not signed in all other cases.</t>
            </list>
          </t>
          <t>
The response assertion is encoded as a backed assertion, prefixed with the acceptor context token ID. It SHALL have a certificate count of zero.</t>
          <t>
Finally, the Context Root Key (CRK) (see  <xref target="sub_kd_CRK"/>) is derived from the ECDH shared secret (if present) and GSS_S_COMPLETE is returned, along with the initiator name from the verified assertion. If the CRK is available, the replay_det_state (GSS_C_REPLAY_FLAG_, sequence_state (GSS_C_SEQUENCE_FLAG), conf_avail (GSS_C_CONF_FLAG) and integ_avail (GSS_C_INTEG_FLAG) security context flags are set to TRUE.</t>
          <t>
Other assertion/certificate properties MAY be made available via GSS_Get_name_attribute().</t>
        </section>
        <section title="Initiator context completion" anchor="sub_Initiator_context_completion">
          <t>
Upon receiving the acceptor context token, the initiator unpacks the response assertion and, if applicable, computes the ECDH shared secret and RRK. The RRK is used to verify the response assertion unless mutual authentication is available, in which case the acceptor's public key will be used.</t>
          <t>
The initiator sets the context expiry time with that received in the response assertion, if present; otherwise, the context expires when the initiator principal's certificate expires.</t>
          <t>
The CRK is derived from the ECDH shared secret and GSS_S_COMPLETE is returned to indicate the initiator is authenticated and the context is ready for use. No output token is emitted. Security context flags are set as for the acceptor context.</t>
        </section>
      </section>
      <section title="Mutual authentication" anchor="sub_Extensions_for_mutual">
        <t>
Mutual authentication allows the acceptor to be authenticated to the initiator. The mechanism SHALL set the mutual_state security context flag (GSS_C_MUTUAL_FLAG) to TRUE if mutual authentication succeeded. Support for mutual authentication is OPTIONAL.</t>
        <t>
The base protocol is extended as follows to support this:</t>
        <section title="Initiator mutual authentication context token" anchor="d1e1470">
          <t>
If the initiator requested the mutual_state flag, a nonce (see  <xref target="sub_request_nonce"/>) is included in the assertion to bind the initiator and acceptor tokens. The presence of a nonce in a certificate-signed assertion indicates that mutual authentication is desired.</t>
        </section>
        <section title="Acceptor mutual authentication context token" anchor="d1e1482">
          <t>
If the acceptor has a private key and certificate available and received a nonce in the initiator assertion, it signs the response using a private key rather than the RP Response Key (RRK). The response includes the nonce from the initiator's assertion, to bind the two.</t>
          <t>
While the response is a backed assertion, in order to take advantage of existing keying infrastructures BrowserID certificates MUST NOT be included in the backed assertion. Rather, an X.509 certificate SHALL be included as a value for the "x5c" header property in the assertion (see <xref target="I-D.ietf-jose-json-web-signature"/> 4.1.6). The certificate MUST be valid for signing; if it has any EKUs it MUST have either the id-kp-serverAuth <xref target="RFC5280"/> or id-kp-browserIDServerAuth (see  <xref target="sub_OID_Registry"/>) EKU.</t>
          <t>
            <cref>
We don't want to burden the initiator with having to implement both methods of authenticating acceptors, and given that initiators and acceptors both will generally need a PKIX implementation, and given that acceptors will need a PKIX credential for TLS, and that there is as yet no standard protocol for automatic provisioning of BrowserID credentials for servers, using PKIX to authenticate the server seems to be the easiest way to go.</cref>
          </t>
          <t>
            <cref>
We need to resolve how to map host-based service principal names into PKIX terms. The hostname part we know how to handle (e.g., as the dNSName SAN), but the service name seems best expressed as an optional EKU, in which case we may need an EKU mapping of service names, either algorithm, or via an IANA registry. This issue MUST be addresed before publication.</cref>
          </t>
        </section>
        <section title="Initiator mutual authentication context completion" anchor="d1e1515">
          <t>
The initiator verifies the assertion signature and that the nonce matches, and validates the certificate chain. Trust anchors SHOULD be configurable both system-wide and specifically for the BrowserID mechanism.</t>
          <t>
Either the audience URI must be present in the URI subjectAltName, or the host component must be present as a value for the DNS subjectAltName or as the least significant Common Name RDN (if policy requires only the acceptor host name to be authenticated).</t>
        </section>
        <section title="Acceptor certificate advertisement" anchor="sub_NegoEx">
          <t><xref target="I-D.zhu-negoex"/> may be used to advertise acceptor certificates.</t>
          <t>
If the acceptor supports mutual authentication, it MAY include its certificate and any additional certificates inside a backed assertion with an empty payload as output for GSS_Query_meta_data(). The "assertion" is prefixed with the two byte token identifier “M,”.</t>
          <t>
Upon receiving this, the initiator MAY validate the certificate or fingerprint, or present either to the initiator before committing to authenticate.</t>
          <t>
The NegoEx signing key is the output of GSS_Pseudo_random() (see  <xref target="sub_GSS_PRF"/>) with an input of GSS_C_PRF_KEY_FULL and "gss-browserid-negoex-initiator" or "gss-browserid-negoex-acceptor" (without quotes), depending on the party generating the signature.</t>
          <t>
The NegoEx authentication scheme is the binary encoding of the following hexadecimal string:</t>
          <t>
535538008647F5BC624BD8076949F0</t>
          <t>
where the third byte (zero above) is set to the <xref target="RFC3961"/> encryption type for the selected mechanism. The authentication scheme for encryption types greater than 255 is not specified here.</t>
          <t>
There is currently no initiator-sent metadata defined and acceptors should ignore any sent. The metadata is advisory and the initiator is free to ignore it.</t>
          <t>
            <cref>
We should have a way for to suppress this when the initiator is performing re-authentication</cref>
          </t>
        </section>
      </section>
      <section title="Fast re-authentication" anchor="sub_Fast_re_authentication">
        <t>
Fast re-authentication allows a security context to be established using a secret key derived from the initial certificate-signed ECDH key agreement.</t>
        <t>
The re-authentication assertion is signed with a HMAC using the Authenticator Root Key (ARK) (see  <xref target="sub_kd_ARK"/>), rather than a initiator principal's BrowserID certificate.</t>
        <t>
Support for fast re-authentication is OPTIONAL and is indicated by the acceptor returning a ticket in the response assertion.</t>
        <section title="Ticket generation" anchor="d1e1599">
          <t>
If the acceptor supports re-authentication, the following steps are added to  <xref target="sub_Acceptor_context_token"/>:</t>
          <t>
            <list style="numbers">
              <t>
A unique, opaque ticket identifier is generated.</t>
              <t>
The acceptor creates a JSON object containing the ticket identifier and expiry time and returns it in the response to the initiator (see  <xref target="sub_response_tkt"/>).</t>
            </list>
          </t>
          <t>
The acceptor must be able to use the ticket identifier to securely retrieve the subject, issuer, audience, expiry time, ARK and any other relevant properties of the original security context. One implementation choice may be to use the ticket identifier as a key into a dictionary containing this information. Another would be to encrypt this information in a long-term secret only known to the acceptor and encode the resulting ciphertext in the opaque ticket identifier.</t>
          <t>
The ticket expiry time by default SHOULD match the initiator's certificate expiry, however it MAY be configurable so the ticket expires before or after the certificate.</t>
          <t>
The initiator MAY cache tickets, along with the ARK, received from the acceptor in order to re-authenticate to it at a future time.</t>
        </section>
        <section title="Initiator re-authentication context token" anchor="d1e1630">
          <t>
The initiator looks in its ticket cache for an unexpired ticket for the desired acceptor. If none is found, the normal certificate-based authentication flow is performed, otherwise:</t>
          <t>
            <list style="numbers">
              <t>
The initiator generates a re-authentication assertion containing: the name of the acceptor (see  <xref target="sub_request_aud"/>), an expiry time (see  <xref target="sub_request_exp"/>) and/or the current time (see  <xref target="sub_request_iat"/>), optional channel binding information (see  <xref target="sub_request_cbt"/>), a random nonce (see  <xref target="sub_request_nonce"/>), and the ticket identifier (see  <xref target="sub_request_tkt"/>).</t>
              <t>
The initiator signs the re-authentication assertion with the ARK, using the hash algorithm associated with the original context key (see  <xref target="sub_OID_Registry"/>; HS256 is specified for the encryption types referenced in this document).</t>
              <t>
The re-authentication assertion is packed into a backed assertion. The certificate count is zero as the assertion is signed with an established symmetric key.</t>
              <t>
The initiator generates an Authenticator Session Key (ASK) (see  <xref target="sub_kd_ASK"/>) which is used to verify the response and derive the CRK.</t>
            </list>
          </t>
          <t>
            <cref>
Question: do we want an option to do an ECDH session key exchange in the fast re-auth case? If we had a GSS req_flag for requesting perfect forward security (PFS) then we would want to have this option.</cref>
          </t>
        </section>
        <section title="Acceptor re-authentication context token" anchor="d1e1681">
          <t>
            <list style="numbers">
              <t>
The acceptor unpacks the re-authentication assertion and retrieves the ARK, ticket expiry time, mutual authentication state and any other properties (such as the initiator name) associated with the ticket identifier.</t>
              <t>
The acceptor validates that the ticket and re-authentication assertion have not expired.</t>
              <t>
The acceptor verifies the assertion using the ARK.</t>
              <t>
The acceptor generates the ASK (see  <xref target="sub_kd_ASK"/>) and derives the RRK and CRK from this (see  <xref target="sub_kd_RRK"/> and  <xref target="sub_kd_CRK"/>, respectively).</t>
              <t>
The acceptor generates a response and signs and returns it. Note that, unlike the certificate-based mutual authentication case, the nonce need not be echoed back as the ASK (and thus the RRK) is cryptographically bound to the nonce.</t>
            </list>
          </t>
          <t>
If the ticket cannot be found, or the authentication fails, the acceptor SHOULD return a REAUTH_FAILED error, permitting the initiator to recover and fallback to generating a BrowserID assertion. It MAY also include its local timestamp (see  <xref target="sub_response_iat"/>) so that the initiator can perform clock skew compensation.</t>
        </section>
        <section title="Interaction with mutual authentication" anchor="d1e1718">
          <t>
The mutual authentication state of a re-authenticated context is transitive. The initiator MUST NOT set the mutual_state flag for a re-authenticated context unless the original context was mutually authenticated.</t>
          <t>
As such, the initiator's ticket cache must store the mutual authentication state of the original context.</t>
        </section>
        <section title="Ticket renewal" anchor="d1e1730">
          <t>
Normally, re-authentication tickets are only issued when the initiator authenticated with a certificate-signed assertion. Acceptors MAY issue a new ticket with an expiry beyond the ticket lifetime when the initiator used a re-authentication assertion. The issuing of new tickets MUST be subject to a policy that prevents them from being renewed indefinitely.</t>
        </section>
      </section>
      <section title="Extra round-trip (XRT) option" anchor="sub_XRT_option">
        <t>
The extra round-trip (XRT) option adds an additional round trip to the context token exchange. It allows the initiator to prove knowledge of the Context Master Key (CMK) (see  <xref target="sub_kd_CMK"/>) by sending an additional token signed in a key derived from the CMK and an acceptor-issued challenge. Support for the XRT option is OPTIONAL in the acceptor and REQUIRED in the initiator. The initiator is allowed to not request it, but MUST perform XRT if the acceptor requires it.</t>
        <t>
(Note that the term “extra round trip” is something of a misnomer; it only adds an additional token to the context token exchange. It is anticipated however that this mechanism will most commonly be used with pseudo-mechanisms or application protocols that require an even number of tokens.)</t>
        <section title="Initiator XRT advertisement" anchor="d1e1757">
          <t>
The initiator may advertise to the acceptor that it supports the XRT option by sending in its request assertion an “opts” claim (see  <xref target="sub_request_opts"/>) containing the “xrt” value. This option MUST be set if the caller requested GSS_C_DCE_STYLE (see <xref target="RFC4757"/>). Otherwise, the setting of this option is implementation dependent.</t>
        </section>
        <section title="Acceptor XRT advertisement" anchor="d1e1775">
          <t>
If the initiator advertised support for the XRT option and the acceptor also supports or requires this option, the acceptor sends a “jti” claim (see  <xref target="sub_response_jti"/>) in the response assertion, containing a random base 64 URL encoded value. This value MUST be at least 64 bits in length. (This top-level “jti” claim is unrelated to the “nonce” claim or to the “jti” ticket identifier claim.) The acceptor then returns GSS_C_CONTINUE_NEEDED to indicate that an additional context token is expected from the initiator.</t>
        </section>
        <section title="Initiator XRT context token" anchor="d1e1787">
          <t>
If the initiator requested the XRT option and the acceptor indicated support for it by including a “jti” claim in its response, then the initiator sends an additional context token to the acceptor. This token contains the initiator context token ID concatenated with a backed assertion with zero certificates and an empty payload, signed using the XRTK (see  <xref target="sub_kd_XRTK"/>).</t>
        </section>
        <section title="Acceptor XRT context token validation" anchor="d1e1799">
          <t>
The acceptor MUST validate the XRT context token by first validating the context token ID, and then verifying the assertion signature with the XRTK. The acceptor SHOULD reject XRT context tokens with a certificate count greater than zero. Unknown claims in the assertion payload MUST be ignored. The acceptor then returns GSS_C_COMPLETE to the caller.</t>
          <t>
The acceptor MAY avoid using a replay cache when this option is in effect.</t>
        </section>
        <section title="Interaction with message protection services" anchor="d1e1812">
          <t>
When the XRT option is in effect, the XRTK is used instead of the CMK to derive the Context Root Key (CRK) (see  <xref target="sub_kd_CRK"/>). Per-message tokens MUST have the AcceptorSubkey flag set (see <xref target="RFC4121"/> Section 4.2.2).</t>
        </section>
      </section>
    </section>
    <section title="Validation" anchor="d1e1830">
      <section title="Expiry times" anchor="d1e1836">
        <t>
The expiry and, if present, issued-at and not-before times of all elements in a backed assertion, MUST be validated. This applies equally to re-authentication assertions, public key assertions, and the entire certificate chain. If the expiry time is absent, the issued-at time MUST be present, and the JWT implicitly expires a short, implementation-defined interval after the issued-at time. (A suggested interval is five minutes.)</t>
        <t>
The GSS context lifetime SHOULD NOT exceed the lifetime of the initiator principal's certificate.</t>
        <t>
The lifetime of a re-authentication ticket SHOULD NOT exceed the lifetime of the initiator principal's certificate. The acceptor MUST validate the ticket expiry time when performing re-authentication.</t>
        <t>
Message protections services such as GSS_Wrap() SHOULD be available beyond the GSS context lifetime for maximum application compatibility.</t>
      </section>
      <section title="Audience" anchor="d1e1854">
        <t>
If the credential passed to GSS_Accept_sec_context() is not for GSS_C_NO_NAME, then its string representation as a BrowserID principal MUST match the unencoded audience (that is, the audience without the URN prefix defined in  <xref target="sub_Audience_encoding"/>).</t>
      </section>
      <section title="Channel bindings" anchor="d1e1867">
        <t>
GSS-API channel binding is a protected facility for naming an enclosing channel between the initiator and acceptor. If the acceptor passed in channel bindings to GSS_Accept_sec_context(), the assertion MUST contain a matching channel binding claim. (Only the application_data component is validated.)</t>
        <t>
The acceptor SHOULD accept any channel binding provided by the initiator if NULL channel bindings are passed to GSS_Accept_sec_context().</t>
      </section>
      <section title="Key agreement" anchor="d1e1879">
        <t>
The initiator MUST choose an ECDH curve with an equivalent strength to the negotiated <xref target="RFC4121"/> encryption type. Appropriate curves are given in  <xref target="sub_OID_Registry"/>.</t>
        <t>
The curve strength MUST be verified by the acceptor. A stronger than required curve MAY be selected by the initiator.</t>
      </section>
      <section title="Signatures" anchor="d1e1900">
        <t>
Signature validation on assertions is the same as for the web usage of BrowserID, with the addition that response assertions may and re-authentication assertions must be signed with a symmetric key. In this case the HMAC algorithm associated with the mechanism OID is used, and there are no certificates in the backed assertion.</t>
      </section>
      <section title="Replay detection" anchor="sub_Replay_detection">
        <t>
If the XRT option is not in effect, the acceptor SHOULD maintain a cache of received assertions in order to guard against replay attacks.</t>
      </section>
      <section title="Return flags" anchor="d1e1920">
        <t>
The initiator and acceptor should set the returned flags as follows:</t>
        <t>
          <list style="hanging">
            <t hangText="deleg_state">
 never set</t>
            <t hangText="mutual_state">
 set if the initiator requested mutual authentication and mutual authentication succeeded</t>
            <t hangText="replay_det_state">
 set if message protection services are available</t>
            <t hangText="sequence_state">
 set if message protection services are available</t>
            <t hangText="anon_state">
 set if the initiator principal's leaf certificate lacks a “principal” claim</t>
            <t hangText="trans_state">
 set if the implementation supports importing and exporting of security contexts</t>
            <t hangText="prot_ready_state">
 may be set when or after the RP Response Token is produced or consumed</t>
            <t hangText="conf_avail">
 set if message protection services are available</t>
            <t hangText="integ_avail">
 set if message protection services are available</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Assertion claims" anchor="d1e1977">
      <section title="Request (initiator/UA) assertion" anchor="d1e1983">
        <t>
These claims are included in the assertion sent to the acceptor and are authenticated by the initiator's private key and certificate chain (directly, or in the case of re-authentication assertions, transitively). Claims not specified here MUST be ignored by the acceptor.</t>
        <t>
Here is an example assertion containing Elliptic Curve Diffie-Hellman parameters, along with a nonce indicating that mutual authentication is desired:</t>
        <t>
</t>
        <t>
          <figure suppress-title="true" align="center">
            <artwork> { 
     "exp": 1360158396188,
     "ecdh": {
         "crv": "P-256",
         "x": "JR5UPDgMLFPZwOGaKKSF24658tB1DccM1_oHPbCHeZg",
         "y": "S45Esx_6DfE5-xdB3X7sIIJ16MwO0Y_RiDc-i5ZTLQ8"
     },
     "nonce": "GnK2IBA42iQ",
     "aud": "urn:x-gss:imap/mail.example.com"
 }</artwork>
          </figure>
        </t>
        <t>
The following claims are permitted in the request assertion:</t>
        <section title="“aud” (Audience)" anchor="sub_request_aud">
          <t>
The audience, formatted as a URN containing the acceptor's principal name (see  <xref target="sub_Audience_encoding"/>). This claim is REQUIRED.</t>
          <t>
            <cref>
Note that if the initiator application specified a target_name of GSS_C_NO_NAME then we could omit this (although this may not be permitted by the base protocol). If the initiator wanted mutual authentication then we could find out the acceptor's name and provide it via GSS_Inquire_context(). This is only really useful and secure with mechanisms like this one where the initiator credential is based on a public/private key pair and either we use key agreement and per-message tokens or channel binding to a secure channel. This really should [have] be[en] explained in RFC2743.</cref>
          </t>
        </section>
        <section title="“exp” (Expiry time)" anchor="sub_request_exp">
          <t>
This contains the time when the assertion expires, in milliseconds since January 1, 1970. At least one of “exp” or “iat” MUST be present.</t>
        </section>
        <section title="“iat” (Issued at time)" anchor="sub_request_iat">
          <t>
This contains the time the assertion was issued (in milliseconds since January 1, 1970). If present, the acceptor MUST validate that the assertion was recently issued. At least one of “exp” or “iat” MUST be present.</t>
        </section>
        <section title="”nbf” (Not before time)" anchor="sub_request_nbf">
          <t>
This contains the time, in milliseconds sinces January 1, 1970, from which the assertion begins to be valid. This claim is OPTIONAL.</t>
        </section>
        <section title="&quot;ecdh&quot; (Elliptic Curve Diffie-Hellman key agreement)" anchor="sub_request_ecdh">
          <t>
These contain ECDH key parameters for deriving a shared session key with the relying party: "crv" contains the curve, "x" the X coordinate and "y" the Y coordinate (see <xref target="I-D.ietf-oauth-json-web-token"/> Section 5.2).</t>
          <t>
The “ecdh” claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL, or there is already a prior session key (as is the case for re-authentication assertions).</t>
        </section>
        <section title="“cb” (Channel binding)" anchor="sub_request_cbt">
          <t>
This contains channel binding information for binding the GSS context to an outer channel (e.g. see <xref target="RFC5929"/>). Its value is the base64 URL encoding of the application-specific data component of the channel bindings passed to GSS_Init_sec_context() or GSS_Accept_sec_context(). This claim is OPTIONAL.</t>
        </section>
        <section title="&quot;nonce&quot; (Mutual authentication nonce)" anchor="sub_request_nonce">
          <t>
This is a random quantity of at least 64 bits, base 64 URL encoded, which is used to bind the request and response assertions in the case a freshly agreed key is not used to sign the response assertion. This claim is REQUIRED if mutual authentication is desired and the assertion is signed using a certificate, or if re-authentication is being performed.</t>
        </section>
        <section title="“tkt” (Ticket identifier)" anchor="sub_request_tkt">
          <t>
This is an opaque ticket identifier, when the assertion is being used for fast re-authentication. This matches the “jti” value sent back in the response assertion ticket. This claim is REQUIRED for re-authentication assertions, otherwise it the assertion MUST be rejected.</t>
        </section>
        <section title="”opts” (Options)" anchor="sub_request_opts">
          <t>
This contains a JSON array of string values indicating various protocol options that are supported by the initiator. Unknown options MUST be ignored by the acceptor. This document defines the following extensions:</t>
          <texttable>
            <ttcol align="center">
Name</ttcol>
            <ttcol align="center">
Description</ttcol>
            <c>
xrt</c>
            <c>
The initiator supports the extra round trip option (see Section 4.4)</c>
            <c>
dce</c>
            <c>
The initiator requested GSS_C_DCE_STYLE (see 
RFC4757
 Section 7.1)</c>
            <c>
ify</c>
            <c>
The initiator requested GSS_C_IDENTIFY_FLAG (see 
RFC4757
 Section 7.1)</c>
          </texttable>
        </section>
      </section>
      <section title="Response (acceptor/RP) assertion" anchor="d1e2191">
        <t>
The response assertion is sent from the acceptor to the initiator to provide key agreement, and either key confirmation or mutual authentication. It is formatted as a backed assertion, however in the current specification it consists of a single assertion with zero certificates; that is, it is "unbacked". (It is encoded as a backed assertion in order to provide future support for mutual authentication using native BrowserID certificates. Such support is not specified here; implementations of this version of the specification SHOULD reject response assertions with BrowserID certificates.)</t>
        <t>
In the case of a key successfully being negotiated, the response assertion is signed with the RP Response Key (RRK) (see  <xref target="sub_kd_RRK"/>). Alternatively, it may be signed with the acceptor's private RSA or DSA key. In this case, the acceptor's X.509 certificate is included in the "x5c" property of the JWT header.</t>
        <t>
The HMAC-SHA256 (HS256) algorithm MUST be supported by implementors of this specification.</t>
        <t>
If a key is unavailable, then the signature is absent and the value of the "alg" header claim is "none". No signature verification is required in this case, however the initiator MUST then return an error unless the <xref target="RFC3961"/> encryption type for the mechanism is ENCTYPE_NULL.</t>
        <t>
Claims not specified here MUST be ignored by the initiator.</t>
        <t>
Here is an example response assertion:</t>
        <t>
</t>
        <t>
          <figure suppress-title="true" align="center">
            <artwork>{
    "exp": 1362960258000,
    "nonce": "bbqT10Gyx3s",
    "ecdh": {
        "x": "bvNF6V1rpMeQyGOKCj0kBaOaSh3tlhUcbffaji4uCEI",
        "y": "Iuqs650FXzXFUD9kHknETfbqiB8XBbCHlJXoysx3rvw"
    },
    "tkt": {
        "jti": "Jgg7vKX2sEKlCWBfmLTg_n4qz3NVZxOU-a2B4qYMkXI",
        "exp": 1362992660000
    }
}</artwork>
          </figure>
        </t>
        <t>
The following claims are permitted in the response assertion:</t>
        <section title="“iat” (Issued at time)" anchor="sub_response_iat">
          <t>
The current acceptor time, in milliseconds since January 1, 1970. This allows the initiator to compensate for clock differences when generating assertions. This claim is OPTIONAL.</t>
        </section>
        <section title="“ecdh” (Elliptic Curve Diffie-Hellman key agreement)" anchor="sub_response_ecdh">
          <t>
This contains a JSON object containing the coordinates of the acceptor's ECDH public key: "x" contains the X coordinate and "y" the Y coordinate (see <xref target="I-D.ietf-oauth-json-web-token"/> Section 5.2). This claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL, or there is already an established session key, as is the case for re-authentication assertions.</t>
          <t>
The “crv” property MUST NOT be present; it is determined by the initiator.</t>
        </section>
        <section title="“exp” (Expiry time)" anchor="sub_response_exp">
          <t>
This contains the time when the context expires, in milliseconds since January 1, 1970. This claim is OPTIONAL; the initiator should use the certificate or ticket expiry time if absent.</t>
        </section>
        <section title="“nonce” (Mutual authentication nonce)" anchor="sub_response_nonce">
          <t>
The nonce as received from the initiator. This MUST NOT be present unless a nonce was received from the initiator, and the acceptor is signing the assertion with a private key.</t>
        </section>
        <section title="“tkt” (Ticket)" anchor="sub_response_tkt">
          <t>
This contains a JSON object that may be used for re-authenticating to the acceptor without acquiring an assertion. Its usage is optional. It has two properties: “jti”, an opaque identifier to be presented in a re-authentication assertion; and “exp”, the expiry time of the ticket. This claim is OPTIONAL.</t>
        </section>
        <section title="”jti” (JWT ID)" anchor="sub_response_jti">
          <t>
This contains a base64 URL encoded random value of at least 64 bits that is used to uniquely identify the acceptor response, in the case that the extra round trip option is used. It SHOULD not be present unless the initiator requested the extra round trip option.</t>
        </section>
      </section>
      <section title="Error (acceptor/RP) assertion" anchor="d1e2310">
        <t>
Error assertions are backed assertions containing any or all of the following claims. In addition, they MUST have the “iat” claim, for initiator clock skew correction. All other response assertion claims are OPTIONAL or not applicable in error assertions. Conversely, the claims listed below MUST NOT be present in a non-error response assertion.</t>
        <section title="“gss-maj” (GSS major status code)" anchor="sub_response_gss_maj">
          <t>
This contains a GSS major status code represented as a number.</t>
        </section>
        <section title="“gss-min” (GSS minor status code)" anchor="sub_response_gss_min">
          <t>
This contains a GSS minor status code represented as a number.</t>
          <t>
If REAUTH_FAILED is received, the initiator SHOULD attempt to send another initial context token containing a fresh assertion.</t>
          <t>
The following protocol minor status codes are defined. Note that the API representation of these status codes is implementation dependent. Status codes with the high bit set are GSS BrowserID protocol errors; the remainder are BrowserID protocol errors.</t>
          <texttable>
            <ttcol align="center">
Error</ttcol>
            <ttcol align="center">
Protocol</ttcol>
            <ttcol align="center">
Description</ttcol>
            <c>
INVALID_JSON</c>
            <c>
8</c>
            <c>
Invalid JSON encoding</c>
            <c>
INVALID_BASE64</c>
            <c>
9</c>
            <c>
Invalid Base64 encoding</c>
            <c>
INVALID_ASSERTION</c>
            <c>
10</c>
            <c>
Invalid assertion</c>
            <c>
TOO_MANY_CERTS</c>
            <c>
13</c>
            <c>
Too many certificates</c>
            <c>
UNTRUSTED_ISSUER</c>
            <c>
14</c>
            <c>
Untrusted issuer</c>
            <c>
INVALID_ISSUER</c>
            <c>
15</c>
            <c>
Invalid issuer</c>
            <c>
MISSING_ISSUER</c>
            <c>
16</c>
            <c>
Missing issuer</c>
            <c>
MISSING_AUDIENCE</c>
            <c>
17</c>
            <c>
Missing audience</c>
            <c>
BAD_AUDIENCE</c>
            <c>
18</c>
            <c>
Bad audience</c>
            <c>
EXPIRED_ASSERTION</c>
            <c>
19</c>
            <c>
Assertion expired</c>
            <c>
ASSERTION_NOT_YET_VALID</c>
            <c>
20</c>
            <c>
Assertion not yet valid</c>
            <c>
EXPIRED_CERT</c>
            <c>
21</c>
            <c>
Certificate expired</c>
            <c>
CERT_NOT_YET_VALID</c>
            <c>
22</c>
            <c>
Certificate not yet valid</c>
            <c>
INVALID_SIGNATURE</c>
            <c>
23</c>
            <c>
Invalid signature</c>
            <c>
MISSING_ALGORITHM</c>
            <c>
24</c>
            <c>
Missing JWS algorithm</c>
            <c>
UNKNOWN_ALGORITHM</c>
            <c>
25</c>
            <c>
Unknown JWS algorithm</c>
            <c>
MISSING_PRINCIPAL</c>
            <c>
34</c>
            <c>
Missing principal attribute</c>
            <c>
UNKNOWN_PRINCIPAL_TYPE</c>
            <c>
35</c>
            <c>
Unknown principal type</c>
            <c>
MISSING_CERT</c>
            <c>
36</c>
            <c>
Missing certificate</c>
            <c>
MISSING_CHANNEL_BINDINGS</c>
            <c>
38</c>
            <c>
Missing channel bindings</c>
            <c>
CHANNEL_BINDINGS_MISMATCH</c>
            <c>
39</c>
            <c>
Channel bindings do not match</c>
            <c>
NOT_REAUTH_ASSERTION</c>
            <c>
70</c>
            <c>
Not a re-authentication assertion</c>
            <c>
BAD_SUBJECT</c>
            <c>
71</c>
            <c>
Bad subject name</c>
            <c>
MISMATCHED_RP_RESPONSE</c>
            <c>
72</c>
            <c>
Mismatched RP response token</c>
            <c>
REFLECTED_RP_RESPOSNE</c>
            <c>
73</c>
            <c>
Reflected RP response token</c>
            <c>
UNKNOWN_EC_CURVE</c>
            <c>
77</c>
            <c>
Unknown ECC curve</c>
            <c>
INVALID_EC_CURVE</c>
            <c>
78</c>
            <c>
Invalid ECC curve</c>
            <c>
MISSING_NONCE</c>
            <c>
79</c>
            <c>
Missing nonce</c>
            <c>
WRONG_SIZE</c>
            <c>
0x80000001</c>
            <c>
Buffer is incorrect size</c>
            <c>
WRONG_MECH</c>
            <c>
0x80000002</c>
            <c>
Mechanism OID is incorrect</c>
            <c>
BAD_TOK_HEADER</c>
            <c>
0x80000003</c>
            <c>
Token header is malformed or corrupt</c>
            <c>
TOK_TRUNC</c>
            <c>
0x80000004</c>
            <c>
Token is missing data</c>
            <c>
BAD_DIRECTION</c>
            <c>
0x80000005</c>
            <c>
Packet was replayed in wrong direction</c>
            <c>
WRONG_TOK_ID</c>
            <c>
0x80000006</c>
            <c>
Received token ID does not match expected</c>
            <c>
KEY_UNAVAILABLE</c>
            <c>
0x80000007</c>
            <c>
Key unavailable</c>
            <c>
KEY_TOO_SHORT</c>
            <c>
0x80000008</c>
            <c>
Key too weak</c>
            <c>
CONTEXT_ESTABLISHED</c>
            <c>
0x80000009</c>
            <c>
Context already established</c>
            <c>
CONTEXT_INCOMPLETE</c>
            <c>
0x8000000A</c>
            <c>
Context incomplete</c>
            <c>
BAD_CONTEXT_TOKEN</c>
            <c>
0x8000000B</c>
            <c>
Context token malformed or corrupt</c>
            <c>
BAD_ERROR_TOKEN</c>
            <c>
0x8000000C</c>
            <c>
Error token malformed or corrupt</c>
            <c>
BAD_CONTEXT_OPTION</c>
            <c>
0x8000000D</c>
            <c>
Bad context option</c>
            <c>
REAUTH_FAILED</c>
            <c>
0x8000000E</c>
            <c>
Re-authentication failured</c>
          </texttable>
        </section>
      </section>
      <section title="XRT assertion" anchor="d1e3045">
        <t>
No claims are presently defined for the extra round trip assertion. Unknown claims MUST be ignored by the acceptor.</t>
      </section>
    </section>
    <section title="Key derivation" anchor="d1e3054">
      <t>
The following function is used as the base algorithm for deriving keys:</t>
      <t>
browserid-derive-key(K, usage) = HMAC(K, "BrowserID" || K || usage || 0x01)</t>
      <t>
The HMAC hash algorithm for all currently specified key lengths is SHA-256. Note that the inclusion of K in the HMAC input is for interoperability with some crypto implementations.</t>
      <section title="Diffie-Hellman Key (DHK)" anchor="sub_kd_DHK">
        <t>
This key is the shared secret resulting from the ECDH exchange. Its length corresponds to the selected EC curve. It is never used without derivation and thus may be used with implementations that do not expose the ECDH value directly.</t>
      </section>
      <section title="Context Master Key (CMK)" anchor="sub_kd_CMK">
        <t>
This is the Diffie-Hellman Key (DHK) for all initially authenticated contexts and the Authenticator Session Key (ASK) for re-authenticated contexts.</t>
      </section>
      <section title="RP Response Key (RRK)" anchor="sub_kd_RRK">
        <t>
If mutual authentication without a fast re-authentication ticket is perfomed then the response assertion will be signed with a public key signature using the private key for the acceptor's certificate.</t>
        <t>
Otherwise a symmetric RP Response Key (RRK) is derived as follows:</t>
        <t>
RRK = browserid-derive-key(CMK, "RRK")</t>
      </section>
      <section title="Context Root Key (CRK)" anchor="sub_kd_CRK">
        <t>
The Context Root Key (CRK) is used for <xref target="RFC4121"/> message protection services, e.g. GSS_Wrap() and GSS_Get_MIC(). If the extra round-trip option is in effect, it is derived as follows:</t>
        <t>
CRK = random-to-key(browserid-derive-key(XRTK, "CRK"))</t>
        <t>
Otherwise, the CMK is used:</t>
        <t>
CRK = random-to-key(browserid-derive-key(CMK, “CRK”))</t>
        <t>
The random-to-key function is defined in <xref target="RFC3961"/>.</t>
      </section>
      <section title="Authenticator Root Key (ARK)" anchor="sub_kd_ARK">
        <t>
The Authenticator Root Key (ARK) is used to sign assertions used for fast re-authentication. (The term “authenticator” is equivalent to “re-authentication assertion” and exists for historical reasons.) It is derived as follows:</t>
        <t>
ARK = browserid-derive-key(CMK, "ARK")</t>
      </section>
      <section title="Authenticator Session Key (ASK)" anchor="sub_kd_ASK">
        <t>
The Authenticator Session Key (ASK) is used instead of the DHK for re-authenticated contexts. It is derived as follows:</t>
        <t>
ASK = browserid-derive-key(ARK, nonce-binary)</t>
        <t>
The usage (nonce-binary) is the base64 URL decoding of the initiator “nonce” claim.</t>
        <section title="Extra Round Trip Key (XRTK)" anchor="sub_kd_XRTK">
          <t>
The Extra Round Trip Key (XRTK) is used to sign the extra round trip token, and also as the master key for the CRK when the extra round trip option is used.</t>
          <t>
XRTK = browserid-derive-key(CMK, acceptor-jti-binary)</t>
          <t>
The usage (acceptor-jti-binary) is the base64 URL decoding of the acceptor “jwt” claim.</t>
        </section>
      </section>
      <section title="GSS Pseudo-Random Function (PRF)" anchor="sub_GSS_PRF">
        <t>
The BrowserID mechanism shares the same Pseudo-Random Function (PRF) as the Kerberos GSS mechanism, defined in <xref target="RFC4402"/>. GSS_C_PRF_KEY_FULL and GSS_C_PRF_KEY_PARTIAL are equivalent. The protocol key to be used for GSS_Pseudo_random() SHALL by the Context Root Key (CRK).</t>
        <t>
          <cref>
Can we replace this with a function that imports less of RFC3962? We arguably should, because otherwise the only things we import from RFC3962 (and 3961) are random-to-key (the identity function in RFC3962) and the crypto bits needed for RFC4121 per-message tokens.</cref>
        </t>
      </section>
    </section>
    <section title="Example" anchor="d1e3214">
      <t>
Suppose a mail user agent for the principal lukeh@lukktone.com wishes to authenticate to an IMAP server rand.mit.de.padl.com. They do not have a re-authentication ticket. The mail user agent would display a dialog box in which the principal would sign in to their IdP and request a fresh assertion be generated.</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>C: &lt;connects to IMAP port&gt;
S: * OK
C: C1 CAPABILITY
S: * CAPABILITY IMAP4rev1 SASL-IR SORT [...] AUTH=BROWSERID-AES128
S: C1 OK Capability Completed
C: C2 AUTHENTICATE BROWSERID-AES128
   biwsYyxleUpoYkdjaU9pSlNVekkxTmlKOS5leUp3ZFdKc2FXTXRhMlY
   1SWpwN0ltRnNaMjl5YVhSb2JTSTZJa1JUSWl3aWVTSTZJak01TVRObE
   9EZ3laRGhqTXpWa01qSm1ObVEwTURZNVkyVTJNREJrWW1OallqTTVOR
   0ZqWVdGaFl6WTBPV1prTjJZNVptTmtObU0wTVRJME5tWTFOakk1TUdW
   bU1HTmpNemMwTnpaaE1EUmhOREU0WXpGbE9ETXhPV0kxTkdJeFpXTml
   ObVkyWTJWaE56VTBOR1kyWlRFMU5qTmxaR05sWkdNNU1EWmtOamcwTT
   JRd01XSmpaVFJtTjJFMVpqY3dOMk5tWVRZd1lXTTVNVE0yWm1GbU5qS
   m1aR0ZtTkRoa09HRTVPRGxoWVdGbE5EUXdOMlZrTmpjeU56ZGhNVGM0
   TW1WallXRXhOVFppWkdOaFpXRXhOamRtTWpZek56STFaR1UyTTJWa09
   HWXlPR0UyTUROaU5tWm1OVEV3WmpRNE1ESmtOelJrTjJWaFpUZGhZbU
   15WldJaUxDSndJam9pWm1ZMk1EQTBPRE5rWWpaaFltWmpOV0kwTldWa
   FlqYzROVGswWWpNMU16TmtOVFV3WkRsbU1XSm1NbUU1T1RKaE4yRTRa
   R0ZoTm1Sak16Um1PREEwTldGa05HVTJaVEJqTkRJNVpETXpOR1ZsWld
   GaFpXWmtOMlV5TTJRME9ERXdZbVV3TUdVMFkyTXhORGt5WTJKaE16ST
   FZbUU0TVdabU1tUTFZVFZpTXpBMVlUaGtNVGRsWWpOaVpqUmhNRFpoT
   XpRNVpETTVNbVV3TUdRek1qazNORFJoTlRFM09UTTRNRE0wTkdVNE1t
   RXhPR00wTnprek16UXpPR1k0T1RGbE1qSmhaV1ZtT0RFeVpEWTVZemh
   tTnpWbE16STJZMkkzTUdWaE1EQXdZek5tTnpjMlpHWmtZbVEyTURRMk
   16aGpNbVZtTnpFM1ptTXlObVF3TW1VeE55SXNJbkVpT2lKbE1qRmxNR
   FJtT1RFeFpERmxaRGM1T1RFd01EaGxZMkZoWWpOaVpqYzNOVGs0TkRN
   d09XTXpJaXdpWnlJNkltTTFNbUUwWVRCbVpqTmlOMlUyTVdaa1pqRTR
   OamRqWlRnME1UTTRNelk1WVRZeE5UUm1OR0ZtWVRreU9UWTJaVE5qT0
   RJM1pUSTFZMlpoTm1ObU5UQTRZamt3WlRWa1pUUXhPV1V4TXpNM1pUQ
   TNZVEpsT1dVeVlUTmpaRFZrWldFM01EUmtNVGMxWmpobFltWTJZV1l6
   T1Rka05qbGxNVEV3WWprMllXWmlNVGRqTjJFd016STFPVE15T1dVME9
   ESTVZakJrTUROaVltTTNPRGsyWWpFMVlqUmhaR1UxTTJVeE16QTROVG
   hqWXpNMFpEazJNalk1WVdFNE9UQTBNV1kwTURreE16WmpOekkwTW1Fe
   k9EZzVOV001WkRWaVkyTmhaRFJtTXpnNVlXWXhaRGRoTkdKa01UTTVP
   R0prTURjeVpHWm1ZVGc1TmpJek16TTVOMkVpZlN3aWNISnBibU5wY0d
   Gc0lqcDdJbVZ0WVdsc0lqb2liSFZyWldoQWJIVnJhM1J2Ym1VdVkyOX
   RJbjBzSW1saGRDSTZNVE0yTWprMk1UQTVOakV5TWl3aVpYaHdJam94T
   XpZeU9UWTBOamsyTVRJeUxDSnBjM01pT2lKc2IyZHBiaTV3WlhKemIy
   NWhMbTl5WnlKOS5mT3V5ZlZkNWFZZ285ckJncmdHVDJHYjkzUUoxVnp
   LSE9rNjdFUXBEeU9pUENPdXFweUw5a2tVVDdxcGNZaWZsb0NTWjlPej
   UtVWRrcldlcTZXUkRLcUdOeXg0OFdyVGduVkoyRlM3MU1Mbl9DeWhGM
   Go1Y1ZsQ0E5WWh3YVlWTHhsbW9YU01uWTdyRzFWa0VSdjRtaWtCM3FD
   cFB2NXJtSEswbkNiRlpiN1dXR3JkVEdkcmNHTkRkZHlDQkQ5a1dpUUd
   VbkktenN3WXdiZXJUTmQ3Nmc1Z2N1c1MtbWxjVk5jbzNMTG4zMlNhbG
   x0eDBCUHAtVTAyMXpvR00wWEhibm1Sa2VRdGVtblVXZGloYzRVbVpNR
   EJJZ05nSFFCSmdXMGhBcTlHWVFmYzVObFNzZW5RX0p5MGR4anE1bHdE
   Wll3SExsUXlmYnVYbGFtRTNDZ3ZkZUF+ZXlKaGJHY2lPaUpFVXpFeU9
   DSjkuZXlKdWIyNWpaU0k2SW1nMVVEUkxja2M0ZVc1bklpd2laV05rYU
   NJNmV5SjRJam9pWm1wYVRuQnpRbXBIYmw5WVFVTnRaMkpPZDBGemRuS
   TRPR2MwUmxkNmRHOWljWEExVkUxaVgxbEdNQ0lzSW1OeWRpSTZJbEF0
   TWpVMklpd2llU0k2SWxKTFJYWktlalU1WTNOaGRqaExZM2RsVlhZMVd
   IRkdaM1E0UVZkRFFXdHlTa0o2TTFCUWNVeEtkSE1pZlN3aVkySjBJam
   9pWW1sM2N5SXNJbVY0Y0NJNk1UTTJNamsyTVRJeE5qRTBPU3dpWVhWa
   0lqb2lkWEp1T25ndFozTnpPbWx0WVhBdmNtRnVaQzV0YVhRdVpHVXVj
   R0ZrYkM1amIyMGlmUS51ZHRvSTNVNUMtM3BwNHhJSloxbWstQ3o0Ymh
   sQkxlSzAyNlVhbWRhMjhwTFk4c013Tk50Y0E=
S: + Qyx
   +ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbmcxWXlJNld5Sk5TVWxFZW1wRF
   EwRnlZV2RCZDBsQ1FXZEpRa0o2UVU1Q1oydHhhR3RwUnpsM01FSkJVV
   lZHUVVSQ1pFMVJjM2REVVZsRVZsRlJSMFYzU2tKV1ZFVmxUVUozUjBF
   eFZVVkRaM2RXVlVWR1JWUkRRbFJpTWxvd1pESkdlVnBUUWxGa1NHdG5
   WRWhTYTAxVE5IZE1RVmxFVmxGUlJFUkRWbEZSVlZKTlNVWk9kbHB1VW
   pOWldFcHNTVVZPYkdOdVVuQmFiV3hxV1ZoU2NHSXlOR2RSV0ZZd1lVY
   zVlV0ZZVWpWTlFqUllSRlJGZWsxRVJYaE5WRUV4VFhwUmVVMUdiMWhF
   VkVVeVRVUkZlRTFVUVRGTmVsRjVUVVp2ZDFSRVJVeE5RV3RIUVRGVlJ
   VSm9UVU5SVmxWNFNHcEJZMEpuVGxaQ1FXOU5SbFpDUWxKRmQyZFZNam
   x0WkVoa2FHTnRWV2RWU0ZJMVNVVjRNRnBFUldSTlFuTkhRVEZWUlVGM
   2QxVmpiVVoxV2tNMWRHRllVWFZhUjFWMVkwZEdhMkpETldwaU1qQjNa
   MmRGYVUxQk1FZERVM0ZIVTBsaU0wUlJSVUpCVVZWQlFUUkpRa1IzUVh
   kblowVkxRVzlKUWtGUlJFSm9la1p3Wmt3MmRraDRjM2d5UkhaR1dsQX
   JSMUl3Vlc5dFJIQXZRMFZsSzA5SVRqQmFNR00yT1RGWlp6bG5WMWh0V
   lROdVVIRldWR0pCU1hGWVNEaEJWWFIyWmpkTmVtSlpNamh2Vm14d1ds
   UXdOWHB0TW1NdmRFVXpaMnRvVkhodFdFOVNaMUZ5WTNWMVozVnFUMWh
   OUm1oSk5ITjJSVm9yUTJKSVVHeGFhVm92VkhwcldFeElVREk1UlhvM2
   QwNWFiakZJTlRkQlRIRnRVMEZ2TlZRMGNYaE5SbWRDV1hWa2R5OWFlR
   kJTZWtSMFZXOUpWakJ6TWpOWlp6UjRWRGxoZDBwdWNqRkhaMDFWVW1s
   aVZVSnFSamQ1WW1OdE1FczRjMHBVSzFWSFpVSTNjbTFNYkZCM0syWkJ
   hMDltTjFwcVdqbDBjRlJyUlUxcE9IVk1SVTF4WTNoaFIxTkJTeThyYT
   FjM05YRlBlR1JCUmtrNGVsbGFXRFV6WjNCbk5HMXBLMUZYWmtkWk1Wc
   E9VVXBOZFVoSFVWaG5MM1ZtZUUxNllYaE9UalJvTVdGUGJHMWFXbGxy
   UWtod05USkJPWGxKVFZWaVFXZE5Ra0ZCUjJwbllXdDNaMkZaZDBOUld
   VUldVakJVUWtGSmQwRkVRWE5DWjJ4bmFHdG5RbWgyYUVOQlVUQkZTSG
   haWkZRelFteGliRTVVVkVOQ1NGcFhOV3hqYlVZd1dsZFJaMUV5Vm5sa
   1IyeHRZVmRPYUdSSFZYZElVVmxFVmxJd1QwSkNXVVZHUzFOemRXSkZS
   SFZpVWtsSFNFTkNkSFJCYkZSMk1rWlhSMllyVFVJNFIwRXhWV1JKZDF
   GWlRVSmhRVVpNYVhwYWJFMVhia3RMTVZCWllXZGtTbXByVm5WU2FFVl
   JTbXBOUVd0SFFURlZaRVZSVVVOTlFVRjNRM2RaUkZaU01GQkNRVkZFU
   VdkWVowMUNUVWRCTVZWa1NsRlJUVTFCYjBkRFEzTkhRVkZWUmtKM1RV
   Uk5RVEJIUTFOeFIxTkpZak5FVVVWQ1FsRlZRVUUwU1VKQlVVSkVNVUo
   2VVZBcmNrNHhWVlY2TjBFMmVpdExSRkJoY1Roek1tbENSekJHZWxwNG
   MxZ3lVVlZQZFhCQ1JVbGlkVnB3TUV0S1lYVnFWazFuTURGbVpHcHpkV
   WRITUhWWVlrMW1aVkpIZVU1c1ZYTk5UaXRhUkhrNEwwMUpUMmd4WVZW
   SGRqQlRWWGRMZEVOMFRIUlhja3AyTmpWMWQwaEhSM1ExZFVaTGVFMUZ
   OakZXVkRRcmNYQkpNa0ZIY1hoNE5XUnljM2hGVEVKUFpIbFFibVYxUV
   dsTVVIaEdkV0pTUm0xNmRXaFdVMGszUVZCTmJEYzVUMnN6TUc5WGRXU
   kJORGxzVlZnNWQzb3paemx4T1haa2JEbDVhR2RsWlZWVFZYQk5hR3hh
   TWpSVll6bFFkVXg2Y2pFMWFqWjJOak5ZZW5KVFpGZDBUbnAyTUVZeE1
   HVkViRFI1VkZWT1YxTkthRGR4UW1obmNURkpiMWc1UVZCUFQzVk1Zaz
   FPY25BMlltVkZaVzkzYURNMGNGWlhabFJoVTNoSk4yNUxOVGRyU3pKN
   GFGSlZORE5sZDFscU1ta3ZVM0o2T0VkelRWTTVNWFZ5TWpWSmRDSmRm
   US5leUowYTNRaU9uc2lhblJwSWpvaVlXVmhlVEJIU21sNlJIZzNPVUZ
   uTFMxWFRDMTJkelpaT1VKWWVGSjFRekZZYzFwNGNuazFNVk5WU1NJc0
   ltVjRjQ0k2TVRNMk1qazVOekE1T0RBd01IMHNJbVZqWkdnaU9uc2llQ
   0k2SWtveFNWZGlTREpCTlVNelkyaFBWVWx4YldaWWNGQmZVbEZGUlU5
   dFpESkZlRmh2UzNKeFVWRllURTBpTENKNUlqb2lYekpGZEhoaWVsOTJ
   TbVZsVlZWaWVUSnlabVJsYTFSVVVGVlNjR0pIU2tnM2EzbEpWM0Z0YT
   BsRlp5SjlMQ0p1YjI1alpTSTZJbWcxVURSTGNrYzRlVzVuSWl3aVpYa
   HdJam94TXpZeU9UWTBOamsyTURBd2ZRLnFaaFVxdXBWUHgzRTdNSTBH
   dnNIZjZER3pzc3ByMkJsdUVUMFNwMERxdkpFS1F4S3BiOG9faVZsWHZ
   Qa2p2SXp0Qm5JajNNb084UlZMUWJwdE9QZDFrN3FoTUVwRkhOVGI1WF
   pKYWVJTlBpQUNSSzA5dUZpVE5ud1cxanMxQ3pPY2FMakxsSTN4bFdkL
   Ul1em8zODhyTUxsSXVkbmkxak5uRS0yOXZfc1NUTnRxLUMwQmNoNUMw
   T3drbDcxQk54eHgzaFVxeEcxT0w0UHQyZ0JKWUFQX3NOVk12aDFwWDl
   hRzd0Vms0S2sxS2NjaXRqUFdGN0dXc3JGeld4ekRSMHU2REZ0RmFjaE
   NPYmVmcmZnZkUxOXFlWnJLcnpJMFVkQ3JEUHpZazlYb1dKR2twRlNPd
   1dhY192Q0N1dXY1VjNHZF9MTlNJM3JCaS1GYWVoWUhBRjFJUQ==</artwork>
        </figure>
      </t>
      <t>
Unpacking the mail user agent's AUTHENTICATE message reveals the following:</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>n,,c,eyJhbGciOiJSUzI1NiJ9.eyJwdWJsaWMta2V5Ijp7ImFsZ29yaXRob
SI6IkRTIiwieSI6IjM5MTNlODgyZDhjMzVkMjJmNmQ0MDY5Y2U2MDBkYmNj
YjM5NGFjYWFhYzY0OWZkN2Y5ZmNkNmM0MTI0NmY1NjI5MGVmMGNjMzc0NzZ
hMDRhNDE4YzFlODMxOWI1NGIxZWNiNmY2Y2VhNzU0NGY2ZTE1NjNlZGNlZG
M5MDZkNjg0M2QwMWJjZTRmN2E1ZjcwN2NmYTYwYWM5MTM2ZmFmNjJmZGFmN
DhkOGE5ODlhYWFlNDQwN2VkNjcyNzdhMTc4MmVjYWExNTZiZGNhZWExNjdm
MjYzNzI1ZGU2M2VkOGYyOGE2MDNiNmZmNTEwZjQ4MDJkNzRkN2VhZTdhYmM
yZWIiLCJwIjoiZmY2MDA0ODNkYjZhYmZjNWI0NWVhYjc4NTk0YjM1MzNkNT
UwZDlmMWJmMmE5OTJhN2E4ZGFhNmRjMzRmODA0NWFkNGU2ZTBjNDI5ZDMzN
GVlZWFhZWZkN2UyM2Q0ODEwYmUwMGU0Y2MxNDkyY2JhMzI1YmE4MWZmMmQ1
YTViMzA1YThkMTdlYjNiZjRhMDZhMzQ5ZDM5MmUwMGQzMjk3NDRhNTE3OTM
4MDM0NGU4MmExOGM0NzkzMzQzOGY4OTFlMjJhZWVmODEyZDY5YzhmNzVlMz
I2Y2I3MGVhMDAwYzNmNzc2ZGZkYmQ2MDQ2MzhjMmVmNzE3ZmMyNmQwMmUxN
yIsInEiOiJlMjFlMDRmOTExZDFlZDc5OTEwMDhlY2FhYjNiZjc3NTk4NDMw
OWMzIiwiZyI6ImM1MmE0YTBmZjNiN2U2MWZkZjE4NjdjZTg0MTM4MzY5YTY
xNTRmNGFmYTkyOTY2ZTNjODI3ZTI1Y2ZhNmNmNTA4YjkwZTVkZTQxOWUxMz
M3ZTA3YTJlOWUyYTNjZDVkZWE3MDRkMTc1ZjhlYmY2YWYzOTdkNjllMTEwY
jk2YWZiMTdjN2EwMzI1OTMyOWU0ODI5YjBkMDNiYmM3ODk2YjE1YjRhZGU1
M2UxMzA4NThjYzM0ZDk2MjY5YWE4OTA0MWY0MDkxMzZjNzI0MmEzODg5NWM
5ZDViY2NhZDRmMzg5YWYxZDdhNGJkMTM5OGJkMDcyZGZmYTg5NjIzMzM5N2
EifSwicHJpbmNpcGFsIjp7ImVtYWlsIjoibHVrZWhAbHVra3RvbmUuY29tI
n0sImlhdCI6MTM2Mjk2MTA5NjEyMiwiZXhwIjoxMzYyOTY0Njk2MTIyLCJp
c3MiOiJsb2dpbi5wZXJzb25hLm9yZyJ9.fOuyfVd5aYgo9rBgrgGT2Gb93Q
J1VzKHOk67EQpDyOiPCOuqpyL9kkUT7qpcYifloCSZ9Oz5-UdkrWeq6WRDK
qGNyx48WrTgnVJ2FS71MLn_CyhF0j5cVlCA9YhwaYVLxlmoXSMnY7rG1VkE
Rv4mikB3qCpPv5rmHK0nCbFZb7WWGrdTGdrcGNDddyCBD9kWiQGUnI-zswY
wberTNd76g5gcusS-mlcVNco3LLn32Salltx0BPp-U021zoGM0XHbnmRkeQ
temnUWdihc4UmZMDBIgNgHQBJgW0hAq9GYQfc5NlSsenQ_Jy0dxjq5lwDZY
wHLlQyfbuXlamE3CgvdeA~eyJhbGciOiJEUzEyOCJ9.eyJub25jZSI6Img1
UDRLckc4eW5nIiwiZWNkaCI6eyJ4IjoiZmpaTnBzQmpHbl9YQUNtZ2JOd0F
zdnI4OGc0Rld6dG9icXA1VE1iX1lGMCIsImNydiI6IlAtMjU2IiwieSI6Il
JLRXZKejU5Y3NhdjhLY3dlVXY1WHFGZ3Q4QVdDQWtySkJ6M1BQcUxKdHMif
SwiY2J0IjoiYml3cyIsImV4cCI6MTM2Mjk2MTIxNjE0OSwiYXVkIjoidXJu
OngtZ3NzOmltYXAvcmFuZC5taXQuZGUucGFkbC5jb20ifQ.udtoI3U5C-3p
p4xIJZ1mk-Cz4bhlBLeK026Uamda28pLY8sMwNNtcA</artwork>
        </figure>
      </t>
      <t>
The initial “n,,” is the GS2 header (indicating that there are no channel bindings). The “c,” denotes the token as being a BrowserID initial context token. The remaining base64 URL encoded data is a BrowserID backed assertion, containing the following certificate (for clarity, the payload has been reformatted and JWT header and signature omitted):</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>{
    "public-key": {
        "algorithm": "DS",
        "y": "3913e882d8c35d22f6d4069ce600dbccb394acaaac649
              fd7f9fcd6c41246f56290ef0cc37476a04a418c1e8319
              b54b1ecb6f6cea7544f6e1563edcedc906d6843d01bce
              4f7a5f707cfa60ac9136faf62fdaf48d8a989aaae4407
              ed67277a1782ecaa156bdcaea167f263725de63ed8f28
              a603b6ff510f4802d74d7eae7abc2eb",
        "p": "ff600483db6abfc5b45eab78594b3533d550d9f1bf2a9
              92a7a8daa6dc34f8045ad4e6e0c429d334eeeaaefd7e2
              3d4810be00e4cc1492cba325ba81ff2d5a5b305a8d17e
              b3bf4a06a349d392e00d329744a5179380344e82a18c4
              7933438f891e22aeef812d69c8f75e326cb70ea000c3f
              776dfdbd604638c2ef717fc26d02e17",
        "q": "e21e04f911d1ed7991008ecaab3bf775984309c3",
        "g": "c52a4a0ff3b7e61fdf1867ce84138369a6154f4afa929
              66e3c827e25cfa6cf508b90e5de419e1337e07a2e9e2a
              3cd5dea704d175f8ebf6af397d69e110b96afb17c7a03
              259329e4829b0d03bbc7896b15b4ade53e130858cc34d
              96269aa89041f409136c7242a38895c9d5bccad4f389a
              f1d7a4bd1398bd072dffa896233397a"
    },
    "principal": {
        "email": "lukeh@lukktone.com"
    },
    "iat": 1362961096122,
    "exp": 1362964696122,
    "iss": "login.persona.org"
}</artwork>
        </figure>
      </t>
      <t>
and assertion:</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>{
    "nonce": "h5P4KrG8yng",
    "ecdh": {
        "x": "fjZNpsBjGn_XACmgbNwAsvr88g4FWztobqp5TMb_YF0",
        "crv": "P-256",
        "y": "RKEvJz59csav8KcweUv5XqFgt8AWCAkrJBz3PPqLJts"
    },
    "cb": "biws",
    "exp": 1362961216149,
    "aud": "urn:x-gss:imap/rand.mit.de.padl.com"
}</artwork>
        </figure>
      </t>
      <t>
Note the channel binding token that protects the GS2 header.</t>
      <t>
        <cref>
The encoded example needs to be regenearted to reflect that “cb” is now used for channel bindings.</cref>
      </t>
      <t>
Turning to the response backed assertion sent from the IMAP server to the mail user agent, we have the following after base64 decoding:</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlEempDQ0FyYWdBd0lCQWdJQkJ
6QU5CZ2txaGtpRzl3MEJBUVVGQURCZE1Rc3dDUVlEVlFRR0V3SkJWVEVlTU
J3R0ExVUVDZ3dWVUVGRVRDQlRiMlowZDJGeVpTQlFkSGtnVEhSa01TNHdMQ
VlEVlFRRERDVlFRVVJNSUZOdlpuUjNZWEpsSUVObGNuUnBabWxqWVhScGIy
NGdRWFYwYUc5eWFYUjVNQjRYRFRFek1ERXhNVEExTXpReU1Gb1hEVEUyTUR
FeE1UQTFNelF5TUZvd1RERUxNQWtHQTFVRUJoTUNRVlV4SGpBY0JnTlZCQW
9NRlZCQlJFd2dVMjltZEhkaGNtVWdVSFI1SUV4MFpERWRNQnNHQTFVRUF3d
1VjbUZ1WkM1dGFYUXVaR1V1Y0dGa2JDNWpiMjB3Z2dFaU1BMEdDU3FHU0li
M0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREJoekZwZkw2dkh4c3gyRHZ
GWlArR1IwVW9tRHAvQ0VlK09ITjBaMGM2OTFZZzlnV1htVTNuUHFWVGJBSX
FYSDhBVXR2ZjdNemJZMjhvVmxwWlQwNXptMmMvdEUzZ2toVHhtWE9SZ1FyY
3V1Z3VqT1hNRmhJNHN2RVorQ2JIUGxaaVovVHprWExIUDI5RXo3d05abjFI
NTdBTHFtU0FvNVQ0cXhNRmdCWXVkdy9aeFBSekR0VW9JVjBzMjNZZzR4VDl
hd0pucjFHZ01VUmliVUJqRjd5YmNtMEs4c0pUK1VHZUI3cm1MbFB3K2ZBa0
9mN1pqWjl0cFRrRU1pOHVMRU1xY3hhR1NBSy8ra1c3NXFPeGRBRkk4ellaW
DUzZ3BnNG1pK1FXZkdZMVpOUUpNdUhHUVhnL3VmeE16YXhOTjRoMWFPbG1a
WllrQkhwNTJBOXlJTVViQWdNQkFBR2pnYWt3Z2FZd0NRWURWUjBUQkFJd0F
EQXNCZ2xnaGtnQmh2aENBUTBFSHhZZFQzQmxibE5UVENCSFpXNWxjbUYwWl
dRZ1EyVnlkR2xtYVdOaGRHVXdIUVlEVlIwT0JCWUVGS1NzdWJFRHViUklHS
ENCdHRBbFR2MkZXR2YrTUI4R0ExVWRJd1FZTUJhQUZMaXpabE1XbktLMVBZ
YWdkSmprVnVSaEVRSmpNQWtHQTFVZEVRUUNNQUF3Q3dZRFZSMFBCQVFEQWd
YZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TURNQTBHQ1NxR1NJYjNEUU
VCQlFVQUE0SUJBUUJEMUJ6UVArck4xVVV6N0E2eitLRFBhcThzMmlCRzBGe
lp4c1gyUVVPdXBCRUlidVpwMEtKYXVqVk1nMDFmZGpzdUdHMHVYYk1mZVJH
eU5sVXNNTitaRHk4L01JT2gxYVVHdjBTVXdLdEN0THRXckp2NjV1d0hHR3Q
1dUZLeE1FNjFWVDQrcXBJMkFHcXh4NWRyc3hFTEJPZHlQbmV1QWlMUHhGdW
JSRm16dWhWU0k3QVBNbDc5T2szMG9XdWRBNDlsVVg5d3ozZzlxOXZkbDl5a
GdlZVVTVXBNaGxaMjRVYzlQdUx6cjE1ajZ2NjNYenJTZFd0Tnp2MEYxMGVE
bDR5VFVOV1NKaDdxQmhncTFJb1g5QVBPT3VMYk1OcnA2YmVFZW93aDM0cFZ
XZlRhU3hJN25LNTdrSzJ4aFJVNDNld1lqMmkvU3J6OEdzTVM5MXVyMjVJdC
JdfQ.eyJ0a3QiOnsianRpIjoiYWVheTBHSml6RHg3OUFnLS1XTC12dzZZOU
JYeFJ1QzFYc1p4cnk1MVNVSSIsImV4cCI6MTM2Mjk5NzA5ODAwMH0sImVjZ
GgiOnsieCI6IkoxSVdiSDJBNUMzY2hPVUlxbWZYcFBfUlFFRU9tZDJFeFhv
S3JxUVFYTE0iLCJ5IjoiXzJFdHhiel92SmVlVVVieTJyZmRla1RUUFVScGJ
HSkg3a3lJV3Fta0lFZyJ9LCJub25jZSI6Img1UDRLckc4eW5nIiwiZXhwIj
oxMzYyOTY0Njk2MDAwfQ.qZhUqupVPx3E7MI0GvsHf6DGzsspr2BluET0Sp
0DqvJEKQxKpb8o_iVlXvPkjvIztBnIj3MoO8RVLQbptOPd1k7qhMEpFHNTb
5XZJaeINPiACRK09uFiTNnwW1js1CzOcaLjLlI3xlWd-Iuzo388rMLlIudn
i1jNnE-29v_sSTNtq-C0Bch5C0Owkl71BNxxx3hUqxG1OL4Pt2gBJYAP_sN
VMvh1pX9aG7tVk4Kk1KccitjPWF7GWsrFzWxzDR0u6DFtFachCObefrfgfE
19qeZrKrzI0UdCrDPzYk9XoWJGkpFSOwWac_vCCuuv5V3Gd_LNSI3rBi-Fa
ehYHAF1IQ</artwork>
        </figure>
      </t>
      <t>
Here we show the JWT header for the response assertion, as it includes an ASN.1 encoded X.509 certificate, which is used to mutually authenticate the IMAP server to the UA:</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>{
    "alg": "RS256",
    "x5c": [
        "MIIDzjCCAragAwIBAgIBBzANBgkqhkiG9w0BAQUFADBdMQswCQ
         YDVQQGEwJBVTEeMBwGA1UECgwVUEFETCBTb2Z0d2FyZSBQdHkg
         THRkMS4wLAYDVQQDDCVQQURMIFNvZnR3YXJlIENlcnRpZmljYX
         Rpb24gQXV0aG9yaXR5MB4XDTEzMDExMTA1MzQyMFoXDTE2MDEx
         MTA1MzQyMFowTDELMAkGA1UEBhMCQVUxHjAcBgNVBAoMFVBBRE
         wgU29mdHdhcmUgUHR5IEx0ZDEdMBsGA1UEAwwUcmFuZC5taXQu
         ZGUucGFkbC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwgg
         EKAoIBAQDBhzFpfL6vHxsx2DvFZP+GR0UomDp/CEe+OHN0Z0c6
         91Yg9gWXmU3nPqVTbAIqXH8AUtvf7MzbY28oVlpZT05zm2c/tE
         3gkhTxmXORgQrcuugujOXMFhI4svEZ+CbHPlZiZ/TzkXLHP29E
         z7wNZn1H57ALqmSAo5T4qxMFgBYudw/ZxPRzDtUoIV0s23Yg4x
         T9awJnr1GgMURibUBjF7ybcm0K8sJT+UGeB7rmLlPw+fAkOf7Z
         jZ9tpTkEMi8uLEMqcxaGSAK/+kW75qOxdAFI8zYZX53gpg4mi+
         QWfGY1ZNQJMuHGQXg/ufxMzaxNN4h1aOlmZZYkBHp52A9yIMUb
         AgMBAAGjgakwgaYwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHx
         YdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0O
         BBYEFKSsubEDubRIGHCBttAlTv2FWGf+MB8GA1UdIwQYMBaAFL
         izZlMWnKK1PYagdJjkVuRhEQJjMAkGA1UdEQQCMAAwCwYDVR0P
         BAQDAgXgMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA0GCSqGSIb3DQ
         EBBQUAA4IBAQBD1BzQP+rN1UUz7A6z+KDPaq8s2iBG0FzZxsX2
         QUOupBEIbuZp0KJaujVMg01fdjsuGG0uXbMfeRGyNlUsMN+ZDy
         8/MIOh1aUGv0SUwKtCtLtWrJv65uwHGGt5uFKxME61VT4+qpI2
         AGqxx5drsxELBOdyPneuAiLPxFubRFmzuhVSI7APMl79Ok30oW
         udA49lUX9wz3g9q9vdl9yhgeeUSUpMhlZ24Uc9PuLzr15j6v63
         XzrSdWtNzv0F10eDl4yTUNWSJh7qBhgq1IoX9APOOuLbMNrp6b
         eEeowh34pVWfTaSxI7nK57kK2xhRU43ewYj2i/Srz8GsMS91ur
         25It"]
}</artwork>
        </figure>
      </t>
      <t>
The assertion payload is below (again, for clarity the actual JWT signature has been omitted):</t>
      <t>
</t>
      <t>
        <figure suppress-title="true" align="center">
          <artwork>{
    "tkt": {
        "jti": "aeay0GJizDx79Ag--WL-vw6Y9BXxRuC1XsZxry51SUI",
        "exp": 1362997098000
    },
    "ecdh": {
        "x": "J1IWbH2A5C3chOUIqmfXpP_RQEEOmd2ExXoKrqQQXLM",
        "y": "_2Etxbz_vJeeUUby2rfdekTTPURpbGJH7kyIWqmkIEg"
    },
    "nonce": "h5P4KrG8yng",
    "exp": 1362964696000
}</artwork>
        </figure>
      </t>
      <t>
Note the fast re-authentication ticket and the nonce echoed back from the initiator.</t>
    </section>
    <section title="Security Considerations" anchor="d1e3295">
      <t>
This document defines a GSS-API security mechanism, and therefore deals in security and has security considerations text embedded throughout. This section only addresses security considerations associated with the BrowserID GSS mechanism described in this document. It does not address security considerations associated with the BrowserID protocol or the GSS-API themselves.</t>
      <t>
This mechanism provides for authentication of initiator principals using private keys to public key cryptosystems, using the BorwserID specification for user certificates (which are NOT PKIX <xref target="RFC5280"/> certificates). Authentication of the acceptor principal is optional. Fast re-authentication is supported via acceptor-issued fast re-authentication tickets.</t>
      <t>
All cryptography for per-message tokens is imported from the Kerberos GSS-API mechanism <xref target="RFC4121"/>.</t>
      <t>
This mechanism actually has several mechanism OIDs, composed of a prefix identifying this family of mechanisms followed by an arc identifying the <xref target="RFC3961"/> enctype for use with per-message tokens and the GSS_Pseudo_random() funciton. The NULL enctype is supported, and when it is used then the GSS-API per-message tokens and GSS_Pseudo_random() function are not available, but channel binding and mutual authentication may be available. Also, when using the NULL enctype the fast re-authentication feature is not available because key exchange is only performed the initiator application uses the variant of this mechanism that supports per-message tokens and the GSS_Pseudo_random() function.</t>
      <t>
Acceptor credentials are PKIX <xref target="RFC5280"/> certificates and their private keys.</t>
      <section title="Host certificates for mutual authentication" anchor="d1e3340">
        <t>
Allowing a match on only the DNS subjectAltName in an acceptor's X.509 certificate permits different services on the same host to impersonate each other. This should be subject to local policy.</t>
      </section>
      <section title="Error statuses" anchor="d1e3349">
        <t>
Returning rich error information in the clear (see  <xref target="sub_response_gss_min"/>) may leak information. Implementations may squash status codes and/or avoid returning minor statuses entirely. Indeed, applications may even not send back error tokens at all, instead closing the connection or whatever might be appropriate for the application. (This is a generic GSS-API security consideration.)</t>
      </section>
    </section>
    <section title="IANA Considerations" anchor="d1e3361">
      <t>
This specification creates a number of IANA registries.</t>
      <section title="OID Registry" anchor="sub_OID_Registry">
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID (1.3.6.1.4.1.5322.24)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
Reserved</c>
          <c>
Reserved</c>
          <c>
1</c>
          <c>
mechanisms</c>
          <c>
A sub-arc containing BrowserID mechanisms</c>
          <c>
2</c>
          <c>
nametypes</c>
          <c>
A sub-arc containing BrowserID name types</c>
          <c>
3</c>
          <c>
ekus</c>
          <c>
A sub-arc containing X.509 EKUs</c>
        </texttable>
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.mechanisms (1.3.6.1.4.1.5322.24.1)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <ttcol align="center">
ECDH curve</ttcol>
          <ttcol align="center">
Symmetric hash</ttcol>
          <c>
0</c>
          <c>
gss-browserid-null</c>
          <c>
The NULL security mechanism</c>
          <c>
N/A</c>
          <c>
N/A</c>
          <c>
17</c>
          <c>
gss-browserid-aes128</c>
          <c>
The aes128-cts-hmac-sha1-96 mechanism</c>
          <c>
P-256</c>
          <c>
HS256</c>
          <c>
18</c>
          <c>
gss-browserid-aes256</c>
          <c>
The aes256-cts-hmac-sha1-96 mechanism</c>
          <c>
P-521</c>
          <c>
HS256</c>
        </texttable>
        <t>
</t>
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.nametypes (1.3.6.1.4.1.5322.24.2)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
Reserved</c>
          <c>
Reserved</c>
          <c>
1</c>
          <c>
GSS_C_NT_BROWSERID_PRINCIPAL</c>
          <c>
3.1.1</c>
        </texttable>
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.ekus (1.3.6.1.4.1.5322.24.3)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
Reserved</c>
          <c>
Reserved</c>
          <c>
1</c>
          <c>
browserIDServerAuth</c>
          <c>
4.2</c>
        </texttable>
      </section>
      <section title="SASL Registry" anchor="d1e3705">
        <t>
Subject: Registration of SASL mechanisms BROWSERID-AES128 and BROWSERID-AES128-PLUS</t>
        <t>
</t>
        <t>
SASL mechanism names: BROWSERID-AES128 and BROWSERID-AES128-PLUS</t>
        <t>
</t>
        <t>
Security considerations: See RFC 5801 and draft-howard-gss-browserid</t>
        <t>
</t>
        <t>
Published specification (recommended): draft-howard-gss-browserid</t>
        <t>
</t>
        <t>
Person &amp; email address to contact for further information:</t>
        <t>
Luke Howard lukeh@padl.com</t>
        <t>
</t>
        <t>
Intended usage: common</t>
        <t>
</t>
        <t>
Owner/Change controller: iesg@ietf.org</t>
        <t>
</t>
        <t>
Note: This mechanism describes the GSS BrowserID mechanism used with the aes128-cts-hmac-sha1-96 enctype. The GSS-API OID for this mechanism is 1.3.6.1.4.1.5322.24.1.17. As described in RFC 5801 a PLUS variant of this mechanism is also required.</t>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">&RFC2119;
&RFC2743;
&RFC3961;
&RFC4402;
&RFC4121;
&RFC4178;
&RFC4422;
&RFC4757;
&RFC5178;
&RFC5280;
&RFC5801;
&RFC5929;
&RFC6680;
&JWA;
&JWS;
&JWT;
&NegoEx;

<reference anchor="BrowserID"><front><title>BrowserID Specification</title><author initials="B." surname="Adida" fullname="Ben Adida"><organization>The Mozilla Foundation</organization></author><date year="2013" day="26" month="February"/></front><format type="TXT" target="https://raw.github.com/mozilla/id-specs/prod/browserid/index.md"/></reference>
</references>
    <references title="Informative References">&RFC4120;</references>
  </back>
</rfc>
