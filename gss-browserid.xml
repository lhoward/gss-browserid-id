<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2743 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">
<!ENTITY RFC3961 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3961.xml">
<!ENTITY RFC4402 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4402.xml">
<!ENTITY RFC4121 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml">
<!ENTITY RFC4178 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4178.xml">
<!ENTITY RFC4422 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml">
<!ENTITY RFC5178 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5178.xml">
<!ENTITY RFC5801 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5801.xml">
<!ENTITY RFC5929 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml">
<!ENTITY JWA PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml">
<!ENTITY JWS PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml">
<!ENTITY JWT PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-json-web-token.xml">
<!ENTITY NegoEx PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.zhu-negoex.xml">
<!ENTITY RFC4120 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
]>
<rfc docName="draft-howard-gss-browserid-00.txt" ipr="trust200902" category="exp" updates="">
  <front>
    <title abbrev="BrowserID SASL &amp; GSS-API">A SASL and GSS-API Mechanism for the BrowserID Authentication Protocol</title>
    <author initials="L." surname="Howard" fullname="Luke Howard">
      <organization abbrev="PADL">PADL Software</organization>
      <address>
        <postal>
          <street>PO Box 59</street>
          <city>Central Park</city>
          <region>VIC</region>
          <code>3145</code>
          <country>Australia</country>
        </postal>
        <email>lukeh@padl.com</email>
      </address>
    </author>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="March" year="2013"/>
    <area>
Security Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
This document defines protocols, procedures and conventions for a Generic Security Service Application Program Interface (GSS-API) security mechanism based on the BrowserID authentication mechanism. Through the GS2 family of mechanisms defined in RFC 5801, these protocols also define how Simple Authentication and Security Layer (SASL, RFC 4422) applications may use BrowserID.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="d1e721">
      <t>
BrowserID is a web-based three-party security protocol by which user agents can present to a Relying Party (RP) a signed assertion of e-mail address ownership. BrowserID was intended to be used for web authentication. We find BrowserID to be useful in general, therefore we define herein how to use it in many more applications.</t>
      <t>
The Simple Authentication and Security Layer (SASL) <xref target="RFC4422"/> is a framework for providing authentication and message protection services via pluggable mechanisms. Protocols that support it include IMAP, SMTP, and XMPP.</t>
      <t>
The Generic Security Service Application Program Interface (GSS-API) <xref target="RFC2743"/> provides a framework for authentication and message protection services through a common programming interface. This document conforms to the SASL and GSS-API bridge specified in <xref target="RFC5801"/>, so it defines both a SASL and GSS-API mechanism.</t>
      <t>
The BrowserID mechanism described in this document reuses the existing web-based BrowserID protocol, but profiles it for use in applications that support SASL or GSS-API, adding features such as key exchange, mutual authentication, and fast re-authentication.</t>
      <t>
The following diagram illustrates the interactions between the three parties in the GSS BrowserID protocol. Note that the terms client, initiator and user agent (UA) are used interchangeably in this document, as are server, acceptor and relying party (RP). </t>
      <t>
</t>
      <t>
        <figure anchor="magicparlabel-171" title="Interworking Architecture">
          <artwork> 
                    +------------+
                    | BrowserID  |
                    | identity   |
                    | provider   |
                    +------------+
                      //      \\
                     //        \\
                    //          \\
                   //            \\
   make signed    //              \\    fetch IdP public
   certificate   //                \\   key over HTTPS
   for user's   //                  \\  (RP may cache)
   public key  //                    \\
              //                      \\
             //                        \\
            //                          \\
           |/                            \|
    +-------------+                     +-------------+
    | SASL or GSS |    GSS BrowserID    | SASL or GSS |
    | client/UA   |&lt;-------------------&gt;| server/RP   |
    | (initiator) |                     | (acceptor)  |
    +-------------+                     +-------------+
 
 </artwork>
        </figure>
      </t>
      <section title="Discovery and Negotiation" anchor="d1e783">
        <t>
The means of discovering GSS-API peers and their supported mechanisms is out of this specification's scope. They may use SASL <xref target="RFC4422"/> or the Simple and Protected Negotiation mechanism (SPNEGO) <xref target="RFC4178"/>.</t>
        <t>
Discovery of a BrowserID identity provider (IdP) for a user is described in the BrowserID specification. A domain publishes a document containing their public key and URIs for authenticating and provisioning users, or pointer to an authority containing such a document.</t>
      </section>
      <section title="Authentication" anchor="d1e807">
        <t>
The GSS-API protocol involves a client, known as the initiator, sending an initial security context token of a chosen GSS-API security mechanism to a peer, known as the acceptor. The two peers subsequently exchange, synchronously, as many security context tokens as necessary to complete the authentication or fail. The specific number of context tokens exchanged varies by security mechanism: in the case of the BrowserID mechanism, it is typically two (i.e. a single round trip), however it can be more in some cases. Once authentication is complete, the initiator and acceptor share a security context which identifies the peers and can optionally be used for integrity or confidentiality protecting subsequent application messages.</t>
        <t>
The original BrowserID protocol, as defined outside this document, specifies a bearer token authentication protocol for web applications. The user agent generates a short-term key pair, the public key of which is signed by the user's IdP. (The user must have already authenticated to the IdP; how this is done is not specified by BrowserID, but forms-based authentication is common.) The IdP returns a certificate for the user which may be cached by the user's browser. When authenticating to a Relying Party (RP), the browser generates an identity assertion containing the RP domain and an expiration time. The user agent signs this and presents both the assertion and certificate to the RP. (The combination of an assertion and zero or more certificates is termed a “backed assertion”.) The RP fetches the public key for the IdP, validates the user's certificate (and those of any intermediate certifying parties) and then verifies the assertion.</t>
        <t>
The GSS BrowserID protocol extends this by having the RP always send back a response to the user agent, which at a minimum provides key confirmation (for mechanisms that support key exchange) and indicates the lifetime of the established security context. In an extension of the base protocol, it can also allow the user agent to mutually authenticate the RP.</t>
      </section>
      <section title="Message protection services" anchor="d1e823">
        <t>
GSS-API provides a number of a message protection services:</t>
        <t>
          <list style="hanging">
            <t hangText="GSS_Wrap()">
 integrity and optional confidentiality for a message</t>
            <t hangText="GSS_GetMIC()">
 integrity for a message sent separately</t>
            <t hangText="GSS_Pseudo_random()">
 key derivation</t>
          </list>
        </t>
        <t>
These services may be used with security contexts that have a shared session key, to protect messages that are exchanged by the application protocol.</t>
      </section>
    </section>
    <section title="Requirements notation" anchor="d1e851">
      <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      <t>
The reader is assumed to be familiar with the terms used in the BrowserID specification.</t>
    </section>
    <section title="Naming" anchor="d1e869">
      <section title="GSS name types" anchor="d1e875">
        <section title="GSS_C_NT_BROWSERID_PRINCIPAL" anchor="sub_GSS_C_NT_BROWSERID_PRINCIPAL">
          <t>
This name may contain an e-mail address, or a service principal name identifying an acceptor. The encoding of service principal names is intended to be somewhat compatible with the Kerberos <xref target="RFC4120"/> security protocol (without the realm name). The following ABNF defines the 'name' rule that names of this type must match. [XXX Should we reference RFC2822 here? The Mozilla BrowserID docs sure don't... -Nico]</t>
          <t>
</t>
          <t>
            <figure suppress-title="" align="">
              <artwork> char-normal = %x00-2E/%x30-3F/%x41-5B/%x5D-FF
 char-escaped = "\" %x2F / "\" %x40 / "\" %x5C
 name-char = char-normal / char-escaped name-string = 1*name-char
 user = name-string
 domain = name-string
 email = user "@" domain
 service-name = name-string
 service-host = name-string
 service-specific = name-string
 service-specifics = service-specific 0*("/" service-specifics)
 spn = service-name ["/" service-host [ "/" service-specifics]]
 name = email / spn</artwork>
            </figure>
          </t>
        </section>
        <section title="GSS_C_NT_USER_NAME" anchor="d1e905">
          <t>
This name is implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL. A default domain may be appended when importing names of this type.</t>
        </section>
        <section title="GSS_C_NT_HOSTBASED_SERVICE" anchor="d1e914">
          <t>
This name is transformed by replacing the “@” symbol with a “/”, and then implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.</t>
        </section>
        <section title="GSS_C_NT_DOMAINBASED_SERVICE" anchor="d1e923">
          <t><xref target="RFC5178"/> domain-based service names are transformed into a GSS_C_NT_BROWSERID_PRINCIPAL as follows:</t>
          <t>
            <list style="symbols">
              <t>
the &lt;service&gt; name becomes the first component of the BrowserID principal name (service-name in ABNF)</t>
              <t>
the &lt;hostname&gt; becomes the second component (service-host)</t>
              <t>
the &lt;domain&gt; name becomes the third component (service-specific)</t>
            </list>
          </t>
        </section>
      </section>
      <section title="Audience encoding" anchor="d1e948">
        <t>
A GSS-API service name is encoded into a BrowserID audience URL with the following syntax, where spn is defined above:</t>
        <t>
</t>
        <t>
          <figure suppress-title="" align="">
            <artwork> audience = "urn:x-gss:" spn</artwork>
          </figure>
        </t>
        <t>
[XXX can we request assignment of a URN outside the experimental namespace?]</t>
      </section>
      <section title="Name Canonicalization" anchor="d1e967">
        <t>
The BrowserID GSS-API mechanism performs no name canonicalization. The mechanism's GSS_Canonicalize_name() returns an MN whose display form is the same as the query form.</t>
      </section>
      <section title="Exported Name Token Format" anchor="d1e976">
        <t>
The exported name token format for the BrowserID GSS-API mechanism is the same as the query form, plus the standard exported name token format header mandated by the GSS-API <xref target="RFC2743"/>.</t>
      </section>
    </section>
    <section title="Context tokens" anchor="d1e991">
      <t>
All context tokens include a two-byte token identifier followed by a backed BrowserID assertion. This document defines the following token IDs:</t>
      <texttable>
        <ttcol align="center">
Section</ttcol>
        <ttcol align="center">
Token ID</ttcol>
        <ttcol align="center">
ASCII</ttcol>
        <ttcol align="center">
Description</ttcol>
        <c>
4.1</c>
        <c>
0x632C</c>
        <c>
c,</c>
        <c>
Initiator context token</c>
        <c>
4.2</c>
        <c>
0x432C</c>
        <c>
C,</c>
        <c>
Acceptor context token</c>
        <c>
TBD</c>
        <c>
0x442C</c>
        <c>
D,</c>
        <c>
Context deletion token</c>
        <c>
9.3</c>
        <c>
0x6D2C</c>
        <c>
m,</c>
        <c>
Initiator metadata token</c>
        <c>
9.3</c>
        <c>
0x4D2C</c>
        <c>
M,</c>
        <c>
Acceptor metadata token</c>
      </texttable>
      <t>
The token ID has a human-readable ASCII encoding for the benefit of pure SASL implementations of this mechanism.</t>
      <section title="Initial context token" anchor="sub_Initial_context_token">
        <t>
The initial context token is framed per section 1 of <xref target="RFC2743"/>:</t>
        <t>
</t>
        <t>
          <figure suppress-title="" align="">
            <artwork> GSS-API DEFINITIONS ::=         
     BEGIN
 
     MechType ::= OBJECT IDENTIFIER
     -- representing BrowserID mechanism
     GSSAPI-Token ::=
     [APPLICATION 0] IMPLICIT SEQUENCE {
         thisMech MechType,
         innerToken ANY DEFINED BY thisMech
             -- token ID || backed assertion
     }
     END</artwork>
          </figure>
        </t>
        <t>
Unlike many other GSS-API mechanisms such as Kerberos, this token framing is not used by subsequent context or <xref target="I-D.zhu-negoex"/> metadata tokens. As such, pure SASL implementations of this mechanism do not need to deal with DER encoding the mechanism object identifier.</t>
        <t>
GSS BrowserID is a family of mechanisms, where the last element in the OID arc indicates the <xref target="RFC4121"/> encryption type supported for message protection services. The OID prefix is 1.3.6.1.4.1.5322.24.1. The NULL encryption type is valid, in which case key confirmation and message protection services are not provided.</t>
        <t>
The innerToken consists of the initiator context token ID concatenated with a backed assertion for the audience corresponding to the target name passed into GSS_Init_sec_context(). In addition, the assertion may contain the following additional claims, which are described later in this document:</t>
        <t>
          <list style="symbols">
            <t>
Channel binding information</t>
            <t>
ECDH parameters for session key establishment</t>
          </list>
        </t>
        <t>
The call to GSS_Init_sec_context() returns GSS_C_CONTINUE_NEEDED to indicate that a subsequent token from the acceptor is expected.</t>
      </section>
      <section title="Acceptor context token" anchor="sub_Acceptor_context_token">
        <t>
Upon receiving a context token from the initiator, the acceptor validates that the token is well formed and contains the correct mechanism OID and token type.</t>
        <t>
The acceptor then verifies the backed identity assertion per the BrowserID specification. This includes validating the expiry times, audience, certificate chain, and assertion signature. In the case of failure, an error token is generated and immediately returned.</t>
        <t>
The acceptor then verifies the channel binding token, if present, and any other GSS-specific claims in the assertion. In case of failure, an error token is generated.</t>
        <t>
If the <xref target="RFC3961"/> encryption type for the selected mechanism is not ENCTYPE_NULL, the acceptor generates a ECDH public key using the parameters received from the client, and from it derives the RP Response Key (RRK). The acceptor then generates a response assertion containing the ECDH public key and context expiry time. The response assertion is signed using the RP Response Key (RRK) unless mutual authentication is desired, in which case it may be signed in the acceptor's private key (see below). The response token is encoded as a backed assertion, even though it will typically have a certificate count of zero (because the signing key is the shared RRK, or because an X.509 certificate is included directly in the assertion's JWT header).</t>
        <t>
Finally, the context root key (CRK) is derived from the ECDH shared secret and GSS_S_COMPLETE is returned, along with the initiator name from the verified assertion. Other assertion/certificate attributes MAY be made available via GSS_Get_name_attribute().</t>
      </section>
      <section title="Initiator context completion" anchor="d1e1228">
        <t>
Upon receiving the acceptor context token, the initiator unpacks the response assertion and, if necessary, computes the ECDH shared secret and RRK. The RRK is used to verify the response assertion unless mutual authentication is desired, in which case the acceptor's public key will be used.</t>
        <t>
The initiator sets the context expiry time with that received in the response assertion. If the context has expired, GSS_S_CONTEXT_EXPIRED is returned and context establishment fails.</t>
        <t>
The context root key (CRK) is derived from the ECDH shared secret and GSS_S_COMPLETE is returned to indicate the user is authenticated and the context is ready for use. No output token is emitted.</t>
      </section>
      <section title="Extensions for mutual authentication" anchor="d1e1243">
        <t>
Mutual authentication allows the acceptor to be authenticated to the initiator. The initiator may return GSS_C_MUTUAL_FLAG flag to the caller. Support for mutual authentication is OPTIONAL.</t>
        <t>
The base protocol is extended as follows to support this:</t>
        <section title="Initiator mutual authentication context token" anchor="d1e1256">
          <t>
If the initiator requested GSS_C_MUTUAL_FLAG, a nonce is included in the assertion to bind the initiator and acceptor tokens.</t>
        </section>
        <section title="Acceptor mutual authentication context token" anchor="d1e1265">
          <t>
If the acceptor has a private key available and received a nonce in the initiator assertion, it signs the response using a private key rather than the RP Response Key (RRK). The response includes the nonce from the initiator's assertion.</t>
          <t>
While the response is a backed assertion, in order to take advantage of existing keying infrastructures BrowserID certificates SHOULD NOT be included in the backed assertion. Instead, an X.509 certificate SHOULD be included as a value for the "x5c" header attribute in the assertion (see <xref target="I-D.ietf-jose-json-web-signature"/> 4.1.6).</t>
        </section>
        <section title="Initiator mutual authentication context completion" anchor="d1e1283">
          <t>
The initiator verifies the nonce and the assertion signature, and validates the certificate chain (which SHOULD be an X.509 certificate chain, in which case trust anchors SHOULD be configurable both system-wide and specifically for the BrowserID mechanism).</t>
          <t>
If X.509 certificates are used, then either the audience URI must be present in the URI subjectAltName, or the host component must be present as a value for the DNS subjectAltName or as the least significant Common Name RDN.</t>
          <t>
If BrowserID certificates are used, then either the audience URI must match the "uri" key of the "principal" object in the certificate, or the host component must match the "hostname" key.</t>
          <t>
[XXX when using X.509 certificates, do we need to say anything about key usage?]</t>
        </section>
        <section title="Acceptor certificate advertisement" anchor="d1e1301">
          <t>
The acceptor may include its certificate (and optionally any additional certs), formatted as a backed assertion with an empty payload, in its NegoEx metadata. There is no initiator metadata defined.</t>
        </section>
      </section>
      <section title="Extensions for fast re-authentication" anchor="d1e1311">
        <t>
Fast re-authentication allows a context to be established without acquiring a new BrowserID assertion. Instead an assertion signed with a secret key derived from the initial ECDH key exchange is used. Re-authentication lifetime SHOULD be site configurable, but by default SHOULD match the user's certificate expiry time. Support for fast re-authentication is OPTIONAL and is indicated by the acceptor returning a ticket in the response assertion.</t>
        <section title="Ticket generation" anchor="d1e1320">
          <t>
If the acceptor supports re-authentication, the following steps are added to the "acceptor to initiator" flow described above.</t>
          <t>
            <list style="numbers">
              <t>
A unique ticket identifier is generated. The acceptor must be able to use this to retrieve the authenticator root key, ticket expiry time, mutual authentication state, and any other attributes re-authenticated acceptor contexts will need.</t>
              <t>
The acceptor creates a JSON object containing the ticket identifier and expiry time and returns it in the response to the initiator.</t>
            </list>
          </t>
          <t>
The initiator MAY cache such tickets, along with the ARK and expiry time, received from the acceptor in order to re-authenticate to it at a future time.</t>
        </section>
        <section title="Initiator re-authentication context token" anchor="d1e1339">
          <t>
The initiator looks in its ticket cache for an unexpired ticket for the desired acceptor. If none is found, the normal authentication flow is performed, otherwise:</t>
          <t>
            <list style="numbers">
              <t>
The initiator generates an authenticator containing: the current time, a random nonce, the ticket identifier, and the target name (audience) and channel bindings requested by the application.</t>
              <t>
The initiator signs the authenticator using its copy of the ARK, using the appropriate hash algorithm associated with the original context (only HS256 is presently specified).</t>
              <t>
The authenticator is packed into a backed assertion with no certificates.</t>
              <t>
The initiator generates an authenticator session key to be used in verifying the response and in deriving the context root key.</t>
              <t>
The assertion is sent to the acceptor.</t>
            </list>
          </t>
        </section>
        <section title="Acceptor re-authentication context token" anchor="d1e1364">
          <t>
            <list style="numbers">
              <t>
The acceptor unpacks the authenticator assertion and retrieves the authenticator root key, ticket expiry time, mutual authentication state and any other attributes (such as the initiator principal) associated with the ticket identifier.</t>
              <t>
The acceptor validates that the ticket and authenticator have not expired.</t>
              <t>
The acceptor verifies the authenticator using its copy of the ARK.</t>
              <t>
The acceptor generates the ASK and derived the RRK and CRK from this.</t>
              <t>
The acceptor generates a response and signs and returns it. </t>
            </list>
          </t>
          <t>
If the ticket cannot be found, or the authentication fails, the acceptor MAY return an error code in its response, permitting the initiator to recover and fallback to generating a BrowserID assertion. It MAY also include its local timestamp so that the initiator can perform clock skew compensation.</t>
        </section>
        <section title="Interaction with mutual authentication" anchor="d1e1390">
          <t>
The mutual authentication state of a re-authenticated context is transitive. The initiator MUST NOT return GSS_C_MUTUAL_FLAG for a re-authenticated context unless the original context was mutually authenticated.</t>
          <t>
As such, the initiator's ticket cache must store the mutual authentication state of the original context.</t>
        </section>
      </section>
    </section>
    <section title="Validation" anchor="d1e1402">
      <section title="Expiry times" anchor="d1e1408">
        <t>
The expiry and, if present, issued-at and not-before times of all elements in a backed assertion, MUST be validated. This applies equally to re-authentication assertions, public key assertions, and the entire certificate chain. If the expiry time is absent, the issued-at time MUST be present, and the JWT implicitly expires a configurable interval (typically five minutes) after the issued-at time.</t>
        <t>
The GSS context lifetime SHOULD NOT exceed the lifetime of the user's certificate.</t>
        <t>
The lifetime of a re-authentication ticket SHOULD NOT exceed the lifetime of the user's certificate. The acceptor MUST validate the ticket expiry time when performing re-authentication.</t>
        <t>
Message protections services such as GSS_Wrap() SHOULD be available beyond the GSS context lifetime for maximum application compatibility.</t>
      </section>
      <section title="Audience" anchor="d1e1427">
        <t>
If the credential passed to GSS_Accept_sec_context() is not for GSS_C_NO_NAME, then its string representation as a BrowserID principal MUST match the unpacked audience (that is, the audience without the URN prefix).</t>
      </section>
      <section title="Channel bindings" anchor="d1e1436">
        <t>
If the acceptor passed in channel bindings to GSS_Accept_sec_context(), the assertion MUST contain a matching channel binding claim. (Only the application_data component is validated.) </t>
      </section>
      <section title="Signatures" anchor="d1e1445">
        <t>
Signature validation on assertions is the same as for the web usage of BrowserID, with the addition that response and re-authentication assertions may be signed with a symmetric key.</t>
      </section>
      <section title="Replay detection" anchor="d1e1454">
        <t>
The acceptor SHOULD maintain a cache of received assertions in order to guard against replay attacks. GSS_C_REPLAY_FLAG MUST NOT be returned if the implementation does not support replay detection.</t>
      </section>
    </section>
    <section title="Fast re-authentication" anchor="d1e1463">
      <t>
When using fast re-authentication, the payload of the initiator assertion contains the following claims:</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork> iat = issue time
 nonce = 64-bit base64 URL encoded random nonce
 tkt = opaque ticket identifier
 aud = audience containing service principal name
 cbt = OPTIONAL; base64 URL encoding of channel binding application-specific data</artwork>
        </figure>
      </t>
      <t>
The re-authentication assertion has an implicit expiry of a short interval after the issue time.</t>
      <t>
The ticket expiry time must be securely available to the acceptor, along with the subject, issuer, audience, expiry time and ARK of the original assertion. One implementation choice may be to use the opaque ticket identifier as a key into a dictionary containing this information (possibly sharing the replay cache). Another would be to encrypt this information in a long-term secret only known to the acceptor and encode the resulting ciphertext in the opaque ticket identifier.</t>
      <t>
The fast re-authentication assertion is signed with a HMAC using the authenticator root key (ARK).</t>
    </section>
    <section title="Assertion claims" anchor="d1e1488">
      <section title="Request assertion" anchor="d1e1494">
        <t>
These claims are included in the assertion sent to the acceptor and are authenticated by the initiator's private key and certificate chain. Here is an example assertion containing Elliptic Curve Diffie-Hellman parameters:</t>
        <t>
</t>
        <t>
          <figure suppress-title="" align="">
            <artwork> { 
 	"exp": 1360158396188,
 	"ecdh": {
 		"crv": "P-256",
 		"x": "JR5UPDgMLFPZwOGaKKSF24658tB1DccM1_oHPbCHeZg",
 		"y": "S45Esx_6DfE5-xdB3X7sIIJ16MwO0Y_RiDc-i5ZTLQ8"
 	},
 	"nonce": "GnK2IBA42iQ",
 	"aud": "urn:x-gss:imap/mail.ietf.org"
 }</artwork>
          </figure>
        </t>
        <t>
The request assertion may contain the following claims:</t>
        <section title="“cbt” (Channel Binding Token)" anchor="d1e1512">
          <t>
This contains a channel binding token for binding the GSS context to an outer channel (e.g. see <xref target="RFC5929"/>). Its value is the base64 URL encoding of the application-specific data component of the channel bindings passed to GSS_Init_sec_context() or GSS_Accept_sec_context(). This claim is OPTIONAL.</t>
        </section>
        <section title="&quot;ecdh&quot; (Elliptic Curve Diffie-Hellman key exchange)" anchor="d1e1528">
          <t>
These contain ECDH key parameters for deriving a shared session key with the relying party: "crv" contains the curve, "x" the X coordinate and "y" the Y coordinate (see 
.I-D.ietf-oauth-json-web-token
 section 5.2).</t>
          <t>
The curve should have an equivalent strength to the negotiated <xref target="RFC4121"/> encryption type: at least P-256 MUST be used for browserid-aes128, and P-521 for browserid-aes256. This claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL.</t>
        </section>
        <section title="&quot;nonce&quot; (Mutual authentication nonce)" anchor="d1e1552">
          <t>
This is a random quantity of at least 64 bits, base 64 URL encoded, which is used to bind the initiator and acceptor assertions, in the case where mutual authentication is desired. This claim is OPTIONAL.</t>
        </section>
        <section title="“aud” (Audience)" anchor="d1e1561">
          <t>
The audience, formatted as a URN containing the acceptor's principal name. This claim is REQUIRED.</t>
        </section>
        <section title="“tkt” (Ticket identifier)" anchor="d1e1570">
          <t>
The opaque ticket identifier, when the assertion is being used for fast re-authentication. This matches the “jti” value sent back in the response assertion ticket. This claim is OPTIONAL.</t>
        </section>
        <section title="“iat” (Issued at time)" anchor="d1e1579">
          <t>
This contains the time the assertion was issued, when the assertion is being used for fast re-authentication. The acceptor MUST validate that the ticket was recently issued (a recommended interval is five minutes). This claim is REQUIRED when the assertion is a re-authentication assertion.</t>
        </section>
        <section title="“exp” (Expiry time)" anchor="d1e1589">
          <t>
This contains the time when the assertion expires. This claim is REQUIRED when the assertion is signed with a user's BrowserID certificate; it MUST be ignored if present in a re-authentication assertion.</t>
        </section>
      </section>
      <section title="Response assertion" anchor="d1e1598">
        <t>
The response assertion is sent from the acceptor to the initiator. It is formatted as a backed assertion, however in the current specification it consists of a single assertion with zero certificates; that is, it is "unbacked". It is encoded as a backed assertion in order to provide future support for mutual authentication using native BrowserID certificates. Such support is not defined by this specification; implementations SHOULD reject backed response assertions.</t>
        <t>
In the case of a key successfully being negotiated, it is signed with the RP Response Key (RRK). Alternatively, it may be signed with the acceptor's private RSA or DSA key. In this case, an X.509 certificate of is included in the "x5c" attribute of the JWT header.</t>
        <t>
The HMAC-SHA256 (HS256) algorithm MUST be supported by implementors of this specification.</t>
        <t>
If a key is unavailable, then the signature is absent and the value of the "alg" header claim is "none". No signature verification is required in this case, however the initiator MUST NOT return GSS_C_COMPLETE unless the associated RFC3961 encryption type for the mechanism OID is ENCTYPE_NULL.</t>
        <t>
Response assertions with an audience claim (“aud”) MUST be rejected to prevent reflection attacks.</t>
        <t>
Here is an example response assertion:</t>
        <t>
</t>
        <t>
          <figure suppress-title="" align="">
            <artwork>{
    "exp": 1362960258000,
    "nonce": "bbqT10Gyx3s",
    "ecdh": {
        "x": "bvNF6V1rpMeQyGOKCj0kBaOaSh3tlhUcbffaji4uCEI",
        "y": "Iuqs650FXzXFUD9kHknETfbqiB8XBbCHlJXoysx3rvw"
    },
    "tkt": {
        "jti": "Jgg7vKX2sEKlCWBfmLTg_n4qz3NVZxOU-a2B4qYMkXI",
        "exp": 1362992660000
    }
}</artwork>
          </figure>
        </t>
        <t>
The response assertion payload may contain the following claims:</t>
        <section title="“iat” (Issued at time)" anchor="d1e1632">
          <t>
The current acceptor time, in milliseconds since January 1, 1970. This allows the initiator to compensate for clock differences when generating assertions. This claim is OPTIONAL.</t>
        </section>
        <section title="“ecdh” (Elliptic Curve Diffie-Hellman key exchange)" anchor="d1e1641">
          <t>
This contains a JSON object containing the coordinates of the acceptor's ECDH public key. This claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL.</t>
        </section>
        <section title="“exp” (Expiry time)" anchor="d1e1650">
          <t>
This contains the time when the context expires. This claim is OPTIONAL; the initiator should use the certificate expiry time if absent.</t>
        </section>
        <section title="“nonce” (Mutual authentication nonce)" anchor="d1e1659">
          <t>
The nonce as received from the initiator. This SHOULD NOT be present unless a nonce was received from the initiator.</t>
        </section>
        <section title="“tkt” (Ticket)" anchor="d1e1668">
          <t>
This contains a JSON object that may be used for re-authenticating to the acceptor without acquiring an assertion. Its usage is optional. It has two properties: “jti”, an opaque identifier to be presented in a re-authentication assertion; and “exp”, the expiry time of the ticket. This claim is OPTIONAL.</t>
        </section>
        <section title="“gss-maj” (GSS major status code)" anchor="d1e1678">
          <t>
This contains a GSS major status code represented as a number. It MUST not be present if the acceptor did not return an error. This claim is OPTIONAL.</t>
        </section>
        <section title="“gss-min” (GSS minor status code)" anchor="d1e1687">
          <t>
This contains a GSS minor status code represented as a number. It MUST not be present if the acceptor did not return an error and SHOULD not be present if there is no minor status code for the given major error. This claim is OPTIONAL.</t>
          <t>
If GSSBID_REAUTH_FAILED is received, the initiator SHOULD attempt to send another initial context token containing a fresh assertion.</t>
          <t>
[XXX define error codes]</t>
        </section>
      </section>
    </section>
    <section title="Key derivation" anchor="d1e1702">
      <t>
The following algorithm is used as the base algorithm for deriving keys:</t>
      <t>
browserid-derive-key(K, salt) = HMAC(K, "BrowserID" || K || salt || 0x01)</t>
      <t>
The HMAC hash algorithm for all currently specified key lengths is SHA-256. Note that the inclusion of K in the HMAC input is for interoperability with some crypto implementations.</t>
      <section title="Diffie-Hellman Key (DHK)" anchor="d1e1718">
        <t>
This key is the shared secret resulting from the ECDH exchange. Its length corresponds to the selected EC curve. It is never used without derivation and thus may be used with implementations that do not expose the DH value directly.</t>
      </section>
      <section title="Context Master Key (CMK)" anchor="d1e1727">
        <t>
This is the Diffie-Hellman Key (DHK) for all initially authenticated contexts and the Authenticator Session Key (ASK) for re-authenticated contexts.</t>
      </section>
      <section title="RP Response Key (RRK)" anchor="d1e1736">
        <t>
The response from the acceptor is signed using this key for fresh assertions:</t>
        <t>
RRK = browserid-derive-key(CMK, "RRK") </t>
      </section>
      <section title="Context Root Key (CRK)" anchor="d1e1748">
        <t>
The context root key is used for <xref target="RFC4121"/> message protection services, e.g. GSS_Wrap() and GSS_Get_MIC().</t>
        <t>
CRK = random-to-key(browserid-derive-key(CMK, "CRK"))</t>
      </section>
      <section title="Authenticator Root Key (ARK)" anchor="d1e1766">
        <t>
The authenticator root key (ARK) is used to sign authenticators used for fast re-authentication. It is derived as follows:</t>
        <t>
ARK = browserid-derive-key(DHK, "ARK")</t>
      </section>
      <section title="Authenticator Session Key (ASK)" anchor="d1e1779">
        <t>
The authenticator session key (ASK) is used instead of the DHK for re-authenticated contexts. It is derived as follows:</t>
        <t>
ASK = browserid-derive-key(ARK, authenticator-as-jwt)</t>
      </section>
    </section>
    <section title="GSS-API Extensions" anchor="d1e1791">
      <section title="PRF" anchor="d1e1797">
        <t>
See <xref target="RFC4402"/>. </t>
      </section>
      <section title="Naming extensions" anchor="d1e1812">
        <t>
The acceptor MAY surface attributes from the assertion and any certificates using GSS_Get_name_attribute(). The URN prefix is "urn:ietf:params:gss:jwt". The acceptor MUST filter any sensitive attributes before returning them to the application.</t>
        <t>
If a SAML assertion is present in the "saml" parameter of the leaf certificate, it may be surfaced using the URN prefix "urn:ietf:params:gss:federated-saml-attribute".</t>
        <t>
Attributes from the assertion MUST be marked as unauthenticated unless otherwise validated by the acceptor (e.g. the audience).</t>
        <t>
Attributes from certificates SHOULD be marked as authenticated.</t>
      </section>
      <section title="NegoEx" anchor="sub_NegoEx">
        <t>
GSS BrowserID supports <xref target="I-D.zhu-negoex"/> for advertising RP certificates used in mutual authentication.</t>
        <t>
If the acceptor supports mutual authentication, it MAY include its certificate and any additional certificates inside a backed assertion with an empty payload as output for GSS_Query_meta_data(). The "assertion" is prepended with the two byte token identifier TOK_TYPE_ACCEPTOR_META_DATA.</t>
        <t>
Upon receiving this, the initiator SHOULD display the certificate information or fingerprint to the user and allow them to confirm it before committing to authenticate.</t>
        <t>
The NegoEx signing key is the output of GSS_Pseudo_random() with an input of GSS_C_PRF_KEY_FULL and "gss-browserid-negoex-initiator" or "gss-browserid-negoex-acceptor", depending on the party generating the signature.</t>
        <t>
The NegoEx authentication scheme is the binary encoding of the following hexadecimal string:</t>
        <t>
535538008647F5BC624BD8076949F0</t>
        <t>
where the third byte (zero above) is set to the <xref target="RFC3961"/> encryption type for the selected mechanism.</t>
        <t>
There is currently no initiator-sent metadata defined and acceptors should ignore any sent. The metadata is advisory and the initiator is free to ignore it.</t>
      </section>
    </section>
    <section title="Example" anchor="d1e1876">
      <t>
Suppose a mail user agent for the user lukeh@lukktone.com wishes to authenticate to an IMAP server rand.mit.de.padl.com. They do not have a re-authentication ticket. The mail user agent would display a dialog box in which the user would sign in to their IdP and request a fresh assertion be generated.</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>C: &lt;connects to IMAP port&gt;
S: * OK
C: C1 CAPABILITY
S: * CAPABILITY IMAP4rev1 SASL-IR SORT [...] AUTH=BROWSERID-AES128
S: C1 OK Capability Completed
C: C2 AUTHENTICATE BROWSERID-AES128
biwsYyxleUpoYkdjaU9pSlNVekkxTmlKOS5leUp3ZFdKc2FXTXRhMlY1SWpwN0ltRnNaMjl5YVhSb2JTSTZJa1JUSWl3aWVTSTZJak01TVRObE9EZ3laRGhqTXpWa01qSm1ObVEwTURZNVkyVTJNREJrWW1OallqTTVOR0ZqWVdGaFl6WTBPV1prTjJZNVptTmtObU0wTVRJME5tWTFOakk1TUdWbU1HTmpNemMwTnpaaE1EUmhOREU0WXpGbE9ETXhPV0kxTkdJeFpXTmlObVkyWTJWaE56VTBOR1kyWlRFMU5qTmxaR05sWkdNNU1EWmtOamcwTTJRd01XSmpaVFJtTjJFMVpqY3dOMk5tWVRZd1lXTTVNVE0yWm1GbU5qSm1aR0ZtTkRoa09HRTVPRGxoWVdGbE5EUXdOMlZrTmpjeU56ZGhNVGM0TW1WallXRXhOVFppWkdOaFpXRXhOamRtTWpZek56STFaR1UyTTJWa09HWXlPR0UyTUROaU5tWm1OVEV3WmpRNE1ESmtOelJrTjJWaFpUZGhZbU15WldJaUxDSndJam9pWm1ZMk1EQTBPRE5rWWpaaFltWmpOV0kwTldWaFlqYzROVGswWWpNMU16TmtOVFV3WkRsbU1XSm1NbUU1T1RKaE4yRTRaR0ZoTm1Sak16Um1PREEwTldGa05HVTJaVEJqTkRJNVpETXpOR1ZsWldGaFpXWmtOMlV5TTJRME9ERXdZbVV3TUdVMFkyTXhORGt5WTJKaE16STFZbUU0TVdabU1tUTFZVFZpTXpBMVlUaGtNVGRsWWpOaVpqUmhNRFpoTXpRNVpETTVNbVV3TUdRek1qazNORFJoTlRFM09UTTRNRE0wTkdVNE1tRXhPR00wTnprek16UXpPR1k0T1RGbE1qSmhaV1ZtT0RFeVpEWTVZemhtTnpWbE16STJZMkkzTUdWaE1EQXdZek5tTnpjMlpHWmtZbVEyTURRMk16aGpNbVZtTnpFM1ptTXlObVF3TW1VeE55SXNJbkVpT2lKbE1qRmxNRFJtT1RFeFpERmxaRGM1T1RFd01EaGxZMkZoWWpOaVpqYzNOVGs0TkRNd09XTXpJaXdpWnlJNkltTTFNbUUwWVRCbVpqTmlOMlUyTVdaa1pqRTROamRqWlRnME1UTTRNelk1WVRZeE5UUm1OR0ZtWVRreU9UWTJaVE5qT0RJM1pUSTFZMlpoTm1ObU5UQTRZamt3WlRWa1pUUXhPV1V4TXpNM1pUQTNZVEpsT1dVeVlUTmpaRFZrWldFM01EUmtNVGMxWmpobFltWTJZV1l6T1Rka05qbGxNVEV3WWprMllXWmlNVGRqTjJFd016STFPVE15T1dVME9ESTVZakJrTUROaVltTTNPRGsyWWpFMVlqUmhaR1UxTTJVeE16QTROVGhqWXpNMFpEazJNalk1WVdFNE9UQTBNV1kwTURreE16WmpOekkwTW1Fek9EZzVOV001WkRWaVkyTmhaRFJtTXpnNVlXWXhaRGRoTkdKa01UTTVPR0prTURjeVpHWm1ZVGc1TmpJek16TTVOMkVpZlN3aWNISnBibU5wY0dGc0lqcDdJbVZ0WVdsc0lqb2liSFZyWldoQWJIVnJhM1J2Ym1VdVkyOXRJbjBzSW1saGRDSTZNVE0yTWprMk1UQTVOakV5TWl3aVpYaHdJam94TXpZeU9UWTBOamsyTVRJeUxDSnBjM01pT2lKc2IyZHBiaTV3WlhKemIyNWhMbTl5WnlKOS5mT3V5ZlZkNWFZZ285ckJncmdHVDJHYjkzUUoxVnpLSE9rNjdFUXBEeU9pUENPdXFweUw5a2tVVDdxcGNZaWZsb0NTWjlPejUtVWRrcldlcTZXUkRLcUdOeXg0OFdyVGduVkoyRlM3MU1Mbl9DeWhGMGo1Y1ZsQ0E5WWh3YVlWTHhsbW9YU01uWTdyRzFWa0VSdjRtaWtCM3FDcFB2NXJtSEswbkNiRlpiN1dXR3JkVEdkcmNHTkRkZHlDQkQ5a1dpUUdVbkktenN3WXdiZXJUTmQ3Nmc1Z2N1c1MtbWxjVk5jbzNMTG4zMlNhbGx0eDBCUHAtVTAyMXpvR00wWEhibm1Sa2VRdGVtblVXZGloYzRVbVpNREJJZ05nSFFCSmdXMGhBcTlHWVFmYzVObFNzZW5RX0p5MGR4anE1bHdEWll3SExsUXlmYnVYbGFtRTNDZ3ZkZUF+ZXlKaGJHY2lPaUpFVXpFeU9DSjkuZXlKdWIyNWpaU0k2SW1nMVVEUkxja2M0ZVc1bklpd2laV05rYUNJNmV5SjRJam9pWm1wYVRuQnpRbXBIYmw5WVFVTnRaMkpPZDBGemRuSTRPR2MwUmxkNmRHOWljWEExVkUxaVgxbEdNQ0lzSW1OeWRpSTZJbEF0TWpVMklpd2llU0k2SWxKTFJYWktlalU1WTNOaGRqaExZM2RsVlhZMVdIRkdaM1E0UVZkRFFXdHlTa0o2TTFCUWNVeEtkSE1pZlN3aVkySjBJam9pWW1sM2N5SXNJbVY0Y0NJNk1UTTJNamsyTVRJeE5qRTBPU3dpWVhWa0lqb2lkWEp1T25ndFozTnpPbWx0WVhBdmNtRnVaQzV0YVhRdVpHVXVjR0ZrYkM1amIyMGlmUS51ZHRvSTNVNUMtM3BwNHhJSloxbWstQ3o0YmhsQkxlSzAyNlVhbWRhMjhwTFk4c013Tk50Y0E=
S: + Qyx
S: +ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbmcxWXlJNld5Sk5TVWxFZW1wRFEwRnlZV2RCZDBsQ1FXZEpRa0o2UVU1Q1oydHhhR3RwUnpsM01FSkJVVlZHUVVSQ1pFMVJjM2REVVZsRVZsRlJSMFYzU2tKV1ZFVmxUVUozUjBFeFZVVkRaM2RXVlVWR1JWUkRRbFJpTWxvd1pESkdlVnBUUWxGa1NHdG5WRWhTYTAxVE5IZE1RVmxFVmxGUlJFUkRWbEZSVlZKTlNVWk9kbHB1VWpOWldFcHNTVVZPYkdOdVVuQmFiV3hxV1ZoU2NHSXlOR2RSV0ZZd1lVYzVlV0ZZVWpWTlFqUllSRlJGZWsxRVJYaE5WRUV4VFhwUmVVMUdiMWhFVkVVeVRVUkZlRTFVUVRGTmVsRjVUVVp2ZDFSRVJVeE5RV3RIUVRGVlJVSm9UVU5SVmxWNFNHcEJZMEpuVGxaQ1FXOU5SbFpDUWxKRmQyZFZNamx0WkVoa2FHTnRWV2RWU0ZJMVNVVjRNRnBFUldSTlFuTkhRVEZWUlVGM2QxVmpiVVoxV2tNMWRHRllVWFZhUjFWMVkwZEdhMkpETldwaU1qQjNaMmRGYVUxQk1FZERVM0ZIVTBsaU0wUlJSVUpCVVZWQlFUUkpRa1IzUVhkblowVkxRVzlKUWtGUlJFSm9la1p3Wmt3MmRraDRjM2d5UkhaR1dsQXJSMUl3Vlc5dFJIQXZRMFZsSzA5SVRqQmFNR00yT1RGWlp6bG5WMWh0VlROdVVIRldWR0pCU1hGWVNEaEJWWFIyWmpkTmVtSlpNamh2Vm14d1dsUXdOWHB0TW1NdmRFVXpaMnRvVkhodFdFOVNaMUZ5WTNWMVozVnFUMWhOUm1oSk5ITjJSVm9yUTJKSVVHeGFhVm92VkhwcldFeElVREk1UlhvM2QwNWFiakZJTlRkQlRIRnRVMEZ2TlZRMGNYaE5SbWRDV1hWa2R5OWFlRkJTZWtSMFZXOUpWakJ6TWpOWlp6UjRWRGxoZDBwdWNqRkhaMDFWVW1saVZVSnFSamQ1WW1OdE1FczRjMHBVSzFWSFpVSTNjbTFNYkZCM0syWkJhMDltTjFwcVdqbDBjRlJyUlUxcE9IVk1SVTF4WTNoaFIxTkJTeThyYTFjM05YRlBlR1JCUmtrNGVsbGFXRFV6WjNCbk5HMXBLMUZYWmtkWk1WcE9VVXBOZFVoSFVWaG5MM1ZtZUUxNllYaE9UalJvTVdGUGJHMWFXbGxyUWtod05USkJPWGxKVFZWaVFXZE5Ra0ZCUjJwbllXdDNaMkZaZDBOUldVUldVakJVUWtGSmQwRkVRWE5DWjJ4bmFHdG5RbWgyYUVOQlVUQkZTSGhaWkZRelFteGliRTVVVkVOQ1NGcFhOV3hqYlVZd1dsZFJaMUV5Vm5sa1IyeHRZVmRPYUdSSFZYZElVVmxFVmxJd1QwSkNXVVZHUzFOemRXSkZSSFZpVWtsSFNFTkNkSFJCYkZSMk1rWlhSMllyVFVJNFIwRXhWV1JKZDFGWlRVSmhRVVpNYVhwYWJFMVhia3RMTVZCWllXZGtTbXByVm5WU2FFVlJTbXBOUVd0SFFURlZaRVZSVVVOTlFVRjNRM2RaUkZaU01GQkNRVkZFUVdkWVowMUNUVWRCTVZWa1NsRlJUVTFCYjBkRFEzTkhRVkZWUmtKM1RVUk5RVEJIUTFOeFIxTkpZak5FVVVWQ1FsRlZRVUUwU1VKQlVVSkVNVUo2VVZBcmNrNHhWVlY2TjBFMmVpdExSRkJoY1Roek1tbENSekJHZWxwNGMxZ3lVVlZQZFhCQ1JVbGlkVnB3TUV0S1lYVnFWazFuTURGbVpHcHpkVWRITUhWWVlrMW1aVkpIZVU1c1ZYTk5UaXRhUkhrNEwwMUpUMmd4WVZWSGRqQlRWWGRMZEVOMFRIUlhja3AyTmpWMWQwaEhSM1ExZFVaTGVFMUZOakZXVkRRcmNYQkpNa0ZIY1hoNE5XUnljM2hGVEVKUFpIbFFibVYxUVdsTVVIaEdkV0pTUm0xNmRXaFdVMGszUVZCTmJEYzVUMnN6TUc5WGRXUkJORGxzVlZnNWQzb3paemx4T1haa2JEbDVhR2RsWlZWVFZYQk5hR3hhTWpSVll6bFFkVXg2Y2pFMWFqWjJOak5ZZW5KVFpGZDBUbnAyTUVZeE1HVkViRFI1VkZWT1YxTkthRGR4UW1obmNURkpiMWc1UVZCUFQzVk1ZazFPY25BMlltVkZaVzkzYURNMGNGWlhabFJoVTNoSk4yNUxOVGRyU3pKNGFGSlZORE5sZDFscU1ta3ZVM0o2T0VkelRWTTVNWFZ5TWpWSmRDSmRmUS5leUowYTNRaU9uc2lhblJwSWpvaVlXVmhlVEJIU21sNlJIZzNPVUZuTFMxWFRDMTJkelpaT1VKWWVGSjFRekZZYzFwNGNuazFNVk5WU1NJc0ltVjRjQ0k2TVRNMk1qazVOekE1T0RBd01IMHNJbVZqWkdnaU9uc2llQ0k2SWtveFNWZGlTREpCTlVNelkyaFBWVWx4YldaWWNGQmZVbEZGUlU5dFpESkZlRmh2UzNKeFVWRllURTBpTENKNUlqb2lYekpGZEhoaWVsOTJTbVZsVlZWaWVUSnlabVJsYTFSVVVGVlNjR0pIU2tnM2EzbEpWM0Z0YTBsRlp5SjlMQ0p1YjI1alpTSTZJbWcxVURSTGNrYzRlVzVuSWl3aVpYaHdJam94TXpZeU9UWTBOamsyTURBd2ZRLnFaaFVxdXBWUHgzRTdNSTBHdnNIZjZER3pzc3ByMkJsdUVUMFNwMERxdkpFS1F4S3BiOG9faVZsWHZQa2p2SXp0Qm5JajNNb084UlZMUWJwdE9QZDFrN3FoTUVwRkhOVGI1WFpKYWVJTlBpQUNSSzA5dUZpVE5ud1cxanMxQ3pPY2FMakxsSTN4bFdkLUl1em8zODhyTUxsSXVkbmkxak5uRS0yOXZfc1NUTnRxLUMwQmNoNUMwT3drbDcxQk54eHgzaFVxeEcxT0w0UHQyZ0JKWUFQX3NOVk12aDFwWDlhRzd0Vms0S2sxS2NjaXRqUFdGN0dXc3JGeld4ekRSMHU2REZ0RmFjaENPYmVmcmZnZkUxOXFlWnJLcnpJMFVkQ3JEUHpZazlYb1dKR2twRlNPd1dhY192Q0N1dXY1VjNHZF9MTlNJM3JCaS1GYWVoWUhBRjFJUQ==</artwork>
        </figure>
      </t>
      <t>
Unpacking the mail user agent's AUTHENTICATE message reveals the following:</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>n,,c,eyJhbGciOiJSUzI1NiJ9.eyJwdWJsaWMta2V5Ijp7ImFsZ29yaXRobSI6IkRTIiwieSI6IjM5MTNlODgyZDhjMzVkMjJmNmQ0MDY5Y2U2MDBkYmNjYjM5NGFjYWFhYzY0OWZkN2Y5ZmNkNmM0MTI0NmY1NjI5MGVmMGNjMzc0NzZhMDRhNDE4YzFlODMxOWI1NGIxZWNiNmY2Y2VhNzU0NGY2ZTE1NjNlZGNlZGM5MDZkNjg0M2QwMWJjZTRmN2E1ZjcwN2NmYTYwYWM5MTM2ZmFmNjJmZGFmNDhkOGE5ODlhYWFlNDQwN2VkNjcyNzdhMTc4MmVjYWExNTZiZGNhZWExNjdmMjYzNzI1ZGU2M2VkOGYyOGE2MDNiNmZmNTEwZjQ4MDJkNzRkN2VhZTdhYmMyZWIiLCJwIjoiZmY2MDA0ODNkYjZhYmZjNWI0NWVhYjc4NTk0YjM1MzNkNTUwZDlmMWJmMmE5OTJhN2E4ZGFhNmRjMzRmODA0NWFkNGU2ZTBjNDI5ZDMzNGVlZWFhZWZkN2UyM2Q0ODEwYmUwMGU0Y2MxNDkyY2JhMzI1YmE4MWZmMmQ1YTViMzA1YThkMTdlYjNiZjRhMDZhMzQ5ZDM5MmUwMGQzMjk3NDRhNTE3OTM4MDM0NGU4MmExOGM0NzkzMzQzOGY4OTFlMjJhZWVmODEyZDY5YzhmNzVlMzI2Y2I3MGVhMDAwYzNmNzc2ZGZkYmQ2MDQ2MzhjMmVmNzE3ZmMyNmQwMmUxNyIsInEiOiJlMjFlMDRmOTExZDFlZDc5OTEwMDhlY2FhYjNiZjc3NTk4NDMwOWMzIiwiZyI6ImM1MmE0YTBmZjNiN2U2MWZkZjE4NjdjZTg0MTM4MzY5YTYxNTRmNGFmYTkyOTY2ZTNjODI3ZTI1Y2ZhNmNmNTA4YjkwZTVkZTQxOWUxMzM3ZTA3YTJlOWUyYTNjZDVkZWE3MDRkMTc1ZjhlYmY2YWYzOTdkNjllMTEwYjk2YWZiMTdjN2EwMzI1OTMyOWU0ODI5YjBkMDNiYmM3ODk2YjE1YjRhZGU1M2UxMzA4NThjYzM0ZDk2MjY5YWE4OTA0MWY0MDkxMzZjNzI0MmEzODg5NWM5ZDViY2NhZDRmMzg5YWYxZDdhNGJkMTM5OGJkMDcyZGZmYTg5NjIzMzM5N2EifSwicHJpbmNpcGFsIjp7ImVtYWlsIjoibHVrZWhAbHVra3RvbmUuY29tIn0sImlhdCI6MTM2Mjk2MTA5NjEyMiwiZXhwIjoxMzYyOTY0Njk2MTIyLCJpc3MiOiJsb2dpbi5wZXJzb25hLm9yZyJ9.fOuyfVd5aYgo9rBgrgGT2Gb93QJ1VzKHOk67EQpDyOiPCOuqpyL9kkUT7qpcYifloCSZ9Oz5-UdkrWeq6WRDKqGNyx48WrTgnVJ2FS71MLn_CyhF0j5cVlCA9YhwaYVLxlmoXSMnY7rG1VkERv4mikB3qCpPv5rmHK0nCbFZb7WWGrdTGdrcGNDddyCBD9kWiQGUnI-zswYwberTNd76g5gcusS-mlcVNco3LLn32Salltx0BPp-U021zoGM0XHbnmRkeQtemnUWdihc4UmZMDBIgNgHQBJgW0hAq9GYQfc5NlSsenQ_Jy0dxjq5lwDZYwHLlQyfbuXlamE3CgvdeA~eyJhbGciOiJEUzEyOCJ9.eyJub25jZSI6Img1UDRLckc4eW5nIiwiZWNkaCI6eyJ4IjoiZmpaTnBzQmpHbl9YQUNtZ2JOd0FzdnI4OGc0Rld6dG9icXA1VE1iX1lGMCIsImNydiI6IlAtMjU2IiwieSI6IlJLRXZKejU5Y3NhdjhLY3dlVXY1WHFGZ3Q4QVdDQWtySkJ6M1BQcUxKdHMifSwiY2J0IjoiYml3cyIsImV4cCI6MTM2Mjk2MTIxNjE0OSwiYXVkIjoidXJuOngtZ3NzOmltYXAvcmFuZC5taXQuZGUucGFkbC5jb20ifQ.udtoI3U5C-3pp4xIJZ1mk-Cz4bhlBLeK026Uamda28pLY8sMwNNtcA</artwork>
        </figure>
      </t>
      <t>
The initial “n,,” is the GS2 header (indicating that there are no channel bindings). The “c,” denotes the token as being a BrowserID initial context token. The remaining base64 URL encoded data is a BrowserID backed assertion, containing the following certificate (for clarity, the payload has been reformatted and JWT header and signature omitted):</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>{
    "public-key": {
        "algorithm": "DS",
"y":"3913e882d8c35d22f6d4069ce600dbccb394acaaac649fd7f9fcd6c41246f56290ef0cc37476a04a418c1e8319b54b1ecb6f6cea7544f6e1563edcedc906d6843d01bce4f7a5f707cfa60ac9136faf62fdaf48d8a989aaae4407ed67277a1782ecaa156bdcaea167f263725de63ed8f28a603b6ff510f4802d74d7eae7abc2eb",
"p":"ff600483db6abfc5b45eab78594b3533d550d9f1bf2a992a7a8daa6dc34f8045ad4e6e0c429d334eeeaaefd7e23d4810be00e4cc1492cba325ba81ff2d5a5b305a8d17eb3bf4a06a349d392e00d329744a5179380344e82a18c47933438f891e22aeef812d69c8f75e326cb70ea000c3f776dfdbd604638c2ef717fc26d02e17",
"q":"e21e04f911d1ed7991008ecaab3bf775984309c3",
"g":"c52a4a0ff3b7e61fdf1867ce84138369a6154f4afa92966e3c827e25cfa6cf508b90e5de419e1337e07a2e9e2a3cd5dea704d175f8ebf6af397d69e110b96afb17c7a03259329e4829b0d03bbc7896b15b4ade53e130858cc34d96269aa89041f409136c7242a38895c9d5bccad4f389af1d7a4bd1398bd072dffa896233397a"
    },
    "principal": {
        "email": "lukeh@lukktone.com"
    },
    "iat": 1362961096122,
    "exp": 1362964696122,
    "iss": "login.persona.org"
}</artwork>
        </figure>
      </t>
      <t>
and assertion:</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>{
    "nonce": "h5P4KrG8yng",
    "ecdh": {
        "x": "fjZNpsBjGn_XACmgbNwAsvr88g4FWztobqp5TMb_YF0",
        "crv": "P-256",
        "y": "RKEvJz59csav8KcweUv5XqFgt8AWCAkrJBz3PPqLJts"
    },
    "cbt": "biws",
    "exp": 1362961216149,
    "aud": "urn:x-gss:imap/rand.mit.de.padl.com"
}</artwork>
        </figure>
      </t>
      <t>
Note the channel binding token that protects the GS2 header.</t>
      <t>
Turning to the response backed assertion sent from the IMAP server to the mail user agent, we have the following after base64 decoding:</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlEempDQ0FyYWdBd0lCQWdJQkJ6QU5CZ2txaGtpRzl3MEJBUVVGQURCZE1Rc3dDUVlEVlFRR0V3SkJWVEVlTUJ3R0ExVUVDZ3dWVUVGRVRDQlRiMlowZDJGeVpTQlFkSGtnVEhSa01TNHdMQVlEVlFRRERDVlFRVVJNSUZOdlpuUjNZWEpsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNQjRYRFRFek1ERXhNVEExTXpReU1Gb1hEVEUyTURFeE1UQTFNelF5TUZvd1RERUxNQWtHQTFVRUJoTUNRVlV4SGpBY0JnTlZCQW9NRlZCQlJFd2dVMjltZEhkaGNtVWdVSFI1SUV4MFpERWRNQnNHQTFVRUF3d1VjbUZ1WkM1dGFYUXVaR1V1Y0dGa2JDNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREJoekZwZkw2dkh4c3gyRHZGWlArR1IwVW9tRHAvQ0VlK09ITjBaMGM2OTFZZzlnV1htVTNuUHFWVGJBSXFYSDhBVXR2ZjdNemJZMjhvVmxwWlQwNXptMmMvdEUzZ2toVHhtWE9SZ1FyY3V1Z3VqT1hNRmhJNHN2RVorQ2JIUGxaaVovVHprWExIUDI5RXo3d05abjFINTdBTHFtU0FvNVQ0cXhNRmdCWXVkdy9aeFBSekR0VW9JVjBzMjNZZzR4VDlhd0pucjFHZ01VUmliVUJqRjd5YmNtMEs4c0pUK1VHZUI3cm1MbFB3K2ZBa09mN1pqWjl0cFRrRU1pOHVMRU1xY3hhR1NBSy8ra1c3NXFPeGRBRkk4ellaWDUzZ3BnNG1pK1FXZkdZMVpOUUpNdUhHUVhnL3VmeE16YXhOTjRoMWFPbG1aWllrQkhwNTJBOXlJTVViQWdNQkFBR2pnYWt3Z2FZd0NRWURWUjBUQkFJd0FEQXNCZ2xnaGtnQmh2aENBUTBFSHhZZFQzQmxibE5UVENCSFpXNWxjbUYwWldRZ1EyVnlkR2xtYVdOaGRHVXdIUVlEVlIwT0JCWUVGS1NzdWJFRHViUklHSENCdHRBbFR2MkZXR2YrTUI4R0ExVWRJd1FZTUJhQUZMaXpabE1XbktLMVBZYWdkSmprVnVSaEVRSmpNQWtHQTFVZEVRUUNNQUF3Q3dZRFZSMFBCQVFEQWdYZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TURNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUJEMUJ6UVArck4xVVV6N0E2eitLRFBhcThzMmlCRzBGelp4c1gyUVVPdXBCRUlidVpwMEtKYXVqVk1nMDFmZGpzdUdHMHVYYk1mZVJHeU5sVXNNTitaRHk4L01JT2gxYVVHdjBTVXdLdEN0THRXckp2NjV1d0hHR3Q1dUZLeE1FNjFWVDQrcXBJMkFHcXh4NWRyc3hFTEJPZHlQbmV1QWlMUHhGdWJSRm16dWhWU0k3QVBNbDc5T2szMG9XdWRBNDlsVVg5d3ozZzlxOXZkbDl5aGdlZVVTVXBNaGxaMjRVYzlQdUx6cjE1ajZ2NjNYenJTZFd0Tnp2MEYxMGVEbDR5VFVOV1NKaDdxQmhncTFJb1g5QVBPT3VMYk1OcnA2YmVFZW93aDM0cFZXZlRhU3hJN25LNTdrSzJ4aFJVNDNld1lqMmkvU3J6OEdzTVM5MXVyMjVJdCJdfQ.eyJ0a3QiOnsianRpIjoiYWVheTBHSml6RHg3OUFnLS1XTC12dzZZOUJYeFJ1QzFYc1p4cnk1MVNVSSIsImV4cCI6MTM2Mjk5NzA5ODAwMH0sImVjZGgiOnsieCI6IkoxSVdiSDJBNUMzY2hPVUlxbWZYcFBfUlFFRU9tZDJFeFhvS3JxUVFYTE0iLCJ5IjoiXzJFdHhiel92SmVlVVVieTJyZmRla1RUUFVScGJHSkg3a3lJV3Fta0lFZyJ9LCJub25jZSI6Img1UDRLckc4eW5nIiwiZXhwIjoxMzYyOTY0Njk2MDAwfQ.qZhUqupVPx3E7MI0GvsHf6DGzsspr2BluET0Sp0DqvJEKQxKpb8o_iVlXvPkjvIztBnIj3MoO8RVLQbptOPd1k7qhMEpFHNTb5XZJaeINPiACRK09uFiTNnwW1js1CzOcaLjLlI3xlWd-Iuzo388rMLlIudni1jNnE-29v_sSTNtq-C0Bch5C0Owkl71BNxxx3hUqxG1OL4Pt2gBJYAP_sNVMvh1pX9aG7tVk4Kk1KccitjPWF7GWsrFzWxzDR0u6DFtFachCObefrfgfE19qeZrKrzI0UdCrDPzYk9XoWJGkpFSOwWac_vCCuuv5V3Gd_LNSI3rBi-FaehYHAF1IQ</artwork>
        </figure>
      </t>
      <t>
Here we show the JWT header for the response assertion, as it includes an ASN.1 encoded X.509 certificate, which is used to mutually authenticate the IMAP server to the UA:</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>{
    "alg":"RS256",
"x5c":["MIIDzjCCAragAwIBAgIBBzANBgkqhkiG9w0BAQUFADBdMQswCQYDVQQGEwJBVTEeMBwGA1UECgwVUEFETCBTb2Z0d2FyZSBQdHkgTHRkMS4wLAYDVQQDDCVQQURMIFNvZnR3YXJlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTEzMDExMTA1MzQyMFoXDTE2MDExMTA1MzQyMFowTDELMAkGA1UEBhMCQVUxHjAcBgNVBAoMFVBBREwgU29mdHdhcmUgUHR5IEx0ZDEdMBsGA1UEAwwUcmFuZC5taXQuZGUucGFkbC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBhzFpfL6vHxsx2DvFZP+GR0UomDp/CEe+OHN0Z0c691Yg9gWXmU3nPqVTbAIqXH8AUtvf7MzbY28oVlpZT05zm2c/tE3gkhTxmXORgQrcuugujOXMFhI4svEZ+CbHPlZiZ/TzkXLHP29Ez7wNZn1H57ALqmSAo5T4qxMFgBYudw/ZxPRzDtUoIV0s23Yg4xT9awJnr1GgMURibUBjF7ybcm0K8sJT+UGeB7rmLlPw+fAkOf7ZjZ9tpTkEMi8uLEMqcxaGSAK/+kW75qOxdAFI8zYZX53gpg4mi+QWfGY1ZNQJMuHGQXg/ufxMzaxNN4h1aOlmZZYkBHp52A9yIMUbAgMBAAGjgakwgaYwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFKSsubEDubRIGHCBttAlTv2FWGf+MB8GA1UdIwQYMBaAFLizZlMWnKK1PYagdJjkVuRhEQJjMAkGA1UdEQQCMAAwCwYDVR0PBAQDAgXgMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA0GCSqGSIb3DQEBBQUAA4IBAQBD1BzQP+rN1UUz7A6z+KDPaq8s2iBG0FzZxsX2QUOupBEIbuZp0KJaujVMg01fdjsuGG0uXbMfeRGyNlUsMN+ZDy8/MIOh1aUGv0SUwKtCtLtWrJv65uwHGGt5uFKxME61VT4+qpI2AGqxx5drsxELBOdyPneuAiLPxFubRFmzuhVSI7APMl79Ok30oWudA49lUX9wz3g9q9vdl9yhgeeUSUpMhlZ24Uc9PuLzr15j6v63XzrSdWtNzv0F10eDl4yTUNWSJh7qBhgq1IoX9APOOuLbMNrp6beEeowh34pVWfTaSxI7nK57kK2xhRU43ewYj2i/Srz8GsMS91ur25It"]
}</artwork>
        </figure>
      </t>
      <t>
The assertion payload is below (again, for clarity the actual JWT signature has been omitted):</t>
      <t>
</t>
      <t>
        <figure suppress-title="" align="">
          <artwork>{
    "tkt": {
        "jti": "aeay0GJizDx79Ag--WL-vw6Y9BXxRuC1XsZxry51SUI",
        "exp": 1362997098000
    },
    "ecdh": {
        "x": "J1IWbH2A5C3chOUIqmfXpP_RQEEOmd2ExXoKrqQQXLM",
        "y": "_2Etxbz_vJeeUUby2rfdekTTPURpbGJH7kyIWqmkIEg"
    },
    "nonce": "h5P4KrG8yng",
    "exp": 1362964696000
}</artwork>
        </figure>
      </t>
      <t>
Note the fast re-authentication ticket and the nonce echoed back from the initiator.</t>
    </section>
    <section title="Security Considerations" anchor="d1e1953">
      <t>
This section only addresses security considerations associated with BrowserID and SASL and GSS-API.</t>
      <section title="JavaScript" anchor="d1e1962">
        <t>
There are security issues associated with the use of JavaScript for cryptography.</t>
      </section>
      <section title="Host certificates for mutual authentication" anchor="d1e1971">
        <t>
Allowing a match on only the DNS subjectAltName in an acceptor's X.509 certificate permits different services on the same host to impersonate each other.</t>
      </section>
    </section>
    <section title="IANA Considerations" anchor="d1e1980">
      <t>
This specification creates a number of IANA registries.</t>
      <section title="OID Registry" anchor="sub_OID_Registry">
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID (1.3.6.1.4.1.5322.24)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
Reserved</c>
          <c>
Reserved</c>
          <c>
1</c>
          <c>
mechanisms</c>
          <c>
A sub-arc containing BrowserID mechanisms</c>
          <c>
2</c>
          <c>
nametypes</c>
          <c>
A sub-arc containing BrowserID name types</c>
        </texttable>
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.mechanisms (1.3.6.1.4.1.5322.24.1)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
gss-browserid-null</c>
          <c>
The NULL security mechanism</c>
          <c>
17</c>
          <c>
gss-browserid-aes128</c>
          <c>
The aes128-cts-hmac-sha1-96 mechanism</c>
          <c>
18</c>
          <c>
gss-browserid-aes256</c>
          <c>
The aes256-cts-hmac-sha1-96 mechanism</c>
        </texttable>
        <t>
</t>
        <t>
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.nametypes (1.3.6.1.4.1.5322.24.2)</t>
        <texttable>
          <ttcol align="center">
Decimal</ttcol>
          <ttcol align="center">
Name</ttcol>
          <ttcol align="center">
Description</ttcol>
          <c>
0</c>
          <c>
Reserved</c>
          <c>
Reserved</c>
          <c>
1</c>
          <c>
GSS_C_NT_BROWSERID_PRINCIPAL</c>
          <c>
3.1.1</c>
        </texttable>
      </section>
      <section title="SASL Registry" anchor="d1e2208">
        <t>
Subject: Registration of SASL mechanisms BROWSERID-AES128 and BROWSERID-AES128-PLUS</t>
        <t>
</t>
        <t>
SASL mechanism names: BROWSERID-AES128 and BROWSERID-AES128-PLUS</t>
        <t>
</t>
        <t>
Security considerations: See RFC 5801 and draft-howard-gss-browserid</t>
        <t>
</t>
        <t>
Published specification (recommended): draft-howard-gss-browserid</t>
        <t>
</t>
        <t>
Person &amp; email address to contact for further information:</t>
        <t>
Luke Howard lukeh@padl.com</t>
        <t>
</t>
        <t>
Intended usage: common</t>
        <t>
</t>
        <t>
Owner/Change controller: iesg@ietf.org</t>
        <t>
</t>
        <t>
Note: This mechanism describes the GSS BrowserID mechanism used with the aes128-cts-hmac-sha1-96 enctype. The GSS-API OID for this mechanism is 1.3.6.1.4.1.5322.24.1.17. As described in RFC 5801 a PLUS variant of this mechanism is also required.</t>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">&RFC2743;
&RFC3961;
&RFC4402;
&RFC4121;
&RFC4178;
&RFC4422;
&RFC5178;
&RFC5801;
&RFC5929;
&JWA;
&JWS;
&JWT;
&NegoEx;

<reference anchor="RFC2119"><front><title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title><author initials="S." surname="Bradner" fullname="Scott Bradner"><organization>Harvard University</organization><address><postal><street>1350 Mass. Ave.</street><street>Cambridge</street><street>MA 02138</street></postal><phone>- +1 617 495 3864</phone><email>sob@harvard.edu</email></address></author><date year="1997" month="March"/><area>General</area><keyword>keyword</keyword><abstract><t> In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. Authors who follow these guidelines should incorporate this phrase near the beginning of their document: <list><t> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. </t></list>
</t><t> Note that the force of these words is modified by the requirement level of the document in which they are used. </t></abstract></front><seriesInfo name="BCP" value="14"/><seriesInfo name="RFC" value="2119"/><format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/><format type="HTML" octets="17970" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/><format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/></reference> 
<reference anchor="RFC1113"><front><title abbrev="Mail Privacy: Procedures">Privacy enhancement for Internet electronic mail: Part I - message encipherment and authentication procedures</title><author initials="J." surname="Linn" fullname="John Linn"><organization>Digital Equipment Corporation (DEC), Secure Systems</organization><address><postal><street>85 Swanson Road</street><street>BXB1-2/D04</street><city>Boxborough</city><region>MA</region><code>01719-1326</code><country>US</country></postal><phone>+1 508 264 5491</phone><email>Linn@ultra.enet.dec.com</email></address></author><date year="1989" day="1" month="August"/></front><seriesInfo name="RFC" value="1113"/><format type="TXT" octets="89293" target="http://www.rfc-editor.org/rfc/rfc1113.txt"/></reference> </references>
    <references title="Informative References">&RFC4120;</references>
  </back>
</rfc>
