#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A SASL and GSS-API Mechanism for the BrowserID Authentication Protocol
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-howard-gss-browserid-01.txt
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
exp
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
BrowserID SASL & GSS-API
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Luke Howard 
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
PADL Software
\end_layout

\end_inset

 
\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
PADL
\end_layout

\end_inset

 
\begin_inset Flex AuthorInitials
status open

\begin_layout Plain Layout
L.
\end_layout

\end_inset

 
\begin_inset Flex AuthorSurname
status open

\begin_layout Plain Layout
Howard
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrStreet
status open

\begin_layout Plain Layout
PO Box 59
\end_layout

\end_inset


\begin_inset Flex AuthorAddrCity
status open

\begin_layout Plain Layout
Central Park
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrRegion
status open

\begin_layout Plain Layout
VIC
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrCountry
status open

\begin_layout Plain Layout
Australia
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrCode
status open

\begin_layout Plain Layout
3145
\end_layout

\end_inset

 
\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
lukeh@padl.com
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams 
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset

 
\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset

 
\begin_inset Flex AuthorInitials
status open

\begin_layout Plain Layout
N.
\end_layout

\end_inset


\begin_inset Flex AuthorSurname
status open

\begin_layout Plain Layout
Williams
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document defines protocols, procedures and conventions for a Generic
 Security Service Application Program Interface (GSS-API) security mechanism
 based on the BrowserID authentication mechanism.
 Through the GS2 family of mechanisms defined in RFC 5801, these protocols
 also define how Simple Authentication and Security Layer (SASL, RFC 4422)
 applications may use BrowserID.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
BrowserID
\end_layout

\end_inset

 is a web-based three-party security protocol by which user agents can present
 to a Relying Party (RP) a signed assertion of e-mail address ownership.
 BrowserID was intended to be used for web authentication.
 We find BrowserID to be useful in general, therefore we define herein how
 to use it in many more applications.
\end_layout

\begin_layout Standard
The Simple Authentication and Security Layer (SASL) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

 is a framework for providing authentication and message protection services
 via pluggable mechanisms.
 Protocols that support it include IMAP, SMTP, and XMPP.
\end_layout

\begin_layout Standard
The Generic Security Service Application Program Interface (GSS-API) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 provides a framework for authentication and message protection services
 through a common programming interface.
 This document conforms to the SASL and GSS-API bridge specified in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5801
\end_layout

\end_inset

, so it defines both a SASL and GSS-API mechanism.
\end_layout

\begin_layout Standard
The BrowserID mechanism described in this document reuses the existing web-based
 BrowserID protocol, but profiles it for use in applications that support
 SASL or GSS-API, adding features such as key agreement, mutual authentication,
 and fast re-authentication.
\end_layout

\begin_layout Standard
The following diagram illustrates the interactions between the three parties
 in the GSS BrowserID protocol.
 Note that the terms client, initiator and user agent (UA) are used interchangea
bly in this document, as are server, acceptor and relying party (RP).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

                    +------------------+
\end_layout

\begin_layout Plain Layout

                    | BrowserID  |
\end_layout

\begin_layout Plain Layout

                    | identity   |
\end_layout

\begin_layout Plain Layout

                    | provider   |
\end_layout

\begin_layout Plain Layout

                    +------------------+
\end_layout

\begin_layout Plain Layout

                      //      
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                     //        
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    //          
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                   //            
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

   make signed    //              
\backslash

\backslash
    fetch IdP public
\end_layout

\begin_layout Plain Layout

   certificate   //                
\backslash

\backslash
   key over HTTPS
\end_layout

\begin_layout Plain Layout

   for user's   //                  
\backslash

\backslash
  (RP may cache)
\end_layout

\begin_layout Plain Layout

   public key  //                    
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

              //                      
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

             //                        
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

            //                          
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

           |/                            
\backslash
|
\end_layout

\begin_layout Plain Layout

    +-------------------+                     +-------------------+
\end_layout

\begin_layout Plain Layout

    | SASL or GSS |    GSS BrowserID    | SASL or GSS |
\end_layout

\begin_layout Plain Layout

    | client/UA   |<---------------------------->| server/RP   |
\end_layout

\begin_layout Plain Layout

    | (initiator) |                     | (acceptor)  |
\end_layout

\begin_layout Plain Layout

    +-------------------+                     +-------------------+
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Interworking Architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Discovery and Negotiation
\end_layout

\begin_layout Standard
The means of discovering GSS-API peers and their supported mechanisms is
 out of this specification's scope.
 They may use SASL 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

 or the Simple and Protected Negotiation mechanism (SPNEGO) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4178
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Discovery of a BrowserID identity provider (IdP) for a user is described
 in the BrowserID specification.
 A domain publishes a document containing their public key and URIs for
 authenticating and provisioning users, or pointer to an authority containing
 such a document.
\end_layout

\begin_layout Subsection
Authentication
\end_layout

\begin_layout Standard
The GSS-API protocol involves a client, known as the initiator, sending
 an initial security context token of a chosen GSS-API security mechanism
 to a peer, known as the acceptor.
 The two peers subsequently exchange, synchronously, as many security context
 tokens as necessary to complete the authentication or fail.
 The specific number of context tokens exchanged varies by security mechanism:
 in the case of the BrowserID mechanism, it is typically two (i.e.
 a single round trip), however it can be more in some cases.
 Once authentication is complete, the initiator and acceptor share a security
 context which identifies the peers and can optionally be used for integrity
 or confidentiality protecting subsequent application messages.
\end_layout

\begin_layout Standard
The original BrowserID protocol, as defined outside this document, specifies
 a bearer token authentication protocol for web applications.
 The user agent generates a short-term key pair, the public key of which
 is signed by the user's IdP.
 (The user must have already authenticated to the IdP; how this is done
 is not specified by BrowserID, but forms-based authentication is common.)
 The IdP returns a certificate for the user which may be cached by the user's
 browser.
 When authenticating to a Relying Party (RP), the browser generates an identity
 assertion containing the RP domain and an expiration time.
 The user agent signs this and presents both the assertion and certificate
 to the RP.
 (The combination of an assertion and zero or more certificates is termed
 a 
\begin_inset Quotes eld
\end_inset

backed assertion
\begin_inset Quotes erd
\end_inset

.) The RP fetches the public key for the IdP, validates the user's certificate
 (and those of any intermediate certifying parties) and then verifies the
 assertion.
\end_layout

\begin_layout Standard
The GSS BrowserID protocol extends this by having the RP always send back
 a response to the user agent, which at a minimum provides key confirmation
 (this is needed for some key agreement methods) and indicates the lifetime
 of the established security context.
 The key confirmation token is also required for mutual authentication,
 when the initiator application requests that feature.
\end_layout

\begin_layout Subsection
Message protection services
\end_layout

\begin_layout Standard
GSS-API provides a number of a message protection services:
\end_layout

\begin_layout Description
GSS_Wrap() integrity and optional confidentiality for a message
\end_layout

\begin_layout Description
GSS_GetMIC() integrity for a message sent separately
\end_layout

\begin_layout Description
GSS_Pseudo_random() shared key derivation (e.g., for keying external confidentiali
ty+integrity layers)
\end_layout

\begin_layout Standard
These services may be used with security contexts that have a shared session
 key, to protect application-layer messages.
\end_layout

\begin_layout Section
Requirements notation
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The reader is assumed to be familiar with the terms used in the BrowserID
 specification.
\end_layout

\begin_layout Section
Naming
\end_layout

\begin_layout Standard
The GSS-API provides a rich security principal naming model.
 At its most basic the query forms of names consist of a user-entered/displayabl
e string and a 
\begin_inset Quotes eld
\end_inset

name-type
\begin_inset Quotes erd
\end_inset

.
 Name-types are constants with names prefixed with 
\begin_inset Quotes eld
\end_inset

GSS_C_NT_
\begin_inset Quotes erd
\end_inset

 in the GSS-API.
 Names may also have attributes 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
GSS name types
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:GSS_C_NT_BROWSERID_PRINCIPAL"

\end_inset

GSS_C_NT_BROWSERID_PRINCIPAL
\end_layout

\begin_layout Standard
This name may contain an e-mail address, or a service principal name identifying
 an acceptor.
 The encoding of service principal names is intended to be somewhat compatible
 with the Kerberos 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 security protocol (without the realm name).
\end_layout

\begin_layout Standard
The following ABNF defines the 'name' rule that names of this type must
 match.
 [XXX Should we reference RFC2822 here? The Mozilla BrowserID docs sure
 don't...
 -Nico]
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 char-normal = %x00-2E/%x30-3F/%x41-5B/%x5D-FF
\end_layout

\begin_layout Plain Layout

 char-escaped = "
\backslash
" %x2F / "
\backslash
" %x40 / "
\backslash
" %x5C
\end_layout

\begin_layout Plain Layout

 name-char = char-normal / char-escaped name-string = 1*name-char
\end_layout

\begin_layout Plain Layout

 user = name-string
\end_layout

\begin_layout Plain Layout

 domain = name-string
\end_layout

\begin_layout Plain Layout

 email = user "@" domain
\end_layout

\begin_layout Plain Layout

 service-name = name-string
\end_layout

\begin_layout Plain Layout

 service-host = name-string
\end_layout

\begin_layout Plain Layout

 service-specific = name-string
\end_layout

\begin_layout Plain Layout

 service-specifics = service-specific 0*("/" service-specifics)
\end_layout

\begin_layout Plain Layout

 spn = service-name ["/" service-host [ "/" service-specifics]]
\end_layout

\begin_layout Plain Layout

 name = email / spn
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
GSS_C_NT_USER_NAME
\end_layout

\begin_layout Standard
This name is implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.
 A default domain may be appended when importing names of this type.
\end_layout

\begin_layout Subsubsection
GSS_C_NT_HOSTBASED_SERVICE
\end_layout

\begin_layout Standard
This name is transformed by replacing the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 symbol with a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

, and then implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.
\end_layout

\begin_layout Subsubsection
GSS_C_NT_DOMAINBASED_SERVICE
\end_layout

\begin_layout Standard
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5178
\end_layout

\end_inset

 domain-based service names are transformed into a GSS_C_NT_BROWSERID_PRINCIPAL
 as follows:
\end_layout

\begin_layout Itemize
the <service> name becomes the first component of the BrowserID principal
 name (service-name in ABNF)
\end_layout

\begin_layout Itemize
the <hostname> becomes the second component (service-host)
\end_layout

\begin_layout Itemize
the <domain> name becomes the third component (service-specific)
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Audience-encoding"

\end_inset

Audience encoding
\end_layout

\begin_layout Standard
A GSS-API service name is encoded into a BrowserID audience URL with the
 following syntax, where spn is defined above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 audience = "urn:x-gss:" spn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
[XXX can we request assignment of a URN?]
\end_layout

\begin_layout Subsection
Name canonicalization
\end_layout

\begin_layout Standard
The BrowserID GSS-API mechanism performs no name canonicalization.
 The mechanism's GSS_Canonicalize_name() returns an MN whose display form
 is the same as the query form.
 Of course, the principal named obtained from a CREDENTIAL HANDLE may be
 canonical in that the IdP might only issue credentials for canonical names,
 but credential acquisition is out of scope here.
\end_layout

\begin_layout Subsection
Exported name token format
\end_layout

\begin_layout Standard
The exported name token format for the BrowserID GSS-API mechanism is the
 same as the query form, plus the standard exported name token format header
 mandated by the GSS-API 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Naming extensions
\end_layout

\begin_layout Standard
The acceptor MAY surface attributes from the assertion and any certificates
 using GSS_Get_name_attribute() (see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset

).
 The URN prefix is "urn:<TBD>:params:gss:jwt".
 If a SAML assertion is present in the "saml" parameter of the leaf certificate,
 it may be surfaced using the URN prefix "urn:<TBD>:params:gss:federated-saml-at
tribute".
\end_layout

\begin_layout Standard
Attributes from the assertion MUST be marked as unauthenticated unless otherwise
 validated by the acceptor (e.g.
 the audience).
\end_layout

\begin_layout Standard
Attributes from certificates SHOULD be marked as authenticated.
\end_layout

\begin_layout Section
Context tokens
\end_layout

\begin_layout Standard
All context tokens include a two-byte token identifier followed by a backed
 BrowserID assertion.
 This document defines the following token IDs:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Section
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Token ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Initial-context-token"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x632C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initiator context token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Acceptor-context-token"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x432C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acceptor context token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TBD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x442C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Context deletion token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:NegoEx"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x6D2C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initiator metadata token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:NegoEx"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x4D2C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acceptor metadata token
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The token ID has a human-readable ASCII encoding for the benefit of pure
 SASL implementations of this mechanism.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Initial-context-token"

\end_inset

Initial context token
\end_layout

\begin_layout Standard
The initial context token is framed per Section 1 of 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 GSS-API DEFINITIONS ::=         
\end_layout

\begin_layout Plain Layout

     BEGIN
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     MechType ::= OBJECT IDENTIFIER
\end_layout

\begin_layout Plain Layout

     -- representing BrowserID mechanism
\end_layout

\begin_layout Plain Layout

     GSSAPI-Token ::=
\end_layout

\begin_layout Plain Layout

     [APPLICATION 0] IMPLICIT SEQUENCE {
\end_layout

\begin_layout Plain Layout

         thisMech MechType,
\end_layout

\begin_layout Plain Layout

         innerToken ANY DEFINED BY thisMech
\end_layout

\begin_layout Plain Layout

             -- token ID and backed assertion
\end_layout

\begin_layout Plain Layout

     }
\end_layout

\begin_layout Plain Layout

     END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unlike many other GSS-API mechanisms such as Kerberos, this token framing
 is not used by subsequent context or 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.zhu-negoex
\end_layout

\end_inset

 metadata tokens.
 As such, pure SASL implementations of this mechanism do not need to deal
 with DER encoding the mechanism object identifier.
\end_layout

\begin_layout Standard
GSS BrowserID is a family of mechanisms, where the last element in the OID
 arc indicates the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 encryption type supported for message protection services.
 The OID prefix is 1.3.6.1.4.1.5322.24.1.
 The NULL encryption type is valid, in which case key confirmation and message
 protection services are not provided.
\end_layout

\begin_layout Standard
The innerToken consists of the initiator context token ID concatenated with
 a backed assertion for the audience corresponding to the target name passed
 into GSS_Init_sec_context().
 In addition, the assertion may contain the additional claims, which are
 described later in this document:
\end_layout

\begin_layout Itemize
ECDH key agreement parameters (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-ecdh"

\end_inset

)
\end_layout

\begin_layout Itemize
Channel binding information (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-cbt"

\end_inset

)
\end_layout

\begin_layout Itemize
A nonce for binding the request to a response signed with a private key
 for mutual authentication (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-nonce"

\end_inset

)
\end_layout

\begin_layout Itemize
A ticket identifier for fast re-authentication using an established session
 key rather than a BrowserID certificate (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-tkt"

\end_inset

)
\end_layout

\begin_layout Standard
The call to GSS_Init_sec_context() returns GSS_C_CONTINUE_NEEDED to indicate
 that a subsequent context token from the acceptor is expected.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Acceptor-context-token"

\end_inset

Acceptor context token
\end_layout

\begin_layout Standard
Upon receiving a context token from the initiator, the acceptor validates
 that the token is well formed and contains a valid BrowserID mechanism
 OID and the initiator context token ID.
\end_layout

\begin_layout Standard
The acceptor then verifies the backed identity assertion per the BrowserID
 specification.
 This includes validating the expiry times, audience, certificate chain,
 and assertion signature.
 The acceptor then verifies the channel binding token, if present, and any
 other GSS-specific claims in the assertion.
 In case of failure, a response assertion containing GSS major and minor
 status codes is returned.
\end_layout

\begin_layout Standard
If the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

 encryption type for the selected mechanism is not ENCTYPE_NULL, the acceptor
 generates a ECDH public key using the parameters received from the client
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:response-ecdh"

\end_inset

), and from it derives the RP Response Key (RRK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-RRK"

\end_inset

).
 The acceptor then generates a response assertion containing its ECDH public
 key and context expiration time (note that the context expiration time
 is a purely informational quantity).
 The response assertion is signed using the RP Response Key (RRK) unless
 mutual authentication is desired, in which case it may be signed in the
 acceptor's private key (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Extensions-for-mutual"

\end_inset

).
\end_layout

\begin_layout Standard
The response assertion is encoded as a backed assertion, prefixed with the
 acceptor context token ID.
 It will typically have a certificate count of zero, because the signing
 key is the symmetric RRK, or because an X.509 certificate is included directly
 in the assertion's JWT header.
\end_layout

\begin_layout Standard
Finally, the Context Root Key (CRK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-CRK"

\end_inset

) is derived from the ECDH shared secret (if present) and GSS_S_COMPLETE
 is returned, along with the initiator name from the verified assertion.
 Other assertion/certificate properties MAY be made available via GSS_Get_name_a
ttribute().
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Initiator-context-completion"

\end_inset

Initiator context completion
\end_layout

\begin_layout Standard
Upon receiving the acceptor context token, the initiator unpacks the response
 assertion and, if applicable, computes the ECDH shared secret and RRK.
 The RRK is used to verify the response assertion unless mutual authentication
 is available, in which case the acceptor's public key will be used.
\end_layout

\begin_layout Standard
The initiator sets the context expiry time with that received in the response
 assertion, if present; otherwise, the context expires when the user's certifica
te expires.
\end_layout

\begin_layout Standard
The CRK is derived from the ECDH shared secret and GSS_S_COMPLETE is returned
 to indicate the user is authenticated and the context is ready for use.
 No output token is emitted.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Extensions-for-mutual"

\end_inset

Mutual authentication
\end_layout

\begin_layout Standard
Mutual authentication allows the acceptor to be authenticated to the initiator.
 The mechanism SHALL set the returned mutual_state flag (GSS_C_MUTUAL_FLAG)
 to TRUE if mutual authentication succeeded.
 Support for mutual authentication is OPTIONAL.
\end_layout

\begin_layout Standard
The base protocol is extended as follows to support this:
\end_layout

\begin_layout Subsubsection
Initiator mutual authentication context token
\end_layout

\begin_layout Standard
If the initiator requested the mutual_state flag, a nonce (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-nonce"

\end_inset

) is included in the assertion to bind the initiator and acceptor tokens.
 The presence of a nonce in a certificate-signed assertion indicates that
 mutual authentication is desired.
\end_layout

\begin_layout Subsubsection
Acceptor mutual authentication context token
\end_layout

\begin_layout Standard
If the acceptor has a private key and certificate available and received
 a nonce in the initiator assertion, it signs the response using a private
 key rather than the RP Response Key (RRK).
 The response includes the nonce from the initiator's assertion, to bind
 the two.
\end_layout

\begin_layout Standard
While the response is a backed assertion, in order to take advantage of
 existing keying infrastructures BrowserID certificates SHOULD NOT be included
 in the backed assertion.
 Instead, an X.509 certificate SHOULD be included as a value for the "x5c"
 header property in the assertion (see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.ietf-jose-json-web-signature
\end_layout

\end_inset

 4.1.6).
\end_layout

\begin_layout Standard
[XXX should we allow both BrowserID and X.509 certificates?]
\end_layout

\begin_layout Subsubsection
Initiator mutual authentication context completion
\end_layout

\begin_layout Standard
The initiator verifies the assertion signature and that the nonce matches,
 and validates the certificate chain.
 For X.509 certificate chains, trust anchors SHOULD be configurable both
 system-wide and specifically for the BrowserID mechanism.
\end_layout

\begin_layout Standard
If X.509 certificates are used, then either the audience URI must be present
 in the URI subjectAltName, or the host component must be present as a value
 for the DNS subjectAltName or as the least significant Common Name RDN.
\end_layout

\begin_layout Standard
If BrowserID certificates are used, then either the audience URI must match
 the "uri" property of the "principal" object in the certificate, or the
 host component must match the "hostname" property.
\end_layout

\begin_layout Standard
[XXX when using X.509 certificates, do we need to say anything about certificate
 usage?]
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:NegoEx"

\end_inset

Acceptor certificate advertisement
\end_layout

\begin_layout Standard
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.zhu-negoex
\end_layout

\end_inset

 may be used to advertise acceptor certificates.
\end_layout

\begin_layout Standard
If the acceptor supports mutual authentication, it MAY include its certificate
 and any additional certificates inside a backed assertion with an empty
 payload as output for GSS_Query_meta_data().
 The "assertion" is prefixed with the two byte token identifier 
\begin_inset Quotes eld
\end_inset

M,
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Upon receiving this, the initiator MAY validate the certificate or fingerprint,
 or present either to the user before committing to authenticate.
\end_layout

\begin_layout Standard
The NegoEx signing key is the output of GSS_Pseudo_random() (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:GSS-PRF"

\end_inset

) with an input of GSS_C_PRF_KEY_FULL and "gss-browserid-negoex-initiator"
 or "gss-browserid-negoex-acceptor", depending on the party generating the
 signature.
\end_layout

\begin_layout Standard
The NegoEx authentication scheme is the binary encoding of the following
 hexadecimal string:
\end_layout

\begin_layout Standard
535538008647F5BC624BD8076949F0
\end_layout

\begin_layout Standard
where the third byte (zero above) is set to the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

 encryption type for the selected mechanism.
 The authentication scheme for encryption types greater than 255 is not
 specified here.
\end_layout

\begin_layout Standard
There is currently no initiator-sent metadata defined and acceptors should
 ignore any sent.
 The metadata is advisory and the initiator is free to ignore it.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Fast-re-authentication"

\end_inset

Fast re-authentication
\end_layout

\begin_layout Standard
Fast re-authentication allows a security context to be established using
 a secret key derived from the initial certificate-signed ECDH key agreement.
\end_layout

\begin_layout Standard
The re-authentication assertion is signed with a HMAC using the Authenticator
 Root Key (ARK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-ARK"

\end_inset

), rather than a user's BrowserID certificate.
\end_layout

\begin_layout Standard
Support for fast re-authentication is OPTIONAL and is indicated by the acceptor
 returning a ticket in the response assertion.
\end_layout

\begin_layout Subsubsection
Ticket generation
\end_layout

\begin_layout Standard
If the acceptor supports re-authentication, the following steps are added
 to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Acceptor-context-token"

\end_inset

:
\end_layout

\begin_layout Enumerate
A unique, opaque ticket identifier is generated.
\end_layout

\begin_layout Enumerate
The acceptor creates a JSON object containing the ticket identifier and
 expiry time and returns it in the response to the initiator (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:response-tkt"

\end_inset

).
\end_layout

\begin_layout Standard
The acceptor must be able to use the ticket identifier to securely retrieve
 the subject, issuer, audience, expiry time, ARK and any other relevant
 properties of the original security context.
 One implementation choice may be to use the ticket identifier as a key
 into a dictionary containing this information.
 Another would be to encrypt this information in a long-term secret only
 known to the acceptor and encode the resulting ciphertext in the opaque
 ticket identifier.
\end_layout

\begin_layout Standard
The ticket expiry time by default SHOULD match the initiator's certificate
 expiry, however it MAY be configurable so the ticket expires before or
 after the certificate.
\end_layout

\begin_layout Standard
The initiator MAY cache tickets, along with the ARK, received from the acceptor
 in order to re-authenticate to it at a future time.
\end_layout

\begin_layout Subsubsection
Initiator re-authentication context token
\end_layout

\begin_layout Standard
The initiator looks in its ticket cache for an unexpired ticket for the
 desired acceptor.
 If none is found, the normal certificate-based authentication flow is performed
, otherwise:
\end_layout

\begin_layout Enumerate
The initiator generates a re-authentication assertion containing: the name
 of the acceptor (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-aud"

\end_inset

), an expiry time (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-exp"

\end_inset

) and/or the current time (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-iat"

\end_inset

), optional channel binding information (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-cbt"

\end_inset

), a random nonce (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-nonce"

\end_inset

), and the ticket identifier (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-tkt"

\end_inset

).
\end_layout

\begin_layout Enumerate
The initiator signs the re-authentication assertion with the ARK, using
 the hash algorithm associated with the original context key (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:OID Registry"

\end_inset

; HS256 is required by this specification).
\end_layout

\begin_layout Enumerate
The re-authentication assertion is packed into a backed assertion.
 The certificate count is zero as the assertion is signed with an established
 symmetric key.
\end_layout

\begin_layout Enumerate
The initiator generates an Authenticator Session Key (ASK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-ASK"

\end_inset

) which is used to verify the response and derive the CRK.
\end_layout

\begin_layout Subsubsection
Acceptor re-authentication context token
\end_layout

\begin_layout Enumerate
The acceptor unpacks the re-authentication assertion and retrieves the ARK,
 ticket expiry time, mutual authentication state and any other properties
 (such as the initiator name) associated with the ticket identifier.
\end_layout

\begin_layout Enumerate
The acceptor validates that the ticket and re-authentication assertion have
 not expired.
\end_layout

\begin_layout Enumerate
The acceptor verifies the assertion using the ARK.
\end_layout

\begin_layout Enumerate
The acceptor generates the ASK (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-ASK"

\end_inset

) and derives the RRK and CRK from this (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-RRK"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-CRK"

\end_inset

, respectively).
\end_layout

\begin_layout Enumerate
The acceptor generates a response and signs and returns it.
 Note that, unlike the certificate-based mutual authentication case, the
 nonce SHOULD NOT be echoed back as the ASK (and thus the RRK) is cryptographica
lly bound to the nonce.
\end_layout

\begin_layout Standard
If the ticket cannot be found, or the authentication fails, the acceptor
 SHOULD return a REAUTH_FAILED error, permitting the initiator to recover
 and fallback to generating a BrowserID assertion.
 It MAY also include its local timestamp (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:response-iat"

\end_inset

) so that the initiator can perform clock skew compensation.
\end_layout

\begin_layout Subsubsection
Interaction with mutual authentication
\end_layout

\begin_layout Standard
The mutual authentication state of a re-authenticated context is transitive.
 The initiator MUST NOT set the mutual_state flag for a re-authenticated
 context unless the original context was mutually authenticated.
\end_layout

\begin_layout Standard
As such, the initiator's ticket cache must store the mutual authentication
 state of the original context.
\end_layout

\begin_layout Subsubsection
Ticket renewal
\end_layout

\begin_layout Standard
Normally, re-authentication tickets are only issued when the initiator authentic
ated with a certificate-signed assertion.
 Acceptors MAY issue a new ticket with an expiry beyond the ticket lifetime
 when the initiator used a re-authentication assertion.
 The issuing of new tickets MUST be subject to a policy that prevents them
 from being renewed indefinitely.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:XRT-option"

\end_inset

Extra round-trip (XRT) option
\end_layout

\begin_layout Standard
The extra round-trip (XRT) option adds an additional round trip to the context
 token exchange.
 It allows the initiator to prove knowledge of the Context Master Key (CMK)
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-CMK"

\end_inset

) by sending an additional token signed in a key derived from an acceptor-issued
 challenge.
 Support for the extra round-trip option is OPTIONAL.
\end_layout

\begin_layout Subsubsection
Initiator XRT advertisement
\end_layout

\begin_layout Standard
The initiator advertises to the acceptor that it supports the XRT option
 by sending in its request assertion an 
\begin_inset Quotes eld
\end_inset

opts
\begin_inset Quotes erd
\end_inset

 claim (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:request-opts"

\end_inset

) containing the 
\begin_inset Quotes eld
\end_inset

xrt
\begin_inset Quotes erd
\end_inset

 value.
 This option SHOULD be set if the caller requested GSS_C_DCE_STYLE (see
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4757
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsubsection
Acceptor XRT advertisement
\end_layout

\begin_layout Standard
If the initiator advertised support for the XRT option, and the acceptor
 also supports this option, the acceptor sends a 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 claim (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:response-jti"

\end_inset

) in the response assertion, containing a random base 64 URL encoded value.
 This value SHOULD be at least 64 bits in length.
 (The 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 claim is distinct from any nonce that may be echoed back to the initiator.)
 The acceptor then returns GSS_C_CONTINUE_NEEDED to indicate that an additional
 context token is expected from the initiator.
\end_layout

\begin_layout Subsubsection
Initiator XRT context token
\end_layout

\begin_layout Standard
If the initiator requested the XRT option and the acceptor indicated support
 for it in its response assertion by including a 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 claim, then the initiator sends an additional context token to the acceptor.
 This token contains a backed assertion with zero certificates and an empty
 payload, signed in a key derived from the CMK and the acceptor challenge
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-XRTK"

\end_inset

).
\end_layout

\begin_layout Standard
Further, this key is used instead of the CMK for deriving the Context Root
 Key (CRK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-CRK"

\end_inset

) used for GSS-API message protection services.
 In the event that the initial context token was replayed, this prevents
 key reuse.
\end_layout

\begin_layout Subsubsection
Acceptor XRT context token validation
\end_layout

\begin_layout Standard
The acceptor MUST validate the XRT context token received from the initiator
 by deriving the XRTK and validating the signature on the unpacked assertion.
 The acceptor SHOULD reject XRT context tokens with a certificate count
 greater than zero.
 Unknown claims in the assertion payload MUST be ignored.
 The acceptor then returns GSS_C_COMPLETE to the caller.
\end_layout

\begin_layout Standard
The acceptor MAY avoid using a replay cache when this option is in effect.
\end_layout

\begin_layout Section
Validation
\end_layout

\begin_layout Subsection
Expiry times
\end_layout

\begin_layout Standard
The expiry and, if present, issued-at and not-before times of all elements
 in a backed assertion, MUST be validated.
 This applies equally to re-authentication assertions, public key assertions,
 and the entire certificate chain.
 If the expiry time is absent, the issued-at time MUST be present, and the
 JWT implicitly expires a short, implementation-defined interval after the
 issued-at time.
 (A suggested interval is five minutes.)
\end_layout

\begin_layout Standard
The GSS context lifetime SHOULD NOT exceed the lifetime of the user's certificat
e.
\end_layout

\begin_layout Standard
The lifetime of a re-authentication ticket SHOULD NOT exceed the lifetime
 of the user's certificate.
 The acceptor MUST validate the ticket expiry time when performing re-authentica
tion.
\end_layout

\begin_layout Standard
Message protections services such as GSS_Wrap() SHOULD be available beyond
 the GSS context lifetime for maximum application compatibility.
\end_layout

\begin_layout Subsection
Audience
\end_layout

\begin_layout Standard
If the credential passed to GSS_Accept_sec_context() is not for GSS_C_NO_NAME,
 then its string representation as a BrowserID principal MUST match the
 unencoded audience (that is, the audience without the URN prefix defined
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Audience-encoding"

\end_inset

).
\end_layout

\begin_layout Subsection
Channel bindings
\end_layout

\begin_layout Standard
GSS-API channel binding is a protected facility for naming an enclosing
 channel between the initiator and acceptor.
 If the acceptor passed in channel bindings to GSS_Accept_sec_context(),
 the assertion MUST contain a matching channel binding claim.
 (Only the application_data component is validated.)
\end_layout

\begin_layout Standard
The acceptor SHOULD accept any channel binding provided by the initiator
 if NULL channel bindings are passed to GSS_Accept_sec_context().
\end_layout

\begin_layout Subsection
Key agreement
\end_layout

\begin_layout Standard
The initiator MUST choose an ECDH curve with an equivalent strength to the
 negotiated 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 encryption type.
 Appropriate curves are given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:OID Registry"

\end_inset

.
\end_layout

\begin_layout Standard
The curve strength MUST be verified by the acceptor.
 A stronger than required curve MAY be selected by the initiator.
\end_layout

\begin_layout Subsection
Signatures
\end_layout

\begin_layout Standard
Signature validation on assertions is the same as for the web usage of BrowserID
, with the addition that response assertions may and re-authentication assertion
s must be signed with a symmetric key.
 In this case the HMAC algorithm associated with the mechanism OID is used,
 and there are no certificates in the backed assertion.
\end_layout

\begin_layout Subsection
Replay detection
\end_layout

\begin_layout Standard
The acceptor SHOULD maintain a cache of received assertions in order to
 guard against replay attacks.
 GSS_C_REPLAY_FLAG MUST NOT be returned if the implementation does not support
 replay detection through the use of a replay cache or the XRT option.
\end_layout

\begin_layout Section
Assertion claims
\end_layout

\begin_layout Subsection
Request (initiator/UA) assertion
\end_layout

\begin_layout Standard
These claims are included in the assertion sent to the acceptor and are
 authenticated by the initiator's private key and certificate chain (directly,
 or in the case of re-authentication assertions, transitively).
 Here is an example assertion containing Elliptic Curve Diffie-Hellman parameter
s, along with a nonce indicating that mutual authentication is desired:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 { 
\end_layout

\begin_layout Plain Layout

     "exp": 1360158396188,
\end_layout

\begin_layout Plain Layout

     "ecdh": {
\end_layout

\begin_layout Plain Layout

         "crv": "P-256",
\end_layout

\begin_layout Plain Layout

         "x": "JR5UPDgMLFPZwOGaKKSF24658tB1DccM1_oHPbCHeZg",
\end_layout

\begin_layout Plain Layout

         "y": "S45Esx_6DfE5-xdB3X7sIIJ16MwO0Y_RiDc-i5ZTLQ8"
\end_layout

\begin_layout Plain Layout

     },
\end_layout

\begin_layout Plain Layout

     "nonce": "GnK2IBA42iQ",
\end_layout

\begin_layout Plain Layout

     "aud": "urn:x-gss:imap/mail.ietf.org"
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following claims are permitted in the request assertion:
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-aud"

\end_inset


\begin_inset Quotes eld
\end_inset

aud
\begin_inset Quotes erd
\end_inset

 (Audience)
\end_layout

\begin_layout Standard
The audience, formatted as a URN containing the acceptor's principal name
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Audience-encoding"

\end_inset

).
 This claim is REQUIRED.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-exp"

\end_inset


\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

 (Expiry time)
\end_layout

\begin_layout Standard
This contains the time when the assertion expires, in milliseconds since
 January 1, 1970.
 At least one of 
\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 MUST be present.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-iat"

\end_inset


\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 (Issued at time)
\end_layout

\begin_layout Standard
This contains the time the assertion was issued (in milliseconds since January
 1, 1970).
 If present, the acceptor MUST validate that the assertion was recently
 issued.
 At least one of 
\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 MUST be present.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-nbf"

\end_inset


\begin_inset Quotes erd
\end_inset

nbf
\begin_inset Quotes erd
\end_inset

 (Not before time)
\end_layout

\begin_layout Standard
This contains the time, in milliseconds sinces January 1, 1970, from which
 the assertion begins to be valid.
 This claim is OPTIONAL.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-ecdh"

\end_inset

"ecdh" (Elliptic Curve Diffie-Hellman key agreement)
\end_layout

\begin_layout Standard
These contain ECDH key parameters for deriving a shared session key with
 the relying party: "crv" contains the curve, "x" the X coordinate and "y"
 the Y coordinate (see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.ietf-oauth-json-web-token
\end_layout

\end_inset

 Section 5.2).
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

ecdh
\begin_inset Quotes erd
\end_inset

 claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL,
 or there is already a prior session key (as is the case for re-authentication
 assertions).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-cbt"

\end_inset


\begin_inset Quotes eld
\end_inset

cbt
\begin_inset Quotes erd
\end_inset

 (Channel binding token)
\end_layout

\begin_layout Standard
This contains channel binding information for binding the GSS context to
 an outer channel (e.g.
 see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5929
\end_layout

\end_inset

).
 Its value is the base64 URL encoding of the application-specific data component
 of the channel bindings passed to GSS_Init_sec_context() or GSS_Accept_sec_cont
ext().
 This claim is OPTIONAL.
\end_layout

\begin_layout Standard
[XXX should this be 
\begin_inset Quotes eld
\end_inset

cb
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

cbt
\begin_inset Quotes erd
\end_inset

?]
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-nonce"

\end_inset

"nonce" (Mutual authentication nonce)
\end_layout

\begin_layout Standard
This is a random quantity of at least 64 bits, base 64 URL encoded, which
 is used to bind the request and response assertions in the case a freshly
 agreed key is not used to sign the response assertion.
 This claim is REQUIRED if mutual authentication is desired and the assertion
 is signed using a certificate, or if re-authentication is being performed.
 Otherwise it MUST be ignored.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-tkt"

\end_inset


\begin_inset Quotes eld
\end_inset

tkt
\begin_inset Quotes erd
\end_inset

 (Ticket identifier)
\end_layout

\begin_layout Standard
This is an opaque ticket identifier, when the assertion is being used for
 fast re-authentication.
 This matches the 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 value sent back in the response assertion ticket.
 This claim is REQUIRED for re-authentication assertions, otherwise it the
 assertion MUST be rejected.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:request-opts"

\end_inset


\begin_inset Quotes erd
\end_inset

opts
\begin_inset Quotes erd
\end_inset

 (Options)
\end_layout

\begin_layout Standard
This contains a JSON array of string values indicating various protocol
 options that are supported by the initiator.
 Unknown options MUST be ignored by the acceptor.
 This document defines only one such extension:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Section
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:XRT-option"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
xrt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The initiator supports the extra round trip option
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Response (acceptor/RP) assertion
\end_layout

\begin_layout Standard
The response assertion is sent from the acceptor to the initiator to provide
 key agreement, and either key confirmation or mutual authentication.
 It is formatted as a backed assertion, however in the current specification
 it consists of a single assertion with zero certificates; that is, it is
 "unbacked".
 (It is encoded as a backed assertion in order to provide future support
 for mutual authentication using native BrowserID certificates.
 Such support is not specified here; implementations of this version of
 the specification SHOULD reject response assertions with BrowserID certificates.
)
\end_layout

\begin_layout Standard
In the case of a key successfully being negotiated, the response assertion
 is signed with the RP Response Key (RRK) (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:kd-RRK"

\end_inset

).
 Alternatively, it may be signed with the acceptor's private RSA or DSA
 key.
 In this case, the acceptor's X.509 certificate is included in the "x5c"
 property of the JWT header.
\end_layout

\begin_layout Standard
The HMAC-SHA256 (HS256) algorithm MUST be supported by implementors of this
 specification.
\end_layout

\begin_layout Standard
If a key is unavailable, then the signature is absent and the value of the
 "alg" header claim is "none".
 No signature verification is required in this case, however the initiator
 MUST NOT return GSS_C_COMPLETE unless the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

 encryption type for the mechanism is ENCTYPE_NULL.
\end_layout

\begin_layout Standard
Response assertions with an audience claim (
\begin_inset Quotes eld
\end_inset

aud
\begin_inset Quotes erd
\end_inset

) MUST be rejected to prevent reflection attacks.
\end_layout

\begin_layout Standard
Here is an example response assertion:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "exp": 1362960258000,
\end_layout

\begin_layout Plain Layout

    "nonce": "bbqT10Gyx3s",
\end_layout

\begin_layout Plain Layout

    "ecdh": {
\end_layout

\begin_layout Plain Layout

        "x": "bvNF6V1rpMeQyGOKCj0kBaOaSh3tlhUcbffaji4uCEI",
\end_layout

\begin_layout Plain Layout

        "y": "Iuqs650FXzXFUD9kHknETfbqiB8XBbCHlJXoysx3rvw"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "tkt": {
\end_layout

\begin_layout Plain Layout

        "jti": "Jgg7vKX2sEKlCWBfmLTg_n4qz3NVZxOU-a2B4qYMkXI",
\end_layout

\begin_layout Plain Layout

        "exp": 1362992660000
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following claims are permitted in the response assertion:
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-iat"

\end_inset


\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 (Issued at time)
\end_layout

\begin_layout Standard
The current acceptor time, in milliseconds since January 1, 1970.
 This allows the initiator to compensate for clock differences when generating
 assertions.
 This claim is OPTIONAL.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-ecdh"

\end_inset


\begin_inset Quotes eld
\end_inset

ecdh
\begin_inset Quotes erd
\end_inset

 (Elliptic Curve Diffie-Hellman key agreement)
\end_layout

\begin_layout Standard
This contains a JSON object containing the coordinates of the acceptor's
 ECDH public key: "x" contains the X coordinate and "y" the Y coordinate
 (see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.ietf-oauth-json-web-token
\end_layout

\end_inset

 Section 5.2).
 This claim is REQUIRED unless the associated encryption type is ENCTYPE_NULL,
 or there is already an established session key, as is the case for re-authentic
ation assertions.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

crv
\begin_inset Quotes erd
\end_inset

 property MUST NOT be present; it is determined by the initiator.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-exp"

\end_inset


\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

 (Expiry time)
\end_layout

\begin_layout Standard
This contains the time when the context expires, in milliseconds since January
 1, 1970.
 This claim is OPTIONAL; the initiator should use the certificate or ticket
 expiry time if absent.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-nonce"

\end_inset


\begin_inset Quotes eld
\end_inset

nonce
\begin_inset Quotes erd
\end_inset

 (Mutual authentication nonce)
\end_layout

\begin_layout Standard
The nonce as received from the initiator.
 This MUST NOT be present unless a nonce was received from the initiator,
 and the acceptor is signing the assertion with a private key.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-tkt"

\end_inset


\begin_inset Quotes eld
\end_inset

tkt
\begin_inset Quotes erd
\end_inset

 (Ticket)
\end_layout

\begin_layout Standard
This contains a JSON object that may be used for re-authenticating to the
 acceptor without acquiring an assertion.
 Its usage is optional.
 It has two properties: 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

, an opaque identifier to be presented in a re-authentication assertion;
 and 
\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

, the expiry time of the ticket.
 This claim is OPTIONAL.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:response-jti"

\end_inset


\begin_inset Quotes erd
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 (JWT ID)
\end_layout

\begin_layout Standard
This contains a base64 URL encoded random value of at least 64 bits that
 is used to uniquely identify the acceptor response, in the case that the
 extra round trip option is used.
 It MUST be ignored if this option is not in effect.
 It SHOULD not be present unless the initiator requested the extra round
 trip option.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

gss-maj
\begin_inset Quotes erd
\end_inset

 (GSS major status code)
\end_layout

\begin_layout Standard
This contains a GSS major status code represented as a number.
 It MUST NOT be present if the acceptor did not return an error.
 This claim is OPTIONAL.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

gss-min
\begin_inset Quotes erd
\end_inset

 (GSS minor status code)
\end_layout

\begin_layout Standard
This contains a GSS minor status code represented as a number.
 It MUST NOT be present if the acceptor did not return an error and MUST
 NOT be present if there is no minor status code for the given major error.
 This claim is OPTIONAL.
\end_layout

\begin_layout Standard
If REAUTH_FAILED is received, the initiator SHOULD attempt to send another
 initial context token containing a fresh assertion.
\end_layout

\begin_layout Standard
The following protocol minor status codes are defined.
 Note that the API representation of these status codes is implementation
 dependent.
 Status codes with the high bit set are GSS BrowserID protocol errors; the
 remainder are BrowserID protocol errors.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="43" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_JSON
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid JSON encoding
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_BASE64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid Base64 encoding
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_ASSERTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid assertion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TOO_MANY_CERTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Too many certificates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNTRUSTED_ISSUER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Untrusted issuer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_ISSUER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid issuer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_ISSUER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing issuer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_AUDIENCE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing audience
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_AUDIENCE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bad audience
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXPIRED_ASSERTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assertion expired
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASSERTION_NOT_YET_VALID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assertion not yet valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXPIRED_CERT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Certificate expired
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CERT_NOT_YET_VALID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Certificate not yet valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_SIGNATURE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid signature
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_ALGORITHM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing JWS algorithm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNKNOWN_ALGORITHM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unknown JWS algorithm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_PRINCIPAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing principal attribute
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNKNOWN_PRINCIPAL_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unknown principal type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_CERT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing certificate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_CHANNEL_BINDINGS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
38
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing channel bindings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CHANNEL_BINDINGS_MISMATCH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
39
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Channel bindings do not match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NOT_REAUTH_ASSERTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
70
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not a re-authentication assertion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_SUBJECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bad subject name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISMATCHED_RP_RESPONSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
72
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mismatched RP response token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REFLECTED_RP_RESPOSNE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
73
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reflected RP response token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNKNOWN_EC_CURVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unknown ECC curve
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INVALID_EC_CURVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
78
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invalid ECC curve
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MISSING_NONCE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
79
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing nonce
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WRONG_SIZE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Buffer is incorrect size
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WRONG_MECH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mechanism OID is incorrect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_TOK_HEADER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Token header is malformed or corrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TOK_TRUNC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Token is missing data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_DIRECTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Packet was replayed in wrong direction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WRONG_TOK_ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received token ID does not match expected
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KEY_UNAVAILABLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000007
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Key unavailable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KEY_TOO_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Key too weak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONTEXT_ESTABLISHED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x80000009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Context already established
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONTEXT_INCOMPLETE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x8000000A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Context incomplete
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_CONTEXT_TOKEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x8000000B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Context token malformed or corrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_ERROR_TOKEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x8000000C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error token malformed or corrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAD_CONTEXT_OPTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x8000000D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bad context option
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REAUTH_FAILED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x8000000E
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Re-authentication failured
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Key derivation
\end_layout

\begin_layout Standard
The following function is used as the base algorithm for deriving keys:
\end_layout

\begin_layout Standard
browserid-derive-key(K, salt) = HMAC(K, "BrowserID" || K || salt || 0x01)
\end_layout

\begin_layout Standard
The HMAC hash algorithm for all currently specified key lengths is SHA-256.
 Note that the inclusion of K in the HMAC input is for interoperability
 with some crypto implementations.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-DHK"

\end_inset

Diffie-Hellman Key (DHK)
\end_layout

\begin_layout Standard
This key is the shared secret resulting from the ECDH exchange.
 Its length corresponds to the selected EC curve.
 It is never used without derivation and thus may be used with implementations
 that do not expose the ECDH value directly.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-CMK"

\end_inset

Context Master Key (CMK)
\end_layout

\begin_layout Standard
This is the Diffie-Hellman Key (DHK) for all initially authenticated contexts
 and the Authenticator Session Key (ASK) for re-authenticated contexts.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-RRK"

\end_inset

RP Response Key (RRK)
\end_layout

\begin_layout Standard
The response from the acceptor is signed using this key for certificate-signed
 assertions, unless mutual authentication is being performed (in which case
 a private key signature is used):
\end_layout

\begin_layout Standard
RRK = browserid-derive-key(CMK, "RRK") 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-CRK"

\end_inset

Context Root Key (CRK)
\end_layout

\begin_layout Standard
The Context Root Key is used for 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 message protection services, e.g.
 GSS_Wrap() and GSS_Get_MIC().
 If the extra round-trip option is not used, it is derived as follows:
\end_layout

\begin_layout Standard
CRK = random-to-key(browserid-derive-key(CMK, "CRK"))
\end_layout

\begin_layout Standard
Otherwise, the XRTK key is used:
\end_layout

\begin_layout Standard
CRK = random-to-key(browserid-derive-key(XRTK, 
\begin_inset Quotes eld
\end_inset

CRK
\begin_inset Quotes erd
\end_inset

))
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-ARK"

\end_inset

Authenticator Root Key (ARK)
\end_layout

\begin_layout Standard
The Authenticator Root Key (ARK) is used to sign assertions used for fast
 re-authentication.
 (The term 
\begin_inset Quotes eld
\end_inset

authenticator
\begin_inset Quotes erd
\end_inset

 is equivalent to 
\begin_inset Quotes eld
\end_inset

re-authentication assertion
\begin_inset Quotes erd
\end_inset

 and exists for historical reasons.) It is derived as follows:
\end_layout

\begin_layout Standard
ARK = browserid-derive-key(CMK, "ARK")
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-ASK"

\end_inset

Authenticator Session Key (ASK)
\end_layout

\begin_layout Standard
The Authenticator Session Key (ASK) is used instead of the DHK for re-authentica
ted contexts.
 It is derived as follows:
\end_layout

\begin_layout Standard
ASK = browserid-derive-key(ARK, reauth-assertion-as-jwt)
\end_layout

\begin_layout Standard
The salt (reauth-assertion-as-jwt) is the JWT encoding of the re-authentication
 assertion as sent by the initiator.
 This binds the nonce to the session key.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:kd-XRTK"

\end_inset

Extra Round Trip Key (XRTK)
\end_layout

\begin_layout Standard
The Extra Round Trip Key (XRTK) is used to sign the extra round trip token,
 and also as the master key for the CRK when the extra round trip option
 is used.
\end_layout

\begin_layout Standard
XRTK = browserid-derive-key(CMK, acceptor-jti-binary)
\end_layout

\begin_layout Standard
The salt (acceptor-jti-binary) is the base64 URL decoding of the acceptor
 JWI ID claim.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:GSS-PRF"

\end_inset

GSS Pseudo-Random Function (PRF)
\end_layout

\begin_layout Standard
The BrowserID mechanism shares the same Pseudo-Random Function (PRF) as
 the Kerberos GSS mechanism, defined in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4402
\end_layout

\end_inset

.
 GSS_C_PRF_KEY_FULL and GSS_C_PRF_KEY_PARTIAL are equivalent.
 The protocol key to be used for GSS_Pseudo_random() SHALL by the Context
 Root Key (CRK).
\end_layout

\begin_layout Section
Example
\end_layout

\begin_layout Standard
Suppose a mail user agent for the user lukeh@lukktone.com wishes to authenticate
 to an IMAP server rand.mit.de.padl.com.
 They do not have a re-authentication ticket.
 The mail user agent would display a dialog box in which the user would
 sign in to their IdP and request a fresh assertion be generated.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C: <connects to IMAP port>
\end_layout

\begin_layout Plain Layout

S: * OK
\end_layout

\begin_layout Plain Layout

C: C1 CAPABILITY
\end_layout

\begin_layout Plain Layout

S: * CAPABILITY IMAP4rev1 SASL-IR SORT [...] AUTH=BROWSERID-AES128
\end_layout

\begin_layout Plain Layout

S: C1 OK Capability Completed
\end_layout

\begin_layout Plain Layout

C: C2 AUTHENTICATE BROWSERID-AES128
\end_layout

\begin_layout Plain Layout

   biwsYyxleUpoYkdjaU9pSlNVekkxTmlKOS5leUp3ZFdKc2FXTXRhMlY
\end_layout

\begin_layout Plain Layout

   1SWpwN0ltRnNaMjl5YVhSb2JTSTZJa1JUSWl3aWVTSTZJak01TVRObE
\end_layout

\begin_layout Plain Layout

   9EZ3laRGhqTXpWa01qSm1ObVEwTURZNVkyVTJNREJrWW1OallqTTVOR
\end_layout

\begin_layout Plain Layout

   0ZqWVdGaFl6WTBPV1prTjJZNVptTmtObU0wTVRJME5tWTFOakk1TUdW
\end_layout

\begin_layout Plain Layout

   bU1HTmpNemMwTnpaaE1EUmhOREU0WXpGbE9ETXhPV0kxTkdJeFpXTml
\end_layout

\begin_layout Plain Layout

   ObVkyWTJWaE56VTBOR1kyWlRFMU5qTmxaR05sWkdNNU1EWmtOamcwTT
\end_layout

\begin_layout Plain Layout

   JRd01XSmpaVFJtTjJFMVpqY3dOMk5tWVRZd1lXTTVNVE0yWm1GbU5qS
\end_layout

\begin_layout Plain Layout

   m1aR0ZtTkRoa09HRTVPRGxoWVdGbE5EUXdOMlZrTmpjeU56ZGhNVGM0
\end_layout

\begin_layout Plain Layout

   TW1WallXRXhOVFppWkdOaFpXRXhOamRtTWpZek56STFaR1UyTTJWa09
\end_layout

\begin_layout Plain Layout

   HWXlPR0UyTUROaU5tWm1OVEV3WmpRNE1ESmtOelJrTjJWaFpUZGhZbU
\end_layout

\begin_layout Plain Layout

   15WldJaUxDSndJam9pWm1ZMk1EQTBPRE5rWWpaaFltWmpOV0kwTldWa
\end_layout

\begin_layout Plain Layout

   FlqYzROVGswWWpNMU16TmtOVFV3WkRsbU1XSm1NbUU1T1RKaE4yRTRa
\end_layout

\begin_layout Plain Layout

   R0ZoTm1Sak16Um1PREEwTldGa05HVTJaVEJqTkRJNVpETXpOR1ZsWld
\end_layout

\begin_layout Plain Layout

   GaFpXWmtOMlV5TTJRME9ERXdZbVV3TUdVMFkyTXhORGt5WTJKaE16ST
\end_layout

\begin_layout Plain Layout

   FZbUU0TVdabU1tUTFZVFZpTXpBMVlUaGtNVGRsWWpOaVpqUmhNRFpoT
\end_layout

\begin_layout Plain Layout

   XpRNVpETTVNbVV3TUdRek1qazNORFJoTlRFM09UTTRNRE0wTkdVNE1t
\end_layout

\begin_layout Plain Layout

   RXhPR00wTnprek16UXpPR1k0T1RGbE1qSmhaV1ZtT0RFeVpEWTVZemh
\end_layout

\begin_layout Plain Layout

   tTnpWbE16STJZMkkzTUdWaE1EQXdZek5tTnpjMlpHWmtZbVEyTURRMk
\end_layout

\begin_layout Plain Layout

   16aGpNbVZtTnpFM1ptTXlObVF3TW1VeE55SXNJbkVpT2lKbE1qRmxNR
\end_layout

\begin_layout Plain Layout

   FJtT1RFeFpERmxaRGM1T1RFd01EaGxZMkZoWWpOaVpqYzNOVGs0TkRN
\end_layout

\begin_layout Plain Layout

   d09XTXpJaXdpWnlJNkltTTFNbUUwWVRCbVpqTmlOMlUyTVdaa1pqRTR
\end_layout

\begin_layout Plain Layout

   OamRqWlRnME1UTTRNelk1WVRZeE5UUm1OR0ZtWVRreU9UWTJaVE5qT0
\end_layout

\begin_layout Plain Layout

   RJM1pUSTFZMlpoTm1ObU5UQTRZamt3WlRWa1pUUXhPV1V4TXpNM1pUQ
\end_layout

\begin_layout Plain Layout

   TNZVEpsT1dVeVlUTmpaRFZrWldFM01EUmtNVGMxWmpobFltWTJZV1l6
\end_layout

\begin_layout Plain Layout

   T1Rka05qbGxNVEV3WWprMllXWmlNVGRqTjJFd016STFPVE15T1dVME9
\end_layout

\begin_layout Plain Layout

   ESTVZakJrTUROaVltTTNPRGsyWWpFMVlqUmhaR1UxTTJVeE16QTROVG
\end_layout

\begin_layout Plain Layout

   hqWXpNMFpEazJNalk1WVdFNE9UQTBNV1kwTURreE16WmpOekkwTW1Fe
\end_layout

\begin_layout Plain Layout

   k9EZzVOV001WkRWaVkyTmhaRFJtTXpnNVlXWXhaRGRoTkdKa01UTTVP
\end_layout

\begin_layout Plain Layout

   R0prTURjeVpHWm1ZVGc1TmpJek16TTVOMkVpZlN3aWNISnBibU5wY0d
\end_layout

\begin_layout Plain Layout

   Gc0lqcDdJbVZ0WVdsc0lqb2liSFZyWldoQWJIVnJhM1J2Ym1VdVkyOX
\end_layout

\begin_layout Plain Layout

   RJbjBzSW1saGRDSTZNVE0yTWprMk1UQTVOakV5TWl3aVpYaHdJam94T
\end_layout

\begin_layout Plain Layout

   XpZeU9UWTBOamsyTVRJeUxDSnBjM01pT2lKc2IyZHBiaTV3WlhKemIy
\end_layout

\begin_layout Plain Layout

   NWhMbTl5WnlKOS5mT3V5ZlZkNWFZZ285ckJncmdHVDJHYjkzUUoxVnp
\end_layout

\begin_layout Plain Layout

   LSE9rNjdFUXBEeU9pUENPdXFweUw5a2tVVDdxcGNZaWZsb0NTWjlPej
\end_layout

\begin_layout Plain Layout

   UtVWRrcldlcTZXUkRLcUdOeXg0OFdyVGduVkoyRlM3MU1Mbl9DeWhGM
\end_layout

\begin_layout Plain Layout

   Go1Y1ZsQ0E5WWh3YVlWTHhsbW9YU01uWTdyRzFWa0VSdjRtaWtCM3FD
\end_layout

\begin_layout Plain Layout

   cFB2NXJtSEswbkNiRlpiN1dXR3JkVEdkcmNHTkRkZHlDQkQ5a1dpUUd
\end_layout

\begin_layout Plain Layout

   VbkktenN3WXdiZXJUTmQ3Nmc1Z2N1c1MtbWxjVk5jbzNMTG4zMlNhbG
\end_layout

\begin_layout Plain Layout

   x0eDBCUHAtVTAyMXpvR00wWEhibm1Sa2VRdGVtblVXZGloYzRVbVpNR
\end_layout

\begin_layout Plain Layout

   EJJZ05nSFFCSmdXMGhBcTlHWVFmYzVObFNzZW5RX0p5MGR4anE1bHdE
\end_layout

\begin_layout Plain Layout

   Wll3SExsUXlmYnVYbGFtRTNDZ3ZkZUF+ZXlKaGJHY2lPaUpFVXpFeU9
\end_layout

\begin_layout Plain Layout

   DSjkuZXlKdWIyNWpaU0k2SW1nMVVEUkxja2M0ZVc1bklpd2laV05rYU
\end_layout

\begin_layout Plain Layout

   NJNmV5SjRJam9pWm1wYVRuQnpRbXBIYmw5WVFVTnRaMkpPZDBGemRuS
\end_layout

\begin_layout Plain Layout

   TRPR2MwUmxkNmRHOWljWEExVkUxaVgxbEdNQ0lzSW1OeWRpSTZJbEF0
\end_layout

\begin_layout Plain Layout

   TWpVMklpd2llU0k2SWxKTFJYWktlalU1WTNOaGRqaExZM2RsVlhZMVd
\end_layout

\begin_layout Plain Layout

   IRkdaM1E0UVZkRFFXdHlTa0o2TTFCUWNVeEtkSE1pZlN3aVkySjBJam
\end_layout

\begin_layout Plain Layout

   9pWW1sM2N5SXNJbVY0Y0NJNk1UTTJNamsyTVRJeE5qRTBPU3dpWVhWa
\end_layout

\begin_layout Plain Layout

   0lqb2lkWEp1T25ndFozTnpPbWx0WVhBdmNtRnVaQzV0YVhRdVpHVXVj
\end_layout

\begin_layout Plain Layout

   R0ZrYkM1amIyMGlmUS51ZHRvSTNVNUMtM3BwNHhJSloxbWstQ3o0Ymh
\end_layout

\begin_layout Plain Layout

   sQkxlSzAyNlVhbWRhMjhwTFk4c013Tk50Y0E=
\end_layout

\begin_layout Plain Layout

S: + Qyx
\end_layout

\begin_layout Plain Layout

   +ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbmcxWXlJNld5Sk5TVWxFZW1wRF
\end_layout

\begin_layout Plain Layout

   EwRnlZV2RCZDBsQ1FXZEpRa0o2UVU1Q1oydHhhR3RwUnpsM01FSkJVV
\end_layout

\begin_layout Plain Layout

   lZHUVVSQ1pFMVJjM2REVVZsRVZsRlJSMFYzU2tKV1ZFVmxUVUozUjBF
\end_layout

\begin_layout Plain Layout

   eFZVVkRaM2RXVlVWR1JWUkRRbFJpTWxvd1pESkdlVnBUUWxGa1NHdG5
\end_layout

\begin_layout Plain Layout

   WRWhTYTAxVE5IZE1RVmxFVmxGUlJFUkRWbEZSVlZKTlNVWk9kbHB1VW
\end_layout

\begin_layout Plain Layout

   pOWldFcHNTVVZPYkdOdVVuQmFiV3hxV1ZoU2NHSXlOR2RSV0ZZd1lVY
\end_layout

\begin_layout Plain Layout

   zVlV0ZZVWpWTlFqUllSRlJGZWsxRVJYaE5WRUV4VFhwUmVVMUdiMWhF
\end_layout

\begin_layout Plain Layout

   VkVVeVRVUkZlRTFVUVRGTmVsRjVUVVp2ZDFSRVJVeE5RV3RIUVRGVlJ
\end_layout

\begin_layout Plain Layout

   VSm9UVU5SVmxWNFNHcEJZMEpuVGxaQ1FXOU5SbFpDUWxKRmQyZFZNam
\end_layout

\begin_layout Plain Layout

   x0WkVoa2FHTnRWV2RWU0ZJMVNVVjRNRnBFUldSTlFuTkhRVEZWUlVGM
\end_layout

\begin_layout Plain Layout

   2QxVmpiVVoxV2tNMWRHRllVWFZhUjFWMVkwZEdhMkpETldwaU1qQjNa
\end_layout

\begin_layout Plain Layout

   MmRGYVUxQk1FZERVM0ZIVTBsaU0wUlJSVUpCVVZWQlFUUkpRa1IzUVh
\end_layout

\begin_layout Plain Layout

   kblowVkxRVzlKUWtGUlJFSm9la1p3Wmt3MmRraDRjM2d5UkhaR1dsQX
\end_layout

\begin_layout Plain Layout

   JSMUl3Vlc5dFJIQXZRMFZsSzA5SVRqQmFNR00yT1RGWlp6bG5WMWh0V
\end_layout

\begin_layout Plain Layout

   lROdVVIRldWR0pCU1hGWVNEaEJWWFIyWmpkTmVtSlpNamh2Vm14d1ds
\end_layout

\begin_layout Plain Layout

   UXdOWHB0TW1NdmRFVXpaMnRvVkhodFdFOVNaMUZ5WTNWMVozVnFUMWh
\end_layout

\begin_layout Plain Layout

   OUm1oSk5ITjJSVm9yUTJKSVVHeGFhVm92VkhwcldFeElVREk1UlhvM2
\end_layout

\begin_layout Plain Layout

   QwNWFiakZJTlRkQlRIRnRVMEZ2TlZRMGNYaE5SbWRDV1hWa2R5OWFlR
\end_layout

\begin_layout Plain Layout

   kJTZWtSMFZXOUpWakJ6TWpOWlp6UjRWRGxoZDBwdWNqRkhaMDFWVW1s
\end_layout

\begin_layout Plain Layout

   aVZVSnFSamQ1WW1OdE1FczRjMHBVSzFWSFpVSTNjbTFNYkZCM0syWkJ
\end_layout

\begin_layout Plain Layout

   hMDltTjFwcVdqbDBjRlJyUlUxcE9IVk1SVTF4WTNoaFIxTkJTeThyYT
\end_layout

\begin_layout Plain Layout

   FjM05YRlBlR1JCUmtrNGVsbGFXRFV6WjNCbk5HMXBLMUZYWmtkWk1Wc
\end_layout

\begin_layout Plain Layout

   E9VVXBOZFVoSFVWaG5MM1ZtZUUxNllYaE9UalJvTVdGUGJHMWFXbGxy
\end_layout

\begin_layout Plain Layout

   UWtod05USkJPWGxKVFZWaVFXZE5Ra0ZCUjJwbllXdDNaMkZaZDBOUld
\end_layout

\begin_layout Plain Layout

   VUldVakJVUWtGSmQwRkVRWE5DWjJ4bmFHdG5RbWgyYUVOQlVUQkZTSG
\end_layout

\begin_layout Plain Layout

   haWkZRelFteGliRTVVVkVOQ1NGcFhOV3hqYlVZd1dsZFJaMUV5Vm5sa
\end_layout

\begin_layout Plain Layout

   1IyeHRZVmRPYUdSSFZYZElVVmxFVmxJd1QwSkNXVVZHUzFOemRXSkZS
\end_layout

\begin_layout Plain Layout

   SFZpVWtsSFNFTkNkSFJCYkZSMk1rWlhSMllyVFVJNFIwRXhWV1JKZDF
\end_layout

\begin_layout Plain Layout

   GWlRVSmhRVVpNYVhwYWJFMVhia3RMTVZCWllXZGtTbXByVm5WU2FFVl
\end_layout

\begin_layout Plain Layout

   JTbXBOUVd0SFFURlZaRVZSVVVOTlFVRjNRM2RaUkZaU01GQkNRVkZFU
\end_layout

\begin_layout Plain Layout

   VdkWVowMUNUVWRCTVZWa1NsRlJUVTFCYjBkRFEzTkhRVkZWUmtKM1RV
\end_layout

\begin_layout Plain Layout

   Uk5RVEJIUTFOeFIxTkpZak5FVVVWQ1FsRlZRVUUwU1VKQlVVSkVNVUo
\end_layout

\begin_layout Plain Layout

   2VVZBcmNrNHhWVlY2TjBFMmVpdExSRkJoY1Roek1tbENSekJHZWxwNG
\end_layout

\begin_layout Plain Layout

   MxZ3lVVlZQZFhCQ1JVbGlkVnB3TUV0S1lYVnFWazFuTURGbVpHcHpkV
\end_layout

\begin_layout Plain Layout

   WRITUhWWVlrMW1aVkpIZVU1c1ZYTk5UaXRhUkhrNEwwMUpUMmd4WVZW
\end_layout

\begin_layout Plain Layout

   SGRqQlRWWGRMZEVOMFRIUlhja3AyTmpWMWQwaEhSM1ExZFVaTGVFMUZ
\end_layout

\begin_layout Plain Layout

   OakZXVkRRcmNYQkpNa0ZIY1hoNE5XUnljM2hGVEVKUFpIbFFibVYxUV
\end_layout

\begin_layout Plain Layout

   dsTVVIaEdkV0pTUm0xNmRXaFdVMGszUVZCTmJEYzVUMnN6TUc5WGRXU
\end_layout

\begin_layout Plain Layout

   kJORGxzVlZnNWQzb3paemx4T1haa2JEbDVhR2RsWlZWVFZYQk5hR3hh
\end_layout

\begin_layout Plain Layout

   TWpSVll6bFFkVXg2Y2pFMWFqWjJOak5ZZW5KVFpGZDBUbnAyTUVZeE1
\end_layout

\begin_layout Plain Layout

   HVkViRFI1VkZWT1YxTkthRGR4UW1obmNURkpiMWc1UVZCUFQzVk1Zaz
\end_layout

\begin_layout Plain Layout

   FPY25BMlltVkZaVzkzYURNMGNGWlhabFJoVTNoSk4yNUxOVGRyU3pKN
\end_layout

\begin_layout Plain Layout

   GFGSlZORE5sZDFscU1ta3ZVM0o2T0VkelRWTTVNWFZ5TWpWSmRDSmRm
\end_layout

\begin_layout Plain Layout

   US5leUowYTNRaU9uc2lhblJwSWpvaVlXVmhlVEJIU21sNlJIZzNPVUZ
\end_layout

\begin_layout Plain Layout

   uTFMxWFRDMTJkelpaT1VKWWVGSjFRekZZYzFwNGNuazFNVk5WU1NJc0
\end_layout

\begin_layout Plain Layout

   ltVjRjQ0k2TVRNMk1qazVOekE1T0RBd01IMHNJbVZqWkdnaU9uc2llQ
\end_layout

\begin_layout Plain Layout

   0k2SWtveFNWZGlTREpCTlVNelkyaFBWVWx4YldaWWNGQmZVbEZGUlU5
\end_layout

\begin_layout Plain Layout

   dFpESkZlRmh2UzNKeFVWRllURTBpTENKNUlqb2lYekpGZEhoaWVsOTJ
\end_layout

\begin_layout Plain Layout

   TbVZsVlZWaWVUSnlabVJsYTFSVVVGVlNjR0pIU2tnM2EzbEpWM0Z0YT
\end_layout

\begin_layout Plain Layout

   BsRlp5SjlMQ0p1YjI1alpTSTZJbWcxVURSTGNrYzRlVzVuSWl3aVpYa
\end_layout

\begin_layout Plain Layout

   HdJam94TXpZeU9UWTBOamsyTURBd2ZRLnFaaFVxdXBWUHgzRTdNSTBH
\end_layout

\begin_layout Plain Layout

   dnNIZjZER3pzc3ByMkJsdUVUMFNwMERxdkpFS1F4S3BiOG9faVZsWHZ
\end_layout

\begin_layout Plain Layout

   Qa2p2SXp0Qm5JajNNb084UlZMUWJwdE9QZDFrN3FoTUVwRkhOVGI1WF
\end_layout

\begin_layout Plain Layout

   pKYWVJTlBpQUNSSzA5dUZpVE5ud1cxanMxQ3pPY2FMakxsSTN4bFdkL
\end_layout

\begin_layout Plain Layout

   Ul1em8zODhyTUxsSXVkbmkxak5uRS0yOXZfc1NUTnRxLUMwQmNoNUMw
\end_layout

\begin_layout Plain Layout

   T3drbDcxQk54eHgzaFVxeEcxT0w0UHQyZ0JKWUFQX3NOVk12aDFwWDl
\end_layout

\begin_layout Plain Layout

   hRzd0Vms0S2sxS2NjaXRqUFdGN0dXc3JGeld4ekRSMHU2REZ0RmFjaE
\end_layout

\begin_layout Plain Layout

   NPYmVmcmZnZkUxOXFlWnJLcnpJMFVkQ3JEUHpZazlYb1dKR2twRlNPd
\end_layout

\begin_layout Plain Layout

   1dhY192Q0N1dXY1VjNHZF9MTlNJM3JCaS1GYWVoWUhBRjFJUQ==
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unpacking the mail user agent's AUTHENTICATE message reveals the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

n,,c,eyJhbGciOiJSUzI1NiJ9.eyJwdWJsaWMta2V5Ijp7ImFsZ29yaXRob
\end_layout

\begin_layout Plain Layout

SI6IkRTIiwieSI6IjM5MTNlODgyZDhjMzVkMjJmNmQ0MDY5Y2U2MDBkYmNj
\end_layout

\begin_layout Plain Layout

YjM5NGFjYWFhYzY0OWZkN2Y5ZmNkNmM0MTI0NmY1NjI5MGVmMGNjMzc0NzZ
\end_layout

\begin_layout Plain Layout

hMDRhNDE4YzFlODMxOWI1NGIxZWNiNmY2Y2VhNzU0NGY2ZTE1NjNlZGNlZG
\end_layout

\begin_layout Plain Layout

M5MDZkNjg0M2QwMWJjZTRmN2E1ZjcwN2NmYTYwYWM5MTM2ZmFmNjJmZGFmN
\end_layout

\begin_layout Plain Layout

DhkOGE5ODlhYWFlNDQwN2VkNjcyNzdhMTc4MmVjYWExNTZiZGNhZWExNjdm
\end_layout

\begin_layout Plain Layout

MjYzNzI1ZGU2M2VkOGYyOGE2MDNiNmZmNTEwZjQ4MDJkNzRkN2VhZTdhYmM
\end_layout

\begin_layout Plain Layout

yZWIiLCJwIjoiZmY2MDA0ODNkYjZhYmZjNWI0NWVhYjc4NTk0YjM1MzNkNT
\end_layout

\begin_layout Plain Layout

UwZDlmMWJmMmE5OTJhN2E4ZGFhNmRjMzRmODA0NWFkNGU2ZTBjNDI5ZDMzN
\end_layout

\begin_layout Plain Layout

GVlZWFhZWZkN2UyM2Q0ODEwYmUwMGU0Y2MxNDkyY2JhMzI1YmE4MWZmMmQ1
\end_layout

\begin_layout Plain Layout

YTViMzA1YThkMTdlYjNiZjRhMDZhMzQ5ZDM5MmUwMGQzMjk3NDRhNTE3OTM
\end_layout

\begin_layout Plain Layout

4MDM0NGU4MmExOGM0NzkzMzQzOGY4OTFlMjJhZWVmODEyZDY5YzhmNzVlMz
\end_layout

\begin_layout Plain Layout

I2Y2I3MGVhMDAwYzNmNzc2ZGZkYmQ2MDQ2MzhjMmVmNzE3ZmMyNmQwMmUxN
\end_layout

\begin_layout Plain Layout

yIsInEiOiJlMjFlMDRmOTExZDFlZDc5OTEwMDhlY2FhYjNiZjc3NTk4NDMw
\end_layout

\begin_layout Plain Layout

OWMzIiwiZyI6ImM1MmE0YTBmZjNiN2U2MWZkZjE4NjdjZTg0MTM4MzY5YTY
\end_layout

\begin_layout Plain Layout

xNTRmNGFmYTkyOTY2ZTNjODI3ZTI1Y2ZhNmNmNTA4YjkwZTVkZTQxOWUxMz
\end_layout

\begin_layout Plain Layout

M3ZTA3YTJlOWUyYTNjZDVkZWE3MDRkMTc1ZjhlYmY2YWYzOTdkNjllMTEwY
\end_layout

\begin_layout Plain Layout

jk2YWZiMTdjN2EwMzI1OTMyOWU0ODI5YjBkMDNiYmM3ODk2YjE1YjRhZGU1
\end_layout

\begin_layout Plain Layout

M2UxMzA4NThjYzM0ZDk2MjY5YWE4OTA0MWY0MDkxMzZjNzI0MmEzODg5NWM
\end_layout

\begin_layout Plain Layout

5ZDViY2NhZDRmMzg5YWYxZDdhNGJkMTM5OGJkMDcyZGZmYTg5NjIzMzM5N2
\end_layout

\begin_layout Plain Layout

EifSwicHJpbmNpcGFsIjp7ImVtYWlsIjoibHVrZWhAbHVra3RvbmUuY29tI
\end_layout

\begin_layout Plain Layout

n0sImlhdCI6MTM2Mjk2MTA5NjEyMiwiZXhwIjoxMzYyOTY0Njk2MTIyLCJp
\end_layout

\begin_layout Plain Layout

c3MiOiJsb2dpbi5wZXJzb25hLm9yZyJ9.fOuyfVd5aYgo9rBgrgGT2Gb93Q
\end_layout

\begin_layout Plain Layout

J1VzKHOk67EQpDyOiPCOuqpyL9kkUT7qpcYifloCSZ9Oz5-UdkrWeq6WRDK
\end_layout

\begin_layout Plain Layout

qGNyx48WrTgnVJ2FS71MLn_CyhF0j5cVlCA9YhwaYVLxlmoXSMnY7rG1VkE
\end_layout

\begin_layout Plain Layout

Rv4mikB3qCpPv5rmHK0nCbFZb7WWGrdTGdrcGNDddyCBD9kWiQGUnI-zswY
\end_layout

\begin_layout Plain Layout

wberTNd76g5gcusS-mlcVNco3LLn32Salltx0BPp-U021zoGM0XHbnmRkeQ
\end_layout

\begin_layout Plain Layout

temnUWdihc4UmZMDBIgNgHQBJgW0hAq9GYQfc5NlSsenQ_Jy0dxjq5lwDZY
\end_layout

\begin_layout Plain Layout

wHLlQyfbuXlamE3CgvdeA~eyJhbGciOiJEUzEyOCJ9.eyJub25jZSI6Img1
\end_layout

\begin_layout Plain Layout

UDRLckc4eW5nIiwiZWNkaCI6eyJ4IjoiZmpaTnBzQmpHbl9YQUNtZ2JOd0F
\end_layout

\begin_layout Plain Layout

zdnI4OGc0Rld6dG9icXA1VE1iX1lGMCIsImNydiI6IlAtMjU2IiwieSI6Il
\end_layout

\begin_layout Plain Layout

JLRXZKejU5Y3NhdjhLY3dlVXY1WHFGZ3Q4QVdDQWtySkJ6M1BQcUxKdHMif
\end_layout

\begin_layout Plain Layout

SwiY2J0IjoiYml3cyIsImV4cCI6MTM2Mjk2MTIxNjE0OSwiYXVkIjoidXJu
\end_layout

\begin_layout Plain Layout

OngtZ3NzOmltYXAvcmFuZC5taXQuZGUucGFkbC5jb20ifQ.udtoI3U5C-3p
\end_layout

\begin_layout Plain Layout

p4xIJZ1mk-Cz4bhlBLeK026Uamda28pLY8sMwNNtcA
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The initial 
\begin_inset Quotes eld
\end_inset

n,,
\begin_inset Quotes erd
\end_inset

 is the GS2 header (indicating that there are no channel bindings).
 The 
\begin_inset Quotes eld
\end_inset

c,
\begin_inset Quotes erd
\end_inset

 denotes the token as being a BrowserID initial context token.
 The remaining base64 URL encoded data is a BrowserID backed assertion,
 containing the following certificate (for clarity, the payload has been
 reformatted and JWT header and signature omitted):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "public-key": {
\end_layout

\begin_layout Plain Layout

        "algorithm": "DS",
\end_layout

\begin_layout Plain Layout

        "y": "3913e882d8c35d22f6d4069ce600dbccb394acaaac649
\end_layout

\begin_layout Plain Layout

              fd7f9fcd6c41246f56290ef0cc37476a04a418c1e8319
\end_layout

\begin_layout Plain Layout

              b54b1ecb6f6cea7544f6e1563edcedc906d6843d01bce
\end_layout

\begin_layout Plain Layout

              4f7a5f707cfa60ac9136faf62fdaf48d8a989aaae4407
\end_layout

\begin_layout Plain Layout

              ed67277a1782ecaa156bdcaea167f263725de63ed8f28
\end_layout

\begin_layout Plain Layout

              a603b6ff510f4802d74d7eae7abc2eb",
\end_layout

\begin_layout Plain Layout

        "p": "ff600483db6abfc5b45eab78594b3533d550d9f1bf2a9
\end_layout

\begin_layout Plain Layout

              92a7a8daa6dc34f8045ad4e6e0c429d334eeeaaefd7e2
\end_layout

\begin_layout Plain Layout

              3d4810be00e4cc1492cba325ba81ff2d5a5b305a8d17e
\end_layout

\begin_layout Plain Layout

              b3bf4a06a349d392e00d329744a5179380344e82a18c4
\end_layout

\begin_layout Plain Layout

              7933438f891e22aeef812d69c8f75e326cb70ea000c3f
\end_layout

\begin_layout Plain Layout

              776dfdbd604638c2ef717fc26d02e17",
\end_layout

\begin_layout Plain Layout

        "q": "e21e04f911d1ed7991008ecaab3bf775984309c3",
\end_layout

\begin_layout Plain Layout

        "g": "c52a4a0ff3b7e61fdf1867ce84138369a6154f4afa929
\end_layout

\begin_layout Plain Layout

              66e3c827e25cfa6cf508b90e5de419e1337e07a2e9e2a
\end_layout

\begin_layout Plain Layout

              3cd5dea704d175f8ebf6af397d69e110b96afb17c7a03
\end_layout

\begin_layout Plain Layout

              259329e4829b0d03bbc7896b15b4ade53e130858cc34d
\end_layout

\begin_layout Plain Layout

              96269aa89041f409136c7242a38895c9d5bccad4f389a
\end_layout

\begin_layout Plain Layout

              f1d7a4bd1398bd072dffa896233397a"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "principal": {
\end_layout

\begin_layout Plain Layout

        "email": "lukeh@lukktone.com"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "iat": 1362961096122,
\end_layout

\begin_layout Plain Layout

    "exp": 1362964696122,
\end_layout

\begin_layout Plain Layout

    "iss": "login.persona.org"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and assertion:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "nonce": "h5P4KrG8yng",
\end_layout

\begin_layout Plain Layout

    "ecdh": {
\end_layout

\begin_layout Plain Layout

        "x": "fjZNpsBjGn_XACmgbNwAsvr88g4FWztobqp5TMb_YF0",
\end_layout

\begin_layout Plain Layout

        "crv": "P-256",
\end_layout

\begin_layout Plain Layout

        "y": "RKEvJz59csav8KcweUv5XqFgt8AWCAkrJBz3PPqLJts"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "cbt": "biws",
\end_layout

\begin_layout Plain Layout

    "exp": 1362961216149,
\end_layout

\begin_layout Plain Layout

    "aud": "urn:x-gss:imap/rand.mit.de.padl.com"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the channel binding token that protects the GS2 header.
\end_layout

\begin_layout Standard
Turning to the response backed assertion sent from the IMAP server to the
 mail user agent, we have the following after base64 decoding:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlEempDQ0FyYWdBd0lCQWdJQkJ
\end_layout

\begin_layout Plain Layout

6QU5CZ2txaGtpRzl3MEJBUVVGQURCZE1Rc3dDUVlEVlFRR0V3SkJWVEVlTU
\end_layout

\begin_layout Plain Layout

J3R0ExVUVDZ3dWVUVGRVRDQlRiMlowZDJGeVpTQlFkSGtnVEhSa01TNHdMQ
\end_layout

\begin_layout Plain Layout

VlEVlFRRERDVlFRVVJNSUZOdlpuUjNZWEpsSUVObGNuUnBabWxqWVhScGIy
\end_layout

\begin_layout Plain Layout

NGdRWFYwYUc5eWFYUjVNQjRYRFRFek1ERXhNVEExTXpReU1Gb1hEVEUyTUR
\end_layout

\begin_layout Plain Layout

FeE1UQTFNelF5TUZvd1RERUxNQWtHQTFVRUJoTUNRVlV4SGpBY0JnTlZCQW
\end_layout

\begin_layout Plain Layout

9NRlZCQlJFd2dVMjltZEhkaGNtVWdVSFI1SUV4MFpERWRNQnNHQTFVRUF3d
\end_layout

\begin_layout Plain Layout

1VjbUZ1WkM1dGFYUXVaR1V1Y0dGa2JDNWpiMjB3Z2dFaU1BMEdDU3FHU0li
\end_layout

\begin_layout Plain Layout

M0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREJoekZwZkw2dkh4c3gyRHZ
\end_layout

\begin_layout Plain Layout

GWlArR1IwVW9tRHAvQ0VlK09ITjBaMGM2OTFZZzlnV1htVTNuUHFWVGJBSX
\end_layout

\begin_layout Plain Layout

FYSDhBVXR2ZjdNemJZMjhvVmxwWlQwNXptMmMvdEUzZ2toVHhtWE9SZ1FyY
\end_layout

\begin_layout Plain Layout

3V1Z3VqT1hNRmhJNHN2RVorQ2JIUGxaaVovVHprWExIUDI5RXo3d05abjFI
\end_layout

\begin_layout Plain Layout

NTdBTHFtU0FvNVQ0cXhNRmdCWXVkdy9aeFBSekR0VW9JVjBzMjNZZzR4VDl
\end_layout

\begin_layout Plain Layout

hd0pucjFHZ01VUmliVUJqRjd5YmNtMEs4c0pUK1VHZUI3cm1MbFB3K2ZBa0
\end_layout

\begin_layout Plain Layout

9mN1pqWjl0cFRrRU1pOHVMRU1xY3hhR1NBSy8ra1c3NXFPeGRBRkk4ellaW
\end_layout

\begin_layout Plain Layout

DUzZ3BnNG1pK1FXZkdZMVpOUUpNdUhHUVhnL3VmeE16YXhOTjRoMWFPbG1a
\end_layout

\begin_layout Plain Layout

WllrQkhwNTJBOXlJTVViQWdNQkFBR2pnYWt3Z2FZd0NRWURWUjBUQkFJd0F
\end_layout

\begin_layout Plain Layout

EQXNCZ2xnaGtnQmh2aENBUTBFSHhZZFQzQmxibE5UVENCSFpXNWxjbUYwWl
\end_layout

\begin_layout Plain Layout

dRZ1EyVnlkR2xtYVdOaGRHVXdIUVlEVlIwT0JCWUVGS1NzdWJFRHViUklHS
\end_layout

\begin_layout Plain Layout

ENCdHRBbFR2MkZXR2YrTUI4R0ExVWRJd1FZTUJhQUZMaXpabE1XbktLMVBZ
\end_layout

\begin_layout Plain Layout

YWdkSmprVnVSaEVRSmpNQWtHQTFVZEVRUUNNQUF3Q3dZRFZSMFBCQVFEQWd
\end_layout

\begin_layout Plain Layout

YZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TURNQTBHQ1NxR1NJYjNEUU
\end_layout

\begin_layout Plain Layout

VCQlFVQUE0SUJBUUJEMUJ6UVArck4xVVV6N0E2eitLRFBhcThzMmlCRzBGe
\end_layout

\begin_layout Plain Layout

lp4c1gyUVVPdXBCRUlidVpwMEtKYXVqVk1nMDFmZGpzdUdHMHVYYk1mZVJH
\end_layout

\begin_layout Plain Layout

eU5sVXNNTitaRHk4L01JT2gxYVVHdjBTVXdLdEN0THRXckp2NjV1d0hHR3Q
\end_layout

\begin_layout Plain Layout

1dUZLeE1FNjFWVDQrcXBJMkFHcXh4NWRyc3hFTEJPZHlQbmV1QWlMUHhGdW
\end_layout

\begin_layout Plain Layout

JSRm16dWhWU0k3QVBNbDc5T2szMG9XdWRBNDlsVVg5d3ozZzlxOXZkbDl5a
\end_layout

\begin_layout Plain Layout

GdlZVVTVXBNaGxaMjRVYzlQdUx6cjE1ajZ2NjNYenJTZFd0Tnp2MEYxMGVE
\end_layout

\begin_layout Plain Layout

bDR5VFVOV1NKaDdxQmhncTFJb1g5QVBPT3VMYk1OcnA2YmVFZW93aDM0cFZ
\end_layout

\begin_layout Plain Layout

XZlRhU3hJN25LNTdrSzJ4aFJVNDNld1lqMmkvU3J6OEdzTVM5MXVyMjVJdC
\end_layout

\begin_layout Plain Layout

JdfQ.eyJ0a3QiOnsianRpIjoiYWVheTBHSml6RHg3OUFnLS1XTC12dzZZOU
\end_layout

\begin_layout Plain Layout

JYeFJ1QzFYc1p4cnk1MVNVSSIsImV4cCI6MTM2Mjk5NzA5ODAwMH0sImVjZ
\end_layout

\begin_layout Plain Layout

GgiOnsieCI6IkoxSVdiSDJBNUMzY2hPVUlxbWZYcFBfUlFFRU9tZDJFeFhv
\end_layout

\begin_layout Plain Layout

S3JxUVFYTE0iLCJ5IjoiXzJFdHhiel92SmVlVVVieTJyZmRla1RUUFVScGJ
\end_layout

\begin_layout Plain Layout

HSkg3a3lJV3Fta0lFZyJ9LCJub25jZSI6Img1UDRLckc4eW5nIiwiZXhwIj
\end_layout

\begin_layout Plain Layout

oxMzYyOTY0Njk2MDAwfQ.qZhUqupVPx3E7MI0GvsHf6DGzsspr2BluET0Sp
\end_layout

\begin_layout Plain Layout

0DqvJEKQxKpb8o_iVlXvPkjvIztBnIj3MoO8RVLQbptOPd1k7qhMEpFHNTb
\end_layout

\begin_layout Plain Layout

5XZJaeINPiACRK09uFiTNnwW1js1CzOcaLjLlI3xlWd-Iuzo388rMLlIudn
\end_layout

\begin_layout Plain Layout

i1jNnE-29v_sSTNtq-C0Bch5C0Owkl71BNxxx3hUqxG1OL4Pt2gBJYAP_sN
\end_layout

\begin_layout Plain Layout

VMvh1pX9aG7tVk4Kk1KccitjPWF7GWsrFzWxzDR0u6DFtFachCObefrfgfE
\end_layout

\begin_layout Plain Layout

19qeZrKrzI0UdCrDPzYk9XoWJGkpFSOwWac_vCCuuv5V3Gd_LNSI3rBi-Fa
\end_layout

\begin_layout Plain Layout

ehYHAF1IQ
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we show the JWT header for the response assertion, as it includes an
 ASN.1 encoded X.509 certificate, which is used to mutually authenticate the
 IMAP server to the UA:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "alg": "RS256",
\end_layout

\begin_layout Plain Layout

    "x5c": [
\end_layout

\begin_layout Plain Layout

        "MIIDzjCCAragAwIBAgIBBzANBgkqhkiG9w0BAQUFADBdMQswCQ
\end_layout

\begin_layout Plain Layout

         YDVQQGEwJBVTEeMBwGA1UECgwVUEFETCBTb2Z0d2FyZSBQdHkg
\end_layout

\begin_layout Plain Layout

         THRkMS4wLAYDVQQDDCVQQURMIFNvZnR3YXJlIENlcnRpZmljYX
\end_layout

\begin_layout Plain Layout

         Rpb24gQXV0aG9yaXR5MB4XDTEzMDExMTA1MzQyMFoXDTE2MDEx
\end_layout

\begin_layout Plain Layout

         MTA1MzQyMFowTDELMAkGA1UEBhMCQVUxHjAcBgNVBAoMFVBBRE
\end_layout

\begin_layout Plain Layout

         wgU29mdHdhcmUgUHR5IEx0ZDEdMBsGA1UEAwwUcmFuZC5taXQu
\end_layout

\begin_layout Plain Layout

         ZGUucGFkbC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwgg
\end_layout

\begin_layout Plain Layout

         EKAoIBAQDBhzFpfL6vHxsx2DvFZP+GR0UomDp/CEe+OHN0Z0c6
\end_layout

\begin_layout Plain Layout

         91Yg9gWXmU3nPqVTbAIqXH8AUtvf7MzbY28oVlpZT05zm2c/tE
\end_layout

\begin_layout Plain Layout

         3gkhTxmXORgQrcuugujOXMFhI4svEZ+CbHPlZiZ/TzkXLHP29E
\end_layout

\begin_layout Plain Layout

         z7wNZn1H57ALqmSAo5T4qxMFgBYudw/ZxPRzDtUoIV0s23Yg4x
\end_layout

\begin_layout Plain Layout

         T9awJnr1GgMURibUBjF7ybcm0K8sJT+UGeB7rmLlPw+fAkOf7Z
\end_layout

\begin_layout Plain Layout

         jZ9tpTkEMi8uLEMqcxaGSAK/+kW75qOxdAFI8zYZX53gpg4mi+
\end_layout

\begin_layout Plain Layout

         QWfGY1ZNQJMuHGQXg/ufxMzaxNN4h1aOlmZZYkBHp52A9yIMUb
\end_layout

\begin_layout Plain Layout

         AgMBAAGjgakwgaYwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHx
\end_layout

\begin_layout Plain Layout

         YdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0O
\end_layout

\begin_layout Plain Layout

         BBYEFKSsubEDubRIGHCBttAlTv2FWGf+MB8GA1UdIwQYMBaAFL
\end_layout

\begin_layout Plain Layout

         izZlMWnKK1PYagdJjkVuRhEQJjMAkGA1UdEQQCMAAwCwYDVR0P
\end_layout

\begin_layout Plain Layout

         BAQDAgXgMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA0GCSqGSIb3DQ
\end_layout

\begin_layout Plain Layout

         EBBQUAA4IBAQBD1BzQP+rN1UUz7A6z+KDPaq8s2iBG0FzZxsX2
\end_layout

\begin_layout Plain Layout

         QUOupBEIbuZp0KJaujVMg01fdjsuGG0uXbMfeRGyNlUsMN+ZDy
\end_layout

\begin_layout Plain Layout

         8/MIOh1aUGv0SUwKtCtLtWrJv65uwHGGt5uFKxME61VT4+qpI2
\end_layout

\begin_layout Plain Layout

         AGqxx5drsxELBOdyPneuAiLPxFubRFmzuhVSI7APMl79Ok30oW
\end_layout

\begin_layout Plain Layout

         udA49lUX9wz3g9q9vdl9yhgeeUSUpMhlZ24Uc9PuLzr15j6v63
\end_layout

\begin_layout Plain Layout

         XzrSdWtNzv0F10eDl4yTUNWSJh7qBhgq1IoX9APOOuLbMNrp6b
\end_layout

\begin_layout Plain Layout

         eEeowh34pVWfTaSxI7nK57kK2xhRU43ewYj2i/Srz8GsMS91ur
\end_layout

\begin_layout Plain Layout

         25It"]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The assertion payload is below (again, for clarity the actual JWT signature
 has been omitted):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "tkt": {
\end_layout

\begin_layout Plain Layout

        "jti": "aeay0GJizDx79Ag--WL-vw6Y9BXxRuC1XsZxry51SUI",
\end_layout

\begin_layout Plain Layout

        "exp": 1362997098000
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "ecdh": {
\end_layout

\begin_layout Plain Layout

        "x": "J1IWbH2A5C3chOUIqmfXpP_RQEEOmd2ExXoKrqQQXLM",
\end_layout

\begin_layout Plain Layout

        "y": "_2Etxbz_vJeeUUby2rfdekTTPURpbGJH7kyIWqmkIEg"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "nonce": "h5P4KrG8yng",
\end_layout

\begin_layout Plain Layout

    "exp": 1362964696000
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the fast re-authentication ticket and the nonce echoed back from the
 initiator.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This section only addresses security considerations associated with the
 BrowserID GSS mechanism described in this document.
 It does not address security considerations associated with the BrowserID
 protocol or the GSS-API themselves.
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Standard
There are security issues associated with the use of JavaScript for cryptography.
\end_layout

\begin_layout Subsection
Host certificates for mutual authentication
\end_layout

\begin_layout Standard
Allowing a match on only the DNS subjectAltName in an acceptor's X.509 certificat
e permits different services on the same host to impersonate each other.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout Standard
This specification creates a number of IANA registries.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:OID Registry"

\end_inset

OID Registry
\end_layout

\begin_layout Standard
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID (1.3.6.1.4.1.5322.24)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mechanisms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sub-arc containing BrowserID mechanisms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nametypes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sub-arc containing BrowserID name types
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.mechanisms (1.3.6.1.4.1.5322.
24.1)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ECDH curve
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symmetric hash
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-null
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The NULL security mechanism
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-aes128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The aes128-cts-hmac-sha1-96 mechanism
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
P-256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HS256
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-aes256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The aes256-cts-hmac-sha1-96 mechanism
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
P-521
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HS256
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.nametypes (1.3.6.1.4.1.5322.2
4.2)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GSS_C_NT_BROWSERID_PRINCIPAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:GSS_C_NT_BROWSERID_PRINCIPAL"

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
SASL Registry
\end_layout

\begin_layout Standard
Subject: Registration of SASL mechanisms BROWSERID-AES128 and BROWSERID-AES128-P
LUS
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
SASL mechanism names: BROWSERID-AES128 and BROWSERID-AES128-PLUS
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Security considerations: See RFC 5801 and draft-howard-gss-browserid
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Published specification (recommended): draft-howard-gss-browserid
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Person & email address to contact for further information:
\end_layout

\begin_layout Standard
Luke Howard lukeh@padl.com
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Intended usage: common
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Owner/Change controller: iesg@ietf.org
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Note: This mechanism describes the GSS BrowserID mechanism used with the
 aes128-cts-hmac-sha1-96 enctype.
 The GSS-API OID for this mechanism is 1.3.6.1.4.1.5322.24.1.17.
 As described in RFC 5801 a PLUS variant of this mechanism is also required.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status open

\begin_layout Plain Layout
<reference anchor="BrowserID"><front><title>BrowserID Specification</title><auth
or initials="B." surname="Adida" fullname="Ben Adida"><organization>The Mozilla
 Foundation</organization></author><date year="2013" day="26" month="February"/>
</front><format type="TXT" target="https://raw.github.com/mozilla/id-specs/prod/br
owserid/index.md"/></reference>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC2743"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC3961"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3961.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4402"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4402.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4121"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4178"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4178.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4422"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4757"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4757.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5178"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5178.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5801"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5801.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5929"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC6680"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6680.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWA"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWS"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWT"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-json-web-token.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "NegoEx"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.zhu-negoex.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4120"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
