#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A SASL and GSS-API Mechanism for the BrowserID Authentication Protocol
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-howard-gss-browserid-00.txt
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
exp
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
BrowserID SASL & GSS-API
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Luke Howard 
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
PADL Software
\end_layout

\end_inset

 
\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
PADL
\end_layout

\end_inset

 
\begin_inset Flex AuthorInitials
status open

\begin_layout Plain Layout
L.
\end_layout

\end_inset

 
\begin_inset Flex AuthorSurname
status open

\begin_layout Plain Layout
Howard
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrStreet
status open

\begin_layout Plain Layout
PO Box 59
\end_layout

\end_inset


\begin_inset Flex AuthorAddrCity
status open

\begin_layout Plain Layout
Central Park
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrRegion
status open

\begin_layout Plain Layout
VIC
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrCountry
status open

\begin_layout Plain Layout
Australia
\end_layout

\end_inset

 
\begin_inset Flex AuthorAddrCode
status open

\begin_layout Plain Layout
3145
\end_layout

\end_inset

 
\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
lukeh@padl.com
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams 
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset

 
\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset

 
\begin_inset Flex AuthorInitials
status open

\begin_layout Plain Layout
N.
\end_layout

\end_inset


\begin_inset Flex AuthorSurname
status open

\begin_layout Plain Layout
Williams
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document defines protocols, procedures and conventions for a Generic
 Security Service Application Program Interface (GSS-API) security mechanism
 based on the BrowserID authentication mechanism.
 Through the GS2 family of mechanisms defined in RFC 5801, these protocols
 also define how Simple Authentication and Security Layer (SASL, RFC 4422)
 applications may use BrowserID.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
BrowserID is a web-based three-party security protocol by which user agents
 can present to a Relying Party (RP) a signed assertion of e-mail address
 ownership.
 BrowserID was intended to be used for web authentication.
 We find BrowserID to be useful in general, therefore we define herein how
 to use it in many more applications.
\end_layout

\begin_layout Standard
The Simple Authentication and Security Layer (SASL) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

 is a framework for providing authentication and message protection services
 via pluggable mechanisms.
 Protocols that support it include IMAP, SMTP, and XMPP.
\end_layout

\begin_layout Standard
The Generic Security Service Application Program Interface (GSS-API) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 provides a framework for authentication and message protection services
 through a common programming interface.
 This document conforms to the SASL and GSS-API bridge specified in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5801
\end_layout

\end_inset

, so it defines both a SASL and GSS-API mechanism.
\end_layout

\begin_layout Standard
The BrowserID mechanism described in this document reuses the existing web-based
 BrowserID protocol, but profiles it for use in applications that support
 SASL or GSS-API, adding features such as key exchange, mutual authentication,
 and fast re-authentication.
\end_layout

\begin_layout Standard
The following diagram illustrates the interactions between the three parties
 in the GSS BrowserID protocol.
 Note that the terms client, initiator and user agent (UA) are used interchangea
bly in this document, as are server, acceptor and relying party (RP).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

                    +------------------+
\end_layout

\begin_layout Plain Layout

                    | BrowserID  |
\end_layout

\begin_layout Plain Layout

                    | identity   |
\end_layout

\begin_layout Plain Layout

                    | provider   |
\end_layout

\begin_layout Plain Layout

                    +------------------+
\end_layout

\begin_layout Plain Layout

                      //      
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                     //        
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                    //          
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                   //            
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

   make signed    //              
\backslash

\backslash
    fetch IdP public
\end_layout

\begin_layout Plain Layout

   certificate   //                
\backslash

\backslash
   key over HTTPS
\end_layout

\begin_layout Plain Layout

   for user's   //                  
\backslash

\backslash
  (RP may cache)
\end_layout

\begin_layout Plain Layout

   public key  //                    
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

              //                      
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

             //                        
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

            //                          
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

           |/                            
\backslash
|
\end_layout

\begin_layout Plain Layout

    +-------------------+                     +-------------------+
\end_layout

\begin_layout Plain Layout

    | SASL or GSS |    GSS BrowserID    | SASL or GSS |
\end_layout

\begin_layout Plain Layout

    | client/UA   |<---------------------------->| server/RP   |
\end_layout

\begin_layout Plain Layout

    | (initiator) |                     | (acceptor)  |
\end_layout

\begin_layout Plain Layout

    +-------------------+                     +-------------------+
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Interworking Architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Discovery and Negotiation
\end_layout

\begin_layout Standard
The means of discovering GSS-API peers and their supported mechanisms is
 out of this specification's scope.
 They may use SASL 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

 or the Simple and Protected Negotiation mechanism (SPNEGO) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4178
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Discovery of a BrowserID identity provider (IdP) for a user is described
 in the BrowserID specification.
 A domain publishes a document containing their public key and URIs for
 authenticating and provisioning users, or pointer to an authority containing
 such a document.
\end_layout

\begin_layout Subsection
Authentication
\end_layout

\begin_layout Standard
The GSS-API protocol involves a client, known as the initiator, sending
 an initial security context token of a chosen GSS-API security mechanism
 to a peer, known as the acceptor.
 The two peers subsequently exchange, synchronously, as many security context
 tokens as necessary to complete the authentication or fail.
 The specific number of context tokens exchanged varies by security mechanism:
 in the case of the BrowserID mechanism, it is typically two (i.e.
 a single round trip), however it can be more in some cases.
 Once authentication is complete, the initiator and acceptor share a security
 context which identifies the peers and can optionally be used for integrity
 or confidentiality protecting subsequent application messages.
\end_layout

\begin_layout Standard
The original BrowserID protocol, as defined outside this document, specifies
 a bearer token authentication protocol for web applications.
 The user agent generates a short-term key pair, the public key of which
 is signed by the user's IdP.
 (The user must have already authenticated to the IdP; how this is done
 is not specified by BrowserID, but forms-based authentication is common.)
 The IdP returns a certificate for the user which may be cached by the user's
 browser.
 When authenticating to a Relying Party (RP), the browser generates an identity
 assertion containing the RP domain and an expiration time.
 The user agent signs this and presents both the assertion and certificate
 to the RP.
 (The combination of an assertion and zero or more certificates is termed
 a 
\begin_inset Quotes eld
\end_inset

backed assertion
\begin_inset Quotes erd
\end_inset

.) The RP fetches the public key for the IdP, validates the user's certificate
 (and those of any intermediate certifying parties) and then verifies the
 assertion.
\end_layout

\begin_layout Standard
The GSS BrowserID protocol extends this by having the RP always send back
 a response to the user agent, which at a minimum provides key confirmation
 (for mechanisms that support key exchange) and indicates the lifetime of
 the established security context.
 In an extension of the base protocol, it can also allow the user agent
 to mutually authenticate the RP.
\end_layout

\begin_layout Subsection
Message protection services
\end_layout

\begin_layout Standard
GSS-API provides a number of a message protection services:
\end_layout

\begin_layout Description
GSS_Wrap() integrity and optional confidentiality for a message
\end_layout

\begin_layout Description
GSS_GetMIC() integrity for a message sent separately
\end_layout

\begin_layout Description
GSS_Pseudo_random() key derivation
\end_layout

\begin_layout Standard
These services may be used with security contexts that have a shared session
 key, to protect messages that are exchanged by the application protocol.
\end_layout

\begin_layout Section
Requirements notation
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The reader is assumed to be familiar with the terms used in the BrowserID
 specification.
\end_layout

\begin_layout Section
Naming
\end_layout

\begin_layout Subsection
GSS name types
\end_layout

\begin_layout Subsubsection
GSS_C_NT_BROWSERID_PRINCIPAL
\end_layout

\begin_layout Standard
This name may contain an e-mail address, or a service principal name identifying
 an acceptor.
 The encoding of service principal names is intended to be somewhat compatible
 with the Kerberos 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 security protocol (without the realm name).
 The following ABNF defines the 'name' rule that names of this type must
 match.
 [XXX Should we reference RFC2822 here? The Mozilla BrowserID docs sure
 don't...
 -Nico]
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 char-normal = %x00-2E/%x30-3F/%x41-5B/%x5D-FF
\end_layout

\begin_layout Plain Layout

 char-escaped = "
\backslash
" %x2F / "
\backslash
" %x40 / "
\backslash
" %x5C
\end_layout

\begin_layout Plain Layout

 name-char = char-normal / char-escaped name-string = 1*name-char
\end_layout

\begin_layout Plain Layout

 user = name-string
\end_layout

\begin_layout Plain Layout

 domain = name-string
\end_layout

\begin_layout Plain Layout

 email = user "@" domain
\end_layout

\begin_layout Plain Layout

 service-name = name-string
\end_layout

\begin_layout Plain Layout

 service-host = name-string
\end_layout

\begin_layout Plain Layout

 service-specific = name-string
\end_layout

\begin_layout Plain Layout

 service-specifics = service-specific 0*("/" service-specifics)
\end_layout

\begin_layout Plain Layout

 spn = service-name ["/" service-host [ "/" service-specifics]]
\end_layout

\begin_layout Plain Layout

 name = email / spn
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
GSS_C_NT_USER_NAME
\end_layout

\begin_layout Standard
This name is implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.
 A default domain may be appended when importing names of this type.
\end_layout

\begin_layout Subsubsection
GSS_C_NT_HOSTBASED_SERVICE
\end_layout

\begin_layout Standard
This name is transformed by replacing the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 symbol with a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

, and then implicitly converted to a GSS_C_NT_BROWSERID_PRINCIPAL.
\end_layout

\begin_layout Subsubsection
GSS_C_NT_DOMAINBASED_SERVICE
\end_layout

\begin_layout Standard
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5178
\end_layout

\end_inset

 domain-based service names are transformed into a GSS_C_NT_BROWSERID_PRINCIPAL
 as follows:
\end_layout

\begin_layout Itemize
the <service> name becomes the first component of the BrowserID principal
 name (service-name in ABNF)
\end_layout

\begin_layout Itemize
the <hostname> becomes the second component (service-host)
\end_layout

\begin_layout Itemize
the <domain> name becomes the third component (service-specific)
\end_layout

\begin_layout Subsection
Audience encoding
\end_layout

\begin_layout Standard
A GSS-API service name is encoded into a BrowserID audience URL with the
 following syntax, where spn is defined above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 audience = "urn:x-gss:" spn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
[XXX can we request assignment of a URN outside the experimental namespace?]
\end_layout

\begin_layout Subsection
Name Canonicalization
\end_layout

\begin_layout Standard
The BrowserID GSS-API mechanism performs no name canonicalization.
 The mechanism's GSS_Canonicalize_name() returns an MN whose display form
 is the same as the query form.
\end_layout

\begin_layout Subsection
Exported Name Token Format
\end_layout

\begin_layout Standard
The exported name token format for the BrowserID GSS-API mechanism is the
 same as the query form, plus the standard exported name token format header
 mandated by the GSS-API 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Context tokens
\end_layout

\begin_layout Standard
All context tokens include a two-byte token identifier followed by a backed
 BrowserID assertion.
 This document defines the following token IDs:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Section
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Token ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Initial-context-token"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x632C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initiator context token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Acceptor-context-token"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x432C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acceptor context token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TBD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x442C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Context deletion token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:NegoEx"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x6D2C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initiator metadata token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:NegoEx"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x4D2C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acceptor metadata token
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The token ID has a human-readable ASCII encoding for the benefit of pure
 SASL implementations of this mechanism.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Initial-context-token"

\end_inset

Initial context token
\end_layout

\begin_layout Standard
The initial context token is framed per section 1 of 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 GSS-API DEFINITIONS ::=         
\end_layout

\begin_layout Plain Layout

     BEGIN
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

     MechType ::= OBJECT IDENTIFIER
\end_layout

\begin_layout Plain Layout

     -- representing BrowserID mechanism
\end_layout

\begin_layout Plain Layout

     GSSAPI-Token ::=
\end_layout

\begin_layout Plain Layout

     [APPLICATION 0] IMPLICIT SEQUENCE {
\end_layout

\begin_layout Plain Layout

         thisMech MechType,
\end_layout

\begin_layout Plain Layout

         innerToken ANY DEFINED BY thisMech
\end_layout

\begin_layout Plain Layout

             -- token ID || backed assertion
\end_layout

\begin_layout Plain Layout

     }
\end_layout

\begin_layout Plain Layout

     END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unlike many other GSS-API mechanisms such as Kerberos, this token framing
 is not used by subsequent context or 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.zhu-negoex
\end_layout

\end_inset

 metadata tokens.
 As such, pure SASL implementations of this mechanism do not need to deal
 with DER encoding the mechanism object identifier.
\end_layout

\begin_layout Standard
GSS BrowserID is a family of mechanisms, where the last element in the OID
 arc indicates the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 encryption type supported for message protection services.
 The OID prefix is 1.3.6.1.4.1.5322.24.1.
 The NULL encryption type is valid, in which case key confirmation and message
 protection services are not provided.
\end_layout

\begin_layout Standard
The innerToken consists of the initiator context token ID concatenated with
 a backed assertion for the audience corresponding to the target name passed
 into GSS_Init_sec_context().
 In addition, the assertion may contain the following additional claims,
 which are described later in this document:
\end_layout

\begin_layout Itemize
Channel binding information
\end_layout

\begin_layout Itemize
ECDH parameters for session key establishment
\end_layout

\begin_layout Standard
The call to GSS_Init_sec_context() returns GSS_C_CONTINUE_NEEDED to indicate
 that a subsequent token from the acceptor is expected.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Acceptor-context-token"

\end_inset

Acceptor context token
\end_layout

\begin_layout Standard
Upon receiving a context token from the initiator, the acceptor validates
 that the token is well formed and contains the correct mechanism OID and
 token type.
\end_layout

\begin_layout Standard
The acceptor then verifies the backed identity assertion per the BrowserID
 specification.
 This includes validating the expiry times, audience, certificate chain,
 and assertion signature.
 In the case of failure, an error token is generated and immediately returned.
\end_layout

\begin_layout Standard
The acceptor then verifies the channel binding token, if present, and any
 other GSS-specific claims in the assertion.
 In case of failure, an error token is generated.
\end_layout

\begin_layout Standard
If the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

 encryption type for the selected mechanism is not ENCTYPE_NULL, the acceptor
 generates a ECDH public key using the parameters received from the client,
 and from it derives the RP Response Key (RRK).
 The acceptor then generates a response assertion containing the ECDH public
 key and context expiry time.
 The response assertion is signed using the RP Response Key (RRK) unless
 mutual authentication is desired, in which case it may be signed in the
 acceptor's private key (see below).
 The response token is encoded as a backed assertion, even though it will
 typically have a certificate count of zero (because the signing key is
 the shared RRK, or because an X.509 certificate is included directly in
 the assertion's JWT header).
\end_layout

\begin_layout Standard
Finally, the context root key (CRK) is derived from the ECDH shared secret
 and GSS_S_COMPLETE is returned, along with the initiator name from the
 verified assertion.
 Other assertion/certificate attributes MAY be made available via GSS_Get_name_a
ttribute().
\end_layout

\begin_layout Subsection
Initiator context completion
\end_layout

\begin_layout Standard
Upon receiving the acceptor context token, the initiator unpacks the response
 assertion and, if necessary, computes the ECDH shared secret and RRK.
 The RRK is used to verify the response assertion unless mutual authentication
 is desired, in which case the acceptor's public key will be used.
\end_layout

\begin_layout Standard
The initiator sets the context expiry time with that received in the response
 assertion.
 If the context has expired, GSS_S_CONTEXT_EXPIRED is returned and context
 establishment fails.
\end_layout

\begin_layout Standard
The context root key (CRK) is derived from the ECDH shared secret and GSS_S_COMP
LETE is returned to indicate the user is authenticated and the context is
 ready for use.
 No output token is emitted.
\end_layout

\begin_layout Subsection
Extensions for mutual authentication
\end_layout

\begin_layout Standard
Mutual authentication allows the acceptor to be authenticated to the initiator.
 The initiator may return GSS_C_MUTUAL_FLAG flag to the caller.
 Support for mutual authentication is OPTIONAL.
\end_layout

\begin_layout Standard
The base protocol is extended as follows to support this:
\end_layout

\begin_layout Subsubsection
Initiator mutual authentication context token
\end_layout

\begin_layout Standard
If the initiator requested GSS_C_MUTUAL_FLAG, a nonce is included in the
 assertion to bind the initiator and acceptor tokens.
\end_layout

\begin_layout Subsubsection
Acceptor mutual authentication context token
\end_layout

\begin_layout Standard
If the acceptor has a private key available and received a nonce in the
 initiator assertion, it signs the response using a private key rather than
 the RP Response Key (RRK).
 The response includes the nonce from the initiator's assertion.
\end_layout

\begin_layout Standard
While the response is a backed assertion, in order to take advantage of
 existing keying infrastructures BrowserID certificates SHOULD NOT be included
 in the backed assertion.
 Instead, an X.509 certificate SHOULD be included as a value for the "x5c"
 header attribute in the assertion (see 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.ietf-jose-json-web-signature
\end_layout

\end_inset

 4.1.6).
\end_layout

\begin_layout Subsubsection
Initiator mutual authentication context completion
\end_layout

\begin_layout Standard
The initiator verifies the nonce and the assertion signature, and validates
 the certificate chain (which SHOULD be an X.509 certificate chain, in which
 case trust anchors SHOULD be configurable both system-wide and specifically
 for the BrowserID mechanism).
\end_layout

\begin_layout Standard
If X.509 certificates are used, then either the audience URI must be present
 in the URI subjectAltName, or the host component must be present as a value
 for the DNS subjectAltName or as the least significant Common Name RDN.
\end_layout

\begin_layout Standard
If BrowserID certificates are used, then either the audience URI must match
 the "uri" key of the "principal" object in the certificate, or the host
 component must match the "hostname" key.
\end_layout

\begin_layout Standard
[XXX when using X.509 certificates, do we need to say anything about key
 usage?]
\end_layout

\begin_layout Subsubsection
Acceptor certificate advertisement
\end_layout

\begin_layout Standard
The acceptor may include its certificate (and optionally any additional
 certs), formatted as a backed assertion with an empty payload, in its NegoEx
 metadata.
 There is no initiator metadata defined.
\end_layout

\begin_layout Subsection
Extensions for fast re-authentication
\end_layout

\begin_layout Standard
Fast re-authentication allows a context to be established without acquiring
 a new BrowserID assertion.
 Instead an assertion signed with a secret key derived from the initial
 ECDH key exchange is used.
 Re-authentication lifetime SHOULD be site configurable, but by default
 SHOULD match the user's certificate expiry time.
 Support for fast re-authentication is OPTIONAL and is indicated by the
 acceptor returning a ticket in the response assertion.
\end_layout

\begin_layout Subsubsection
Ticket generation
\end_layout

\begin_layout Standard
If the acceptor supports re-authentication, the following steps are added
 to the "acceptor to initiator" flow described above.
\end_layout

\begin_layout Enumerate
A unique ticket identifier is generated.
 The acceptor must be able to use this to retrieve the authenticator root
 key, ticket expiry time, mutual authentication state, and any other attributes
 re-authenticated acceptor contexts will need.
\end_layout

\begin_layout Enumerate
The acceptor creates a JSON object containing the ticket identifier and
 expiry time and returns it in the response to the initiator.
\end_layout

\begin_layout Standard
The initiator MAY cache such tickets, along with the ARK and expiry time,
 received from the acceptor in order to re-authenticate to it at a future
 time.
\end_layout

\begin_layout Subsubsection
Initiator re-authentication context token
\end_layout

\begin_layout Standard
The initiator looks in its ticket cache for an unexpired ticket for the
 desired acceptor.
 If none is found, the normal authentication flow is performed, otherwise:
\end_layout

\begin_layout Enumerate
The initiator generates an authenticator containing: the current time, a
 random nonce, the ticket identifier, and the target name (audience) and
 channel bindings requested by the application.
\end_layout

\begin_layout Enumerate
The initiator signs the authenticator using its copy of the ARK, using the
 appropriate hash algorithm associated with the original context (only HS256
 is presently specified).
\end_layout

\begin_layout Enumerate
The authenticator is packed into a backed assertion with no certificates.
\end_layout

\begin_layout Enumerate
The initiator generates an authenticator session key to be used in verifying
 the response and in deriving the context root key.
\end_layout

\begin_layout Enumerate
The assertion is sent to the acceptor.
\end_layout

\begin_layout Subsubsection
Acceptor re-authentication context token
\end_layout

\begin_layout Enumerate
The acceptor unpacks the authenticator assertion and retrieves the authenticator
 root key, ticket expiry time, mutual authentication state and any other
 attributes (such as the initiator principal) associated with the ticket
 identifier.
\end_layout

\begin_layout Enumerate
The acceptor validates that the ticket and authenticator have not expired.
\end_layout

\begin_layout Enumerate
The acceptor verifies the authenticator using its copy of the ARK.
\end_layout

\begin_layout Enumerate
The acceptor generates the ASK and derived the RRK and CRK from this.
\end_layout

\begin_layout Enumerate
The acceptor generates a response and signs and returns it.
 
\end_layout

\begin_layout Standard
If the ticket cannot be found, or the authentication fails, the acceptor
 MAY return an error code in its response, permitting the initiator to recover
 and fallback to generating a BrowserID assertion.
 It MAY also include its local timestamp so that the initiator can perform
 clock skew compensation.
\end_layout

\begin_layout Subsubsection
Interaction with mutual authentication
\end_layout

\begin_layout Standard
The mutual authentication state of a re-authenticated context is transitive.
 The initiator MUST NOT return GSS_C_MUTUAL_FLAG for a re-authenticated
 context unless the original context was mutually authenticated.
\end_layout

\begin_layout Standard
As such, the initiator's ticket cache must store the mutual authentication
 state of the original context.
\end_layout

\begin_layout Section
Validation
\end_layout

\begin_layout Subsection
Expiry times
\end_layout

\begin_layout Standard
The expiry and, if present, issued-at and not-before times of all elements
 in a backed assertion, MUST be validated.
 This applies equally to re-authentication assertions, public key assertions,
 and the entire certificate chain.
 If the expiry time is absent, the issued-at time MUST be present, and the
 JWT implicitly expires a configurable interval (typically five minutes)
 after the issued-at time.
\end_layout

\begin_layout Standard
The GSS context lifetime SHOULD NOT exceed the lifetime of the user's certificat
e.
\end_layout

\begin_layout Standard
The lifetime of a re-authentication ticket SHOULD NOT exceed the lifetime
 of the user's certificate.
 The acceptor MUST validate the ticket expiry time when performing re-authentica
tion.
\end_layout

\begin_layout Standard
Message protections services such as GSS_Wrap() SHOULD be available beyond
 the GSS context lifetime for maximum application compatibility.
\end_layout

\begin_layout Subsection
Audience
\end_layout

\begin_layout Standard
If the credential passed to GSS_Accept_sec_context() is not for GSS_C_NO_NAME,
 then its string representation as a BrowserID principal MUST match the
 unpacked audience (that is, the audience without the URN prefix and encoded
 claims dictionary).
\end_layout

\begin_layout Subsection
Channel bindings
\end_layout

\begin_layout Standard
If the acceptor passed in channel bindings to GSS_Accept_sec_context(),
 the assertion MUST contain a matching channel binding claim.
 (Only the application_data component is validated.) 
\end_layout

\begin_layout Subsection
Signatures
\end_layout

\begin_layout Standard
Signature validation on assertions is the same as for the web usage of BrowserID
, with the addition that response and re-authentication assertions may be
 signed with a symmetric key.
\end_layout

\begin_layout Subsection
Replay detection
\end_layout

\begin_layout Standard
The acceptor SHOULD maintain a cache of received assertions in order to
 guard against replay attacks.
 GSS_C_REPLAY_FLAG MUST NOT be returned if the implementation does not support
 replay detection.
\end_layout

\begin_layout Section
Fast re-authentication
\end_layout

\begin_layout Standard
When using fast re-authentication, the payload of the initiator assertion
 contains the following claims:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 iat = issue time
\end_layout

\begin_layout Plain Layout

 nonce = 64-bit base64 URL encoded random nonce
\end_layout

\begin_layout Plain Layout

 tkt = opaque ticket identifier
\end_layout

\begin_layout Plain Layout

 aud = audience containing service principal name
\end_layout

\begin_layout Plain Layout

 cbt = OPTIONAL; base64 URL encoding of channel binding application-specific
 data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The re-authentication assertion has an implicit expiry of a short interval
 after the issue time.
\end_layout

\begin_layout Standard
The ticket expiry time must be securely available to the acceptor, along
 with the subject, issuer, audience, expiry time and ARK of the original
 assertion.
 One implementation choice may be to use the opaque ticket identifier as
 a key into a dictionary containing this information (possibly sharing the
 replay cache).
 Another would be to encrypt this information in a long-term secret only
 known to the acceptor and encode the resulting ciphertext in the opaque
 ticket identifier.
\end_layout

\begin_layout Standard
The fast re-authentication assertion is signed with a HMAC using the authenticat
or root key (ARK).
\end_layout

\begin_layout Section
Assertion claims
\end_layout

\begin_layout Subsection
Request assertion
\end_layout

\begin_layout Standard
These claims are included in the assertion sent to the acceptor and are
 authenticated by the initiator's private key and certificate chain.
 Here is an example assertion containing Elliptic Curve Diffie-Hellman parameter
s:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 { 
\end_layout

\begin_layout Plain Layout

 	"exp": 1360158396188,
\end_layout

\begin_layout Plain Layout

 	"ecdh": {
\end_layout

\begin_layout Plain Layout

 		"crv": "P-256",
\end_layout

\begin_layout Plain Layout

 		"x": "JR5UPDgMLFPZwOGaKKSF24658tB1DccM1_oHPbCHeZg",
\end_layout

\begin_layout Plain Layout

 		"y": "S45Esx_6DfE5-xdB3X7sIIJ16MwO0Y_RiDc-i5ZTLQ8"
\end_layout

\begin_layout Plain Layout

 	},
\end_layout

\begin_layout Plain Layout

 	"nonce": "GnK2IBA42iQ",
\end_layout

\begin_layout Plain Layout

 	"aud": "urn:x-gss:imap/mail.ietf.org"
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

cbt
\begin_inset Quotes erd
\end_inset

 (Channel Binding Token)
\end_layout

\begin_layout Standard
This contains a channel binding token for binding the GSS context to an
 outer channel (e.g.
 see 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5929
\end_layout

\end_inset

).
 Its value is the base64 URL encoding of the application-specific data component
 of the channel bindings passed to GSS_Init_sec_context() or GSS_Accept_sec_cont
ext().
\end_layout

\begin_layout Subsubsection
"ecdh" (Elliptic Curve Diffie-Hellman key exchange)
\end_layout

\begin_layout Standard
These contain ECDH key parameters for deriving a shared session key with
 the relying party: "crv" contains the curve, "x" the X coordinate and "y"
 the Y coordinate (see JWA section 5.2).
\end_layout

\begin_layout Standard
The curve should have an equivalent strength to the negotiated 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 encryption type: at least P-256 MUST be used for browserid-aes128, and
 P-521 for browserid-aes256.
\end_layout

\begin_layout Subsubsection
"nonce" (Mutual authentication nonce)
\end_layout

\begin_layout Standard
This is a random quantity of at least 64 bits, base 64 URL encoded, which
 is used to bind the initiator and acceptor assertions, in the case where
 mutual authentication is desired.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

aud
\begin_inset Quotes erd
\end_inset

 (Audience)
\end_layout

\begin_layout Standard
The audience, formatted as a URN containing the acceptor's principal name.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

tkt
\begin_inset Quotes erd
\end_inset

 (Ticket identifier)
\end_layout

\begin_layout Standard
The opaque ticket identifier, when the assertion is being used for fast
 re-authentication.
 This matches the 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

 value sent back in the response assertion ticket.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 (Issued at time)
\end_layout

\begin_layout Standard
This contains the time the assertion was issued, when the assertion is being
 used for fast re-authentication.
 The acceptor MUST validate that the ticket was recently issued (a recommended
 interval is five minutes).
\end_layout

\begin_layout Subsection
Response assertion
\end_layout

\begin_layout Standard
The response assertion is sent from the acceptor to the initiator.
 It is formatted as a backed assertion, however in the current specification
 it consists of a single assertion with zero certificates; that is, it is
 "unbacked".
 It is encoded as a backed assertion in order to provide future support
 for mutual authentication using native BrowserID certificates.
 Such support is not defined by this specification; implementations SHOULD
 reject backed response assertions.
\end_layout

\begin_layout Standard
In the case of a key successfully being negotiated, it is signed with the
 RP Response Key (RRK).
 Alternatively, it may be signed with the acceptor's private RSA or DSA
 key.
 In this case, an X.509 certificate of is included in the "x5c" attribute
 of the JWT header.
\end_layout

\begin_layout Standard
The HMAC-SHA256 (HS256) algorithm MUST be supported by implementors of this
 specification.
\end_layout

\begin_layout Standard
If a key is unavailable, then the signature is absent and the value of the
 "alg" header claim is "none".
 No signature verification is required in this case, however the initiator
 MUST NOT return GSS_C_COMPLETE unless the associated RFC3961 encryption
 type for the mechanism OID is ENCTYPE_NULL.
\end_layout

\begin_layout Standard
The response assertion payload may contain the following parameters.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

iat
\begin_inset Quotes erd
\end_inset

 (Issued at time)
\end_layout

\begin_layout Standard
The current acceptor time, in milliseconds since January 1, 1970.
 This allows the initiator to compensate for clock differences when generating
 assertions.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

ecdh
\begin_inset Quotes erd
\end_inset

 (Elliptic Curve Diffie-Hellman key exchange)
\end_layout

\begin_layout Standard
This contains a JSON object containing the coordinates of the acceptor's
 ECDH public key.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

 (Expiry time)
\end_layout

\begin_layout Standard
This contains the time when the context expires.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

nonce
\begin_inset Quotes erd
\end_inset

 (Mutual authentication nonce)
\end_layout

\begin_layout Standard
The nonce as received from the initiator.
 This SHOULD NOT be present unless a nonce was received from the initiator.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

tkt
\begin_inset Quotes erd
\end_inset

 (Ticket)
\end_layout

\begin_layout Standard
This contains a JSON object that may be used for re-authenticating to the
 acceptor without acquiring an assertion.
 Its usage is optional.
 It has two properties: 
\begin_inset Quotes eld
\end_inset

jti
\begin_inset Quotes erd
\end_inset

, an opaque identifier to be presented in a re-authentication assertion;
 and 
\begin_inset Quotes eld
\end_inset

exp
\begin_inset Quotes erd
\end_inset

, the expiry time of the ticket.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

gss-maj
\begin_inset Quotes erd
\end_inset

 (GSS major status code)
\end_layout

\begin_layout Standard
This contains a GSS major status code represented as a number.
 It MUST not be present if the acceptor did not return an error.
 Its usage is optional.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

gss-min
\begin_inset Quotes erd
\end_inset

 (GSS minor status code)
\end_layout

\begin_layout Standard
This contains a GSS minor status code represented as a number.
 It MUST not be present if the acceptor did not return an error and SHOULD
 not be present if there is no minor status code for the given major error.
 Its usage is optional.
\end_layout

\begin_layout Standard
If GSSBID_REAUTH_FAILED is received, the initiator SHOULD attempt to send
 another initial context token containing a fresh assertion.
\end_layout

\begin_layout Standard
[XXX define error codes]
\end_layout

\begin_layout Section
Key derivation
\end_layout

\begin_layout Standard
The following algorithm is used as the base algorithm for deriving keys:
\end_layout

\begin_layout Standard
browserid-derive-key(K, salt) = HMAC(K, "BrowserID" || K || salt || 0x01)
\end_layout

\begin_layout Standard
The HMAC hash algorithm for all currently specified key lengths is SHA256.
 Note that the inclusion of K in the HMAC input is for interoperability
 with some crypto implementations.
\end_layout

\begin_layout Subsection
Diffie-Hellman Key (DHK)
\end_layout

\begin_layout Standard
This key is the shared secret resulting from the ECDH exchange.
 Its length corresponds to the selected EC curve.
 It is never used without derivation and thus may be used with implementations
 that do not expose the DH value directly.
\end_layout

\begin_layout Subsection
Context Master Key (CMK)
\end_layout

\begin_layout Standard
This is the Diffie-Hellman Key (DHK) for all initially authenticated contexts
 and the Authenticator Session Key (ASK) for re-authenticated contexts.
\end_layout

\begin_layout Subsection
RP Response Key (RRK)
\end_layout

\begin_layout Standard
The response from the acceptor is signed using this key for fresh assertions:
\end_layout

\begin_layout Standard
RRK = browserid-derive-key(CMK, "RRK") 
\end_layout

\begin_layout Subsection
Context Root Key (CRK)
\end_layout

\begin_layout Standard
The context root key is used for 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 message protection services, e.g.
 GSS_Wrap() and GSS_Get_MIC().
\end_layout

\begin_layout Standard
CRK = random-to-key(browserid-derive-key(CMK, "CRK"))
\end_layout

\begin_layout Subsection
Authenticator Root Key (ARK)
\end_layout

\begin_layout Standard
The authenticator root key (ARK) is used to sign authenticators used for
 fast re-authentication.
 It is derived as follows:
\end_layout

\begin_layout Standard
ARK = browserid-derive-key(DHK, "ARK")
\end_layout

\begin_layout Subsection
Authenticator Session Key (ASK)
\end_layout

\begin_layout Standard
The authenticator session key (ASK) is used instead of the DHK for re-authentica
ted contexts.
 It is derived as follows:
\end_layout

\begin_layout Standard
ASK = browserid-derive-key(ARK, authenticator-as-jwt)
\end_layout

\begin_layout Section
GSS-API Extensions
\end_layout

\begin_layout Subsection
PRF
\end_layout

\begin_layout Standard
See 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4402
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
Naming extensions
\end_layout

\begin_layout Standard
The acceptor MAY surface attributes from the assertion and any certificates
 using GSS_Get_name_attribute().
 The URN prefix is "urn:ietf:params:gss:jwt".
 The acceptor MUST filter any sensitive attributes before returning them
 to the application.
\end_layout

\begin_layout Standard
If a SAML assertion is present in the "saml" parameter of the leaf certificate,
 it may be surfaced using the URN prefix "urn:ietf:params:gss:federated-saml-att
ribute".
\end_layout

\begin_layout Standard
Attributes from the assertion MUST be marked as unauthenticated unless otherwise
 validated by the acceptor (e.g.
 the audience).
\end_layout

\begin_layout Standard
Attributes from certificates SHOULD be marked as authenticated.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:NegoEx"

\end_inset

NegoEx
\end_layout

\begin_layout Standard
GSS BrowserID supports 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.zhu-negoex
\end_layout

\end_inset

 for advertising RP certificates used in mutual authentication.
\end_layout

\begin_layout Standard
If the acceptor supports mutual authentication, it MAY include its certificate
 and any additional certificates inside a backed assertion with an empty
 payload as output for GSS_Query_meta_data().
 The "assertion" is prepended with the two byte token identifier TOK_TYPE_ACCEPT
OR_META_DATA.
\end_layout

\begin_layout Standard
Upon receiving this, the initiator SHOULD display the certificate information
 or fingerprint to the user and allow them to confirm it before committing
 to authenticate.
\end_layout

\begin_layout Standard
The NegoEx signing key is the output of GSS_Pseudo_random() with an input
 of GSS_C_PRF_KEY_FULL and "gss-browserid-negoex-initiator" or "gss-browserid-ne
goex-acceptor", depending on the party generating the signature.
\end_layout

\begin_layout Standard
The NegoEx authentication scheme is the binary encoding of the following
 hexadecimal string:
\end_layout

\begin_layout Standard
535538008647F5BC624BD8076949F0
\end_layout

\begin_layout Standard
where the third byte (zero above) is set to the 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC3961
\end_layout

\end_inset

 encryption type for the selected mechanism.
\end_layout

\begin_layout Standard
There is currently no initiator-sent metadata defined and acceptors should
 ignore any sent.
 The metadata is advisory and the initiator is free to ignore it.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This section only addresses security considerations associated with BrowserID
 and SASL and GSS-API.
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Standard
There are security issues associated with the use of JavaScript for cryptography.
\end_layout

\begin_layout Subsection
Host certificates for mutual authentication
\end_layout

\begin_layout Standard
Allowing a match on only the DNS subjectAltName in an acceptor's X.509 certificat
e permits different services on the same host to impersonate each other.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout Standard
This specification creates a number of IANA registries.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:OID Registry"

\end_inset

OID Registry
\end_layout

\begin_layout Standard
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID (1.3.6.1.4.1.5322.24)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mechanisms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sub-arc containing BrowserID mechanisms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nametypes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A sub-arc containing BrowserID name types
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.mechanisms (1.3.6.1.4.1.5322.
24.1)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-null
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The NULL security mechanism
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-aes128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The aes128-cts-hmac-sha1-96 mechanism
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gss-browserid-aes256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The aes256-cts-hmac-sha1-96 mechanism
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Prefix: iso.org.dod.internet.private.enterprise.padl.gssBrowserID.nametypes (1.3.6.1.4.1.5322.2
4.2)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GSS_C_NT_BROWSERID_PRINCIPAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
SASL Registry
\end_layout

\begin_layout Standard
Subject: Registration of SASL mechanisms BROWSERID-AES128 and BROWSERID-AES128-P
LUS
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
SASL mechanism names: BROWSERID-AES128 and BROWSERID-AES128-PLUS
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Security considerations: See RFC 5801 and draft-howard-gss-browserid
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Published specification (recommended): draft-howard-gss-browserid
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Person & email address to contact for further information:
\end_layout

\begin_layout Standard
Luke Howard lukeh@padl.com
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Intended usage: common
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Owner/Change controller: iesg@ietf.org
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Note: This mechanism describes the GSS BrowserID mechanism used with the
 aes128-cts-hmac-sha1-96 enctype.
 The GSS-API OID for this mechanism is 1.3.6.1.4.1.5322.24.1.17.
 As described in RFC 5801 a PLUS variant of this mechanism is also required.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC2743"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC3961"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3961.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4402"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4402.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4121"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4178"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4178.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4422"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5178"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5178.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5801"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5801.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC5929"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWA"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWS"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "JWT"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-json-web-token.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "NegoEx"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.zhu-negoex.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status open

\begin_layout Plain Layout
<reference anchor='RFC2119'> <front> <title abbrev='RFC Key Words'>Key words
 for use in RFCs to Indicate Requirement Levels</title> <author initials='S.'
 surname='Bradner' fullname='Scott Bradner'> <organization>Harvard University</o
rganization> <address> <postal> <street>1350 Mass.
 Ave.</street> <street>Cambridge</street> <street>MA 02138</street></postal>
 <phone>- +1 617 495 3864</phone> <email>sob@harvard.edu</email></address></autho
r> <date year='1997' month='March' /> <area>General</area> <keyword>keyword</key
word> <abstract> <t> In many standards track documents several words are
 used to signify the requirements in the specification.
 These words are often capitalized.
 This document defines these words as they should be interpreted in IETF
 documents.
 Authors who follow these guidelines should incorporate this phrase near
 the beginning of their document: <list> <t> The key words "MUST", "MUST
 NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",
 "MAY", and "OPTIONAL" in this document are to be interpreted as described
 in RFC 2119.
 </t></list></t> <t> Note that the force of these words is modified by the
 requirement level of the document in which they are used.
 </t></abstract></front> <seriesInfo name='BCP' value='14' /> <seriesInfo
 name='RFC' value='2119' /> <format type='TXT' octets='4723' target='http://www.r
fc-editor.org/rfc/rfc2119.txt' /> <format type='HTML' octets='17970' target='http:
//xml.resource.org/public/rfc/html/rfc2119.html' /> <format type='XML' octets='5777
' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' /> </reference>
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status open

\begin_layout Plain Layout
<reference anchor='RFC1113'> <front> <title abbrev='Mail Privacy: Procedures'>Pr
ivacy enhancement for Internet electronic mail: Part I - message encipherment
 and authentication procedures</title> <author initials='J.' surname='Linn'
 fullname='John Linn'> <organization>Digital Equipment Corporation (DEC),
 Secure Systems</organization> <address> <postal> <street>85 Swanson Road</stree
t> <street>BXB1-2/D04</street> <city>Boxborough</city> <region>MA</region>
 <code>01719-1326</code> <country>US</country></postal> <phone>+1 508 264
 5491</phone> <email>Linn@ultra.enet.dec.com</email></address></author> <date
 year='1989' day='1' month='August' /></front> <seriesInfo name='RFC' value='111
3' /> <format type='TXT' octets='89293' target='http://www.rfc-editor.org/rfc/rfc1
113.txt' /> </reference> 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "RFC4120"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
